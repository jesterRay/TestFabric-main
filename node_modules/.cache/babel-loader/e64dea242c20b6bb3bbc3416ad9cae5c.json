{"ast":null,"code":"'use strict';\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar fxAttrs = require('../../components/fx/layout_attributes');\nvar Scene = require('./scene');\nvar getSubplotData = require('../get_data').getSubplotData;\nvar Lib = require('../../lib');\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\nvar GL3D = 'gl3d';\nvar SCENE = 'scene';\nexports.name = GL3D;\nexports.attr = SCENE;\nexports.idRoot = SCENE;\nexports.idRegex = exports.attrRegex = Lib.counterRegex('scene');\nexports.attributes = require('./layout/attributes');\nexports.layoutAttributes = require('./layout/layout_attributes');\nexports.baseLayoutAttrOverrides = overrideAll({\n  hoverlabel: fxAttrs.hoverlabel\n}, 'plot', 'nested');\nexports.supplyLayoutDefaults = require('./layout/defaults');\nexports.plot = function plot(gd) {\n  var fullLayout = gd._fullLayout;\n  var fullData = gd._fullData;\n  var sceneIds = fullLayout._subplots[GL3D];\n  for (var i = 0; i < sceneIds.length; i++) {\n    var sceneId = sceneIds[i];\n    var fullSceneData = getSubplotData(fullData, GL3D, sceneId);\n    var sceneLayout = fullLayout[sceneId];\n    var camera = sceneLayout.camera;\n    var scene = sceneLayout._scene;\n    if (!scene) {\n      scene = new Scene({\n        id: sceneId,\n        graphDiv: gd,\n        container: gd.querySelector('.gl-container'),\n        staticPlot: gd._context.staticPlot,\n        plotGlPixelRatio: gd._context.plotGlPixelRatio,\n        camera: camera\n      }, fullLayout);\n\n      // set ref to Scene instance\n      sceneLayout._scene = scene;\n    }\n\n    // save 'initial' camera view settings for modebar button\n    if (!scene.viewInitial) {\n      scene.viewInitial = {\n        up: {\n          x: camera.up.x,\n          y: camera.up.y,\n          z: camera.up.z\n        },\n        eye: {\n          x: camera.eye.x,\n          y: camera.eye.y,\n          z: camera.eye.z\n        },\n        center: {\n          x: camera.center.x,\n          y: camera.center.y,\n          z: camera.center.z\n        }\n      };\n    }\n    scene.plot(fullSceneData, fullLayout, gd.layout);\n  }\n};\nexports.clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var oldSceneKeys = oldFullLayout._subplots[GL3D] || [];\n  for (var i = 0; i < oldSceneKeys.length; i++) {\n    var oldSceneKey = oldSceneKeys[i];\n    if (!newFullLayout[oldSceneKey] && !!oldFullLayout[oldSceneKey]._scene) {\n      oldFullLayout[oldSceneKey]._scene.destroy();\n      if (oldFullLayout._infolayer) {\n        oldFullLayout._infolayer.selectAll('.annotation-' + oldSceneKey).remove();\n      }\n    }\n  }\n};\nexports.toSVG = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var sceneIds = fullLayout._subplots[GL3D];\n  var size = fullLayout._size;\n  for (var i = 0; i < sceneIds.length; i++) {\n    var sceneLayout = fullLayout[sceneIds[i]];\n    var domain = sceneLayout.domain;\n    var scene = sceneLayout._scene;\n    var imageData = scene.toImage('png');\n    var image = fullLayout._glimages.append('svg:image');\n    image.attr({\n      xmlns: xmlnsNamespaces.svg,\n      'xlink:href': imageData,\n      x: size.l + size.w * domain.x[0],\n      y: size.t + size.h * (1 - domain.y[1]),\n      width: size.w * (domain.x[1] - domain.x[0]),\n      height: size.h * (domain.y[1] - domain.y[0]),\n      preserveAspectRatio: 'none'\n    });\n    scene.destroy();\n  }\n};\n\n// clean scene ids, 'scene1' -> 'scene'\nexports.cleanId = function cleanId(id) {\n  if (!id.match(/^scene[0-9]*$/)) return;\n  var sceneNum = id.substr(5);\n  if (sceneNum === '1') sceneNum = '';\n  return SCENE + sceneNum;\n};\nexports.updateFx = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots[GL3D];\n  for (var i = 0; i < subplotIds.length; i++) {\n    var subplotObj = fullLayout[subplotIds[i]]._scene;\n    subplotObj.updateFx(fullLayout.dragmode, fullLayout.hovermode);\n  }\n};","map":{"version":3,"names":["overrideAll","require","fxAttrs","Scene","getSubplotData","Lib","xmlnsNamespaces","GL3D","SCENE","exports","name","attr","idRoot","idRegex","attrRegex","counterRegex","attributes","layoutAttributes","baseLayoutAttrOverrides","hoverlabel","supplyLayoutDefaults","plot","gd","fullLayout","_fullLayout","fullData","_fullData","sceneIds","_subplots","i","length","sceneId","fullSceneData","sceneLayout","camera","scene","_scene","id","graphDiv","container","querySelector","staticPlot","_context","plotGlPixelRatio","viewInitial","up","x","y","z","eye","center","layout","clean","newFullData","newFullLayout","oldFullData","oldFullLayout","oldSceneKeys","oldSceneKey","destroy","_infolayer","selectAll","remove","toSVG","size","_size","domain","imageData","toImage","image","_glimages","append","xmlns","svg","l","w","t","h","width","height","preserveAspectRatio","cleanId","match","sceneNum","substr","updateFx","subplotIds","subplotObj","dragmode","hovermode"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/plots/gl3d/index.js"],"sourcesContent":["'use strict';\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar fxAttrs = require('../../components/fx/layout_attributes');\n\nvar Scene = require('./scene');\nvar getSubplotData = require('../get_data').getSubplotData;\nvar Lib = require('../../lib');\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nvar GL3D = 'gl3d';\nvar SCENE = 'scene';\n\n\nexports.name = GL3D;\n\nexports.attr = SCENE;\n\nexports.idRoot = SCENE;\n\nexports.idRegex = exports.attrRegex = Lib.counterRegex('scene');\n\nexports.attributes = require('./layout/attributes');\n\nexports.layoutAttributes = require('./layout/layout_attributes');\n\nexports.baseLayoutAttrOverrides = overrideAll({\n    hoverlabel: fxAttrs.hoverlabel\n}, 'plot', 'nested');\n\nexports.supplyLayoutDefaults = require('./layout/defaults');\n\nexports.plot = function plot(gd) {\n    var fullLayout = gd._fullLayout;\n    var fullData = gd._fullData;\n    var sceneIds = fullLayout._subplots[GL3D];\n\n    for(var i = 0; i < sceneIds.length; i++) {\n        var sceneId = sceneIds[i];\n        var fullSceneData = getSubplotData(fullData, GL3D, sceneId);\n        var sceneLayout = fullLayout[sceneId];\n        var camera = sceneLayout.camera;\n        var scene = sceneLayout._scene;\n\n        if(!scene) {\n            scene = new Scene({\n                id: sceneId,\n                graphDiv: gd,\n                container: gd.querySelector('.gl-container'),\n                staticPlot: gd._context.staticPlot,\n                plotGlPixelRatio: gd._context.plotGlPixelRatio,\n                camera: camera\n            },\n                fullLayout\n            );\n\n            // set ref to Scene instance\n            sceneLayout._scene = scene;\n        }\n\n        // save 'initial' camera view settings for modebar button\n        if(!scene.viewInitial) {\n            scene.viewInitial = {\n                up: {\n                    x: camera.up.x,\n                    y: camera.up.y,\n                    z: camera.up.z\n                },\n                eye: {\n                    x: camera.eye.x,\n                    y: camera.eye.y,\n                    z: camera.eye.z\n                },\n                center: {\n                    x: camera.center.x,\n                    y: camera.center.y,\n                    z: camera.center.z\n                }\n            };\n        }\n\n        scene.plot(fullSceneData, fullLayout, gd.layout);\n    }\n};\n\nexports.clean = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var oldSceneKeys = oldFullLayout._subplots[GL3D] || [];\n\n    for(var i = 0; i < oldSceneKeys.length; i++) {\n        var oldSceneKey = oldSceneKeys[i];\n\n        if(!newFullLayout[oldSceneKey] && !!oldFullLayout[oldSceneKey]._scene) {\n            oldFullLayout[oldSceneKey]._scene.destroy();\n\n            if(oldFullLayout._infolayer) {\n                oldFullLayout._infolayer\n                    .selectAll('.annotation-' + oldSceneKey)\n                    .remove();\n            }\n        }\n    }\n};\n\nexports.toSVG = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var sceneIds = fullLayout._subplots[GL3D];\n    var size = fullLayout._size;\n\n    for(var i = 0; i < sceneIds.length; i++) {\n        var sceneLayout = fullLayout[sceneIds[i]];\n        var domain = sceneLayout.domain;\n        var scene = sceneLayout._scene;\n\n        var imageData = scene.toImage('png');\n        var image = fullLayout._glimages.append('svg:image');\n\n        image.attr({\n            xmlns: xmlnsNamespaces.svg,\n            'xlink:href': imageData,\n            x: size.l + size.w * domain.x[0],\n            y: size.t + size.h * (1 - domain.y[1]),\n            width: size.w * (domain.x[1] - domain.x[0]),\n            height: size.h * (domain.y[1] - domain.y[0]),\n            preserveAspectRatio: 'none'\n        });\n\n        scene.destroy();\n    }\n};\n\n// clean scene ids, 'scene1' -> 'scene'\nexports.cleanId = function cleanId(id) {\n    if(!id.match(/^scene[0-9]*$/)) return;\n\n    var sceneNum = id.substr(5);\n    if(sceneNum === '1') sceneNum = '';\n\n    return SCENE + sceneNum;\n};\n\nexports.updateFx = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var subplotIds = fullLayout._subplots[GL3D];\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var subplotObj = fullLayout[subplotIds[i]]._scene;\n        subplotObj.updateFx(fullLayout.dragmode, fullLayout.hovermode);\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}