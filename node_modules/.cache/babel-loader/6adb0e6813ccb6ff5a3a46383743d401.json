{"ast":null,"code":"'use strict';\n\n/* eslint-disable consistent-return */\nfunction isWhiteSpace(chr) {\n  return chr === 0x20 || chr === 0x09 || chr === 0x0D || chr === 0x0A;\n}\n\n// Filter NaN, Infinity, < 0\nfunction isFinitePositive(val) {\n  return typeof val === 'number' && isFinite(val) && val > 0;\n}\nfunction canBeSvg(buf) {\n  var i = 0,\n    max = buf.length;\n\n  // byte order mark, https://github.com/nodeca/probe-image-size/issues/57\n  if (buf[0] === 0xEF && buf[1] === 0xBB && buf[2] === 0xBF) i = 3;\n  while (i < max && isWhiteSpace(buf[i])) i++;\n  if (i === max) return false;\n  return buf[i] === 0x3c; /* < */\n}\n\n// skip `<?` (comments), `<!` (directives, cdata, doctype),\n// looking for `<svg>` or `<NAMESPACE:svg>`\nvar SVG_HEADER_RE = /<[-_.:a-zA-Z0-9][^>]*>/;\n\n// test if the top level element is svg + optional namespace,\n// used to skip svg embedded in html\nvar SVG_TAG_RE = /^<([-_.:a-zA-Z0-9]+:)?svg\\s/;\nvar SVG_WIDTH_RE = /[^-]\\bwidth=\"([^%]+?)\"|[^-]\\bwidth='([^%]+?)'/;\nvar SVG_HEIGHT_RE = /\\bheight=\"([^%]+?)\"|\\bheight='([^%]+?)'/;\nvar SVG_VIEWBOX_RE = /\\bview[bB]ox=\"(.+?)\"|\\bview[bB]ox='(.+?)'/;\nvar SVG_UNITS_RE = /in$|mm$|cm$|pt$|pc$|px$|em$|ex$/;\nfunction svgAttrs(str) {\n  var width = str.match(SVG_WIDTH_RE);\n  var height = str.match(SVG_HEIGHT_RE);\n  var viewbox = str.match(SVG_VIEWBOX_RE);\n  return {\n    width: width && (width[1] || width[2]),\n    height: height && (height[1] || height[2]),\n    viewbox: viewbox && (viewbox[1] || viewbox[2])\n  };\n}\nfunction units(str) {\n  if (!SVG_UNITS_RE.test(str)) return 'px';\n  return str.match(SVG_UNITS_RE)[0];\n}\nmodule.exports = function (data) {\n  if (!canBeSvg(data)) return;\n  var str = '';\n  for (var i = 0; i < data.length; i++) {\n    // 1. We can't rely on buffer features\n    // 2. Don't care about UTF16 because ascii is enougth for our goals\n    str += String.fromCharCode(data[i]);\n  }\n\n  // get top level element\n  var svgTag = (str.match(SVG_HEADER_RE) || [''])[0];\n\n  // test if top level element is <svg>\n  if (!SVG_TAG_RE.test(svgTag)) return;\n  var attrs = svgAttrs(svgTag);\n  var width = parseFloat(attrs.width);\n  var height = parseFloat(attrs.height);\n\n  // Extract from direct values\n\n  if (attrs.width && attrs.height) {\n    if (!isFinitePositive(width) || !isFinitePositive(height)) return;\n    return {\n      width: width,\n      height: height,\n      type: 'svg',\n      mime: 'image/svg+xml',\n      wUnits: units(attrs.width),\n      hUnits: units(attrs.height)\n    };\n  }\n\n  // Extract from viewbox\n\n  var parts = (attrs.viewbox || '').split(' ');\n  var viewbox = {\n    width: parts[2],\n    height: parts[3]\n  };\n  var vbWidth = parseFloat(viewbox.width);\n  var vbHeight = parseFloat(viewbox.height);\n  if (!isFinitePositive(vbWidth) || !isFinitePositive(vbHeight)) return;\n  if (units(viewbox.width) !== units(viewbox.height)) return;\n  var ratio = vbWidth / vbHeight;\n  if (attrs.width) {\n    if (!isFinitePositive(width)) return;\n    return {\n      width: width,\n      height: width / ratio,\n      type: 'svg',\n      mime: 'image/svg+xml',\n      wUnits: units(attrs.width),\n      hUnits: units(attrs.width)\n    };\n  }\n  if (attrs.height) {\n    if (!isFinitePositive(height)) return;\n    return {\n      width: height * ratio,\n      height: height,\n      type: 'svg',\n      mime: 'image/svg+xml',\n      wUnits: units(attrs.height),\n      hUnits: units(attrs.height)\n    };\n  }\n  return {\n    width: vbWidth,\n    height: vbHeight,\n    type: 'svg',\n    mime: 'image/svg+xml',\n    wUnits: units(viewbox.width),\n    hUnits: units(viewbox.height)\n  };\n};","map":{"version":3,"names":["isWhiteSpace","chr","isFinitePositive","val","isFinite","canBeSvg","buf","i","max","length","SVG_HEADER_RE","SVG_TAG_RE","SVG_WIDTH_RE","SVG_HEIGHT_RE","SVG_VIEWBOX_RE","SVG_UNITS_RE","svgAttrs","str","width","match","height","viewbox","units","test","module","exports","data","String","fromCharCode","svgTag","attrs","parseFloat","type","mime","wUnits","hUnits","parts","split","vbWidth","vbHeight","ratio"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/probe-image-size/lib/parse_sync/svg.js"],"sourcesContent":["'use strict';\n\n/* eslint-disable consistent-return */\n\nfunction isWhiteSpace(chr) {\n  return chr === 0x20 || chr === 0x09 || chr === 0x0D || chr === 0x0A;\n}\n\n// Filter NaN, Infinity, < 0\nfunction isFinitePositive(val) {\n  return typeof val === 'number' && isFinite(val) && val > 0;\n}\n\nfunction canBeSvg(buf) {\n  var i = 0, max = buf.length;\n\n  // byte order mark, https://github.com/nodeca/probe-image-size/issues/57\n  if (buf[0] === 0xEF && buf[1] === 0xBB && buf[2] === 0xBF) i = 3;\n\n  while (i < max && isWhiteSpace(buf[i])) i++;\n\n  if (i === max) return false;\n  return buf[i] === 0x3c; /* < */\n}\n\n\n// skip `<?` (comments), `<!` (directives, cdata, doctype),\n// looking for `<svg>` or `<NAMESPACE:svg>`\nvar SVG_HEADER_RE  = /<[-_.:a-zA-Z0-9][^>]*>/;\n\n// test if the top level element is svg + optional namespace,\n// used to skip svg embedded in html\nvar SVG_TAG_RE     = /^<([-_.:a-zA-Z0-9]+:)?svg\\s/;\n\nvar SVG_WIDTH_RE   = /[^-]\\bwidth=\"([^%]+?)\"|[^-]\\bwidth='([^%]+?)'/;\nvar SVG_HEIGHT_RE  = /\\bheight=\"([^%]+?)\"|\\bheight='([^%]+?)'/;\nvar SVG_VIEWBOX_RE = /\\bview[bB]ox=\"(.+?)\"|\\bview[bB]ox='(.+?)'/;\nvar SVG_UNITS_RE   = /in$|mm$|cm$|pt$|pc$|px$|em$|ex$/;\n\nfunction svgAttrs(str) {\n  var width   = str.match(SVG_WIDTH_RE);\n  var height  = str.match(SVG_HEIGHT_RE);\n  var viewbox = str.match(SVG_VIEWBOX_RE);\n\n  return {\n    width:   width && (width[1] || width[2]),\n    height:  height && (height[1] || height[2]),\n    viewbox: viewbox && (viewbox[1] || viewbox[2])\n  };\n}\n\n\nfunction units(str) {\n  if (!SVG_UNITS_RE.test(str)) return 'px';\n\n  return str.match(SVG_UNITS_RE)[0];\n}\n\n\nmodule.exports = function (data) {\n  if (!canBeSvg(data)) return;\n\n  var str = '';\n\n  for (var i = 0; i < data.length; i++) {\n    // 1. We can't rely on buffer features\n    // 2. Don't care about UTF16 because ascii is enougth for our goals\n    str += String.fromCharCode(data[i]);\n  }\n\n  // get top level element\n  var svgTag = (str.match(SVG_HEADER_RE) || [ '' ])[0];\n\n  // test if top level element is <svg>\n  if (!SVG_TAG_RE.test(svgTag)) return;\n\n  var attrs  = svgAttrs(svgTag);\n  var width  = parseFloat(attrs.width);\n  var height = parseFloat(attrs.height);\n\n  // Extract from direct values\n\n  if (attrs.width && attrs.height) {\n    if (!isFinitePositive(width) || !isFinitePositive(height)) return;\n\n    return {\n      width:  width,\n      height: height,\n      type:   'svg',\n      mime:   'image/svg+xml',\n      wUnits: units(attrs.width),\n      hUnits: units(attrs.height)\n    };\n  }\n\n  // Extract from viewbox\n\n  var parts = (attrs.viewbox || '').split(' ');\n  var viewbox = {\n    width:  parts[2],\n    height: parts[3]\n  };\n  var vbWidth  = parseFloat(viewbox.width);\n  var vbHeight = parseFloat(viewbox.height);\n\n  if (!isFinitePositive(vbWidth) || !isFinitePositive(vbHeight)) return;\n  if (units(viewbox.width) !== units(viewbox.height)) return;\n\n  var ratio = vbWidth / vbHeight;\n\n  if (attrs.width) {\n    if (!isFinitePositive(width)) return;\n\n    return {\n      width:  width,\n      height: width / ratio,\n      type:   'svg',\n      mime:   'image/svg+xml',\n      wUnits: units(attrs.width),\n      hUnits: units(attrs.width)\n    };\n  }\n\n  if (attrs.height) {\n    if (!isFinitePositive(height)) return;\n\n    return {\n      width:  height * ratio,\n      height: height,\n      type:   'svg',\n      mime:   'image/svg+xml',\n      wUnits: units(attrs.height),\n      hUnits: units(attrs.height)\n    };\n  }\n\n  return {\n    width:  vbWidth,\n    height: vbHeight,\n    type:   'svg',\n    mime:   'image/svg+xml',\n    wUnits: units(viewbox.width),\n    hUnits: units(viewbox.height)\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}