{"ast":null,"code":"'use strict';\n\nvar parse = require('parse-svg-path');\nvar abs = require('abs-svg-path');\nvar normalize = require('normalize-svg-path');\nvar isSvgPath = require('is-svg-path');\nmodule.exports = pathBounds;\nfunction pathBounds(path) {\n  // ES6 string tpl call\n  if (Array.isArray(path) && path.length === 1 && typeof path[0] === 'string') path = path[0];\n\n  // svg path string\n  if (typeof path === 'string') {\n    if (!isSvgPath(path)) throw Error('String is not an SVG path.');\n    path = parse(path);\n  }\n  if (!Array.isArray(path)) throw Error('Argument should be a string or an array of path segments.');\n  path = abs(path);\n  path = normalize(path);\n  if (!path.length) return [0, 0, 0, 0];\n  var bounds = [Infinity, Infinity, -Infinity, -Infinity];\n  for (var i = 0, l = path.length; i < l; i++) {\n    var points = path[i].slice(1);\n    for (var j = 0; j < points.length; j += 2) {\n      if (points[j + 0] < bounds[0]) bounds[0] = points[j + 0];\n      if (points[j + 1] < bounds[1]) bounds[1] = points[j + 1];\n      if (points[j + 0] > bounds[2]) bounds[2] = points[j + 0];\n      if (points[j + 1] > bounds[3]) bounds[3] = points[j + 1];\n    }\n  }\n  return bounds;\n}","map":{"version":3,"names":["parse","require","abs","normalize","isSvgPath","module","exports","pathBounds","path","Array","isArray","length","Error","bounds","Infinity","i","l","points","slice","j"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/svg-path-bounds/index.js"],"sourcesContent":["'use strict'\r\n\r\nvar parse = require('parse-svg-path')\r\nvar abs = require('abs-svg-path')\r\nvar normalize = require('normalize-svg-path')\r\nvar isSvgPath = require('is-svg-path')\r\n\r\nmodule.exports = pathBounds\r\n\r\n\r\nfunction pathBounds(path) {\r\n  // ES6 string tpl call\r\n  if (Array.isArray(path) && path.length === 1 && typeof path[0] === 'string') path = path[0]\r\n\r\n  // svg path string\r\n  if (typeof path === 'string') {\r\n    if (!isSvgPath(path)) throw Error('String is not an SVG path.')\r\n    path = parse(path)\r\n  }\r\n\r\n  if (!Array.isArray(path)) throw Error('Argument should be a string or an array of path segments.')\r\n\r\n  path = abs(path)\r\n  path = normalize(path)\r\n\r\n  if (!path.length) return [0, 0, 0, 0]\r\n\r\n  var bounds = [Infinity, Infinity, -Infinity, -Infinity]\r\n\r\n  for (var i = 0, l = path.length; i < l; i++) {\r\n    var points = path[i].slice(1)\r\n\r\n    for (var j = 0; j < points.length; j += 2) {\r\n      if (points[j + 0] < bounds[0]) bounds[0] = points[j + 0]\r\n      if (points[j + 1] < bounds[1]) bounds[1] = points[j + 1]\r\n      if (points[j + 0] > bounds[2]) bounds[2] = points[j + 0]\r\n      if (points[j + 1] > bounds[3]) bounds[3] = points[j + 1]\r\n    }\r\n  }\r\n\r\n  return bounds\r\n}\r\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACrC,IAAIC,GAAG,GAAGD,OAAO,CAAC,cAAc,CAAC;AACjC,IAAIE,SAAS,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAC7C,IAAIG,SAAS,GAAGH,OAAO,CAAC,aAAa,CAAC;AAEtCI,MAAM,CAACC,OAAO,GAAGC,UAAU;AAG3B,SAASA,UAAUA,CAACC,IAAI,EAAE;EACxB;EACA,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,IAAIA,IAAI,CAACG,MAAM,KAAK,CAAC,IAAI,OAAOH,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAEA,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC;;EAE3F;EACA,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;IAC5B,IAAI,CAACJ,SAAS,CAACI,IAAI,CAAC,EAAE,MAAMI,KAAK,CAAC,4BAA4B,CAAC;IAC/DJ,IAAI,GAAGR,KAAK,CAACQ,IAAI,CAAC;EACpB;EAEA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE,MAAMI,KAAK,CAAC,2DAA2D,CAAC;EAElGJ,IAAI,GAAGN,GAAG,CAACM,IAAI,CAAC;EAChBA,IAAI,GAAGL,SAAS,CAACK,IAAI,CAAC;EAEtB,IAAI,CAACA,IAAI,CAACG,MAAM,EAAE,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAErC,IAAIE,MAAM,GAAG,CAACC,QAAQ,EAAEA,QAAQ,EAAE,CAACA,QAAQ,EAAE,CAACA,QAAQ,CAAC;EAEvD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGR,IAAI,CAACG,MAAM,EAAEI,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IAC3C,IAAIE,MAAM,GAAGT,IAAI,CAACO,CAAC,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC;IAE7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACN,MAAM,EAAEQ,CAAC,IAAI,CAAC,EAAE;MACzC,IAAIF,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGN,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,GAAGI,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC;MACxD,IAAIF,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGN,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,GAAGI,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC;MACxD,IAAIF,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGN,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,GAAGI,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC;MACxD,IAAIF,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC,GAAGN,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,GAAGI,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC;IAC1D;EACF;EAEA,OAAON,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"script"}