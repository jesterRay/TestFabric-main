{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\nvar Lib = require('../../lib');\nvar Drawing = require('../../components/drawing');\nvar svgTextUtils = require('../../lib/svg_text_utils');\nvar partition = require('./partition');\nvar styleOne = require('./style').styleOne;\nvar constants = require('./constants');\nvar helpers = require('../sunburst/helpers');\nvar attachFxHandlers = require('../sunburst/fx');\nvar onPathbar = true; // for Ancestors\n\nmodule.exports = function drawAncestors(gd, cd, entry, slices, opts) {\n  var barDifY = opts.barDifY;\n  var width = opts.width;\n  var height = opts.height;\n  var viewX = opts.viewX;\n  var viewY = opts.viewY;\n  var pathSlice = opts.pathSlice;\n  var toMoveInsideSlice = opts.toMoveInsideSlice;\n  var strTransform = opts.strTransform;\n  var hasTransition = opts.hasTransition;\n  var handleSlicesExit = opts.handleSlicesExit;\n  var makeUpdateSliceInterpolator = opts.makeUpdateSliceInterpolator;\n  var makeUpdateTextInterpolator = opts.makeUpdateTextInterpolator;\n  var refRect = {};\n  var isStatic = gd._context.staticPlot;\n  var fullLayout = gd._fullLayout;\n  var cd0 = cd[0];\n  var trace = cd0.trace;\n  var hierarchy = cd0.hierarchy;\n  var eachWidth = width / trace._entryDepth;\n  var pathIds = helpers.listPath(entry.data, 'id');\n  var sliceData = partition(hierarchy.copy(), [width, height], {\n    packing: 'dice',\n    pad: {\n      inner: 0,\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  }).descendants();\n\n  // edit slices that show up on graph\n  sliceData = sliceData.filter(function (pt) {\n    var level = pathIds.indexOf(pt.data.id);\n    if (level === -1) return false;\n    pt.x0 = eachWidth * level;\n    pt.x1 = eachWidth * (level + 1);\n    pt.y0 = barDifY;\n    pt.y1 = barDifY + height;\n    pt.onPathbar = true;\n    return true;\n  });\n  sliceData.reverse();\n  slices = slices.data(sliceData, helpers.getPtId);\n  slices.enter().append('g').classed('pathbar', true);\n  handleSlicesExit(slices, onPathbar, refRect, [width, height], pathSlice);\n  slices.order();\n  var updateSlices = slices;\n  if (hasTransition) {\n    updateSlices = updateSlices.transition().each('end', function () {\n      // N.B. gd._transitioning is (still) *true* by the time\n      // transition updates get here\n      var sliceTop = d3.select(this);\n      helpers.setSliceCursor(sliceTop, gd, {\n        hideOnRoot: false,\n        hideOnLeaves: false,\n        isTransitioning: false\n      });\n    });\n  }\n  updateSlices.each(function (pt) {\n    // for bbox\n    pt._x0 = viewX(pt.x0);\n    pt._x1 = viewX(pt.x1);\n    pt._y0 = viewY(pt.y0);\n    pt._y1 = viewY(pt.y1);\n    pt._hoverX = viewX(pt.x1 - Math.min(width, height) / 2);\n    pt._hoverY = viewY(pt.y1 - height / 2);\n    var sliceTop = d3.select(this);\n    var slicePath = Lib.ensureSingle(sliceTop, 'path', 'surface', function (s) {\n      s.style('pointer-events', isStatic ? 'none' : 'all');\n    });\n    if (hasTransition) {\n      slicePath.transition().attrTween('d', function (pt2) {\n        var interp = makeUpdateSliceInterpolator(pt2, onPathbar, refRect, [width, height]);\n        return function (t) {\n          return pathSlice(interp(t));\n        };\n      });\n    } else {\n      slicePath.attr('d', pathSlice);\n    }\n    sliceTop.call(attachFxHandlers, entry, gd, cd, {\n      styleOne: styleOne,\n      eventDataKeys: constants.eventDataKeys,\n      transitionTime: constants.CLICK_TRANSITION_TIME,\n      transitionEasing: constants.CLICK_TRANSITION_EASING\n    }).call(helpers.setSliceCursor, gd, {\n      hideOnRoot: false,\n      hideOnLeaves: false,\n      isTransitioning: gd._transitioning\n    });\n    slicePath.call(styleOne, pt, trace, gd, {\n      hovered: false\n    });\n    pt._text = (helpers.getPtLabel(pt) || '').split('<br>').join(' ') || '';\n    var sliceTextGroup = Lib.ensureSingle(sliceTop, 'g', 'slicetext');\n    var sliceText = Lib.ensureSingle(sliceTextGroup, 'text', '', function (s) {\n      // prohibit tex interpretation until we can handle\n      // tex and regular text together\n      s.attr('data-notex', 1);\n    });\n    var font = Lib.ensureUniformFontSize(gd, helpers.determineTextFont(trace, pt, fullLayout.font, {\n      onPathbar: true\n    }));\n    sliceText.text(pt._text || ' ') // use one space character instead of a blank string to avoid jumps during transition\n    .classed('slicetext', true).attr('text-anchor', 'start').call(Drawing.font, font).call(svgTextUtils.convertToTspans, gd);\n    pt.textBB = Drawing.bBox(sliceText.node());\n    pt.transform = toMoveInsideSlice(pt, {\n      fontSize: font.size,\n      onPathbar: true\n    });\n    pt.transform.fontSize = font.size;\n    if (hasTransition) {\n      sliceText.transition().attrTween('transform', function (pt2) {\n        var interp = makeUpdateTextInterpolator(pt2, onPathbar, refRect, [width, height]);\n        return function (t) {\n          return strTransform(interp(t));\n        };\n      });\n    } else {\n      sliceText.attr('transform', strTransform(pt));\n    }\n  });\n};","map":{"version":3,"names":["d3","require","Lib","Drawing","svgTextUtils","partition","styleOne","constants","helpers","attachFxHandlers","onPathbar","module","exports","drawAncestors","gd","cd","entry","slices","opts","barDifY","width","height","viewX","viewY","pathSlice","toMoveInsideSlice","strTransform","hasTransition","handleSlicesExit","makeUpdateSliceInterpolator","makeUpdateTextInterpolator","refRect","isStatic","_context","staticPlot","fullLayout","_fullLayout","cd0","trace","hierarchy","eachWidth","_entryDepth","pathIds","listPath","data","sliceData","copy","packing","pad","inner","top","left","right","bottom","descendants","filter","pt","level","indexOf","id","x0","x1","y0","y1","reverse","getPtId","enter","append","classed","order","updateSlices","transition","each","sliceTop","select","setSliceCursor","hideOnRoot","hideOnLeaves","isTransitioning","_x0","_x1","_y0","_y1","_hoverX","Math","min","_hoverY","slicePath","ensureSingle","s","style","attrTween","pt2","interp","t","attr","call","eventDataKeys","transitionTime","CLICK_TRANSITION_TIME","transitionEasing","CLICK_TRANSITION_EASING","_transitioning","hovered","_text","getPtLabel","split","join","sliceTextGroup","sliceText","font","ensureUniformFontSize","determineTextFont","text","convertToTspans","textBB","bBox","node","transform","fontSize","size"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/treemap/draw_ancestors.js"],"sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar Lib = require('../../lib');\nvar Drawing = require('../../components/drawing');\nvar svgTextUtils = require('../../lib/svg_text_utils');\n\nvar partition = require('./partition');\nvar styleOne = require('./style').styleOne;\nvar constants = require('./constants');\nvar helpers = require('../sunburst/helpers');\nvar attachFxHandlers = require('../sunburst/fx');\n\nvar onPathbar = true; // for Ancestors\n\nmodule.exports = function drawAncestors(gd, cd, entry, slices, opts) {\n    var barDifY = opts.barDifY;\n    var width = opts.width;\n    var height = opts.height;\n    var viewX = opts.viewX;\n    var viewY = opts.viewY;\n    var pathSlice = opts.pathSlice;\n    var toMoveInsideSlice = opts.toMoveInsideSlice;\n    var strTransform = opts.strTransform;\n    var hasTransition = opts.hasTransition;\n    var handleSlicesExit = opts.handleSlicesExit;\n    var makeUpdateSliceInterpolator = opts.makeUpdateSliceInterpolator;\n    var makeUpdateTextInterpolator = opts.makeUpdateTextInterpolator;\n    var refRect = {};\n\n    var isStatic = gd._context.staticPlot;\n\n    var fullLayout = gd._fullLayout;\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    var hierarchy = cd0.hierarchy;\n\n    var eachWidth = width / trace._entryDepth;\n\n    var pathIds = helpers.listPath(entry.data, 'id');\n\n    var sliceData = partition(hierarchy.copy(), [width, height], {\n        packing: 'dice',\n        pad: {\n            inner: 0,\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0\n        }\n    }).descendants();\n\n    // edit slices that show up on graph\n    sliceData = sliceData.filter(function(pt) {\n        var level = pathIds.indexOf(pt.data.id);\n        if(level === -1) return false;\n\n        pt.x0 = eachWidth * level;\n        pt.x1 = eachWidth * (level + 1);\n        pt.y0 = barDifY;\n        pt.y1 = barDifY + height;\n\n        pt.onPathbar = true;\n\n        return true;\n    });\n\n    sliceData.reverse();\n\n    slices = slices.data(sliceData, helpers.getPtId);\n\n    slices.enter().append('g')\n        .classed('pathbar', true);\n\n    handleSlicesExit(slices, onPathbar, refRect, [width, height], pathSlice);\n\n    slices.order();\n\n    var updateSlices = slices;\n    if(hasTransition) {\n        updateSlices = updateSlices.transition().each('end', function() {\n            // N.B. gd._transitioning is (still) *true* by the time\n            // transition updates get here\n            var sliceTop = d3.select(this);\n            helpers.setSliceCursor(sliceTop, gd, {\n                hideOnRoot: false,\n                hideOnLeaves: false,\n                isTransitioning: false\n            });\n        });\n    }\n\n    updateSlices.each(function(pt) {\n        // for bbox\n        pt._x0 = viewX(pt.x0);\n        pt._x1 = viewX(pt.x1);\n        pt._y0 = viewY(pt.y0);\n        pt._y1 = viewY(pt.y1);\n\n        pt._hoverX = viewX(pt.x1 - Math.min(width, height) / 2);\n        pt._hoverY = viewY(pt.y1 - height / 2);\n\n        var sliceTop = d3.select(this);\n\n        var slicePath = Lib.ensureSingle(sliceTop, 'path', 'surface', function(s) {\n            s.style('pointer-events', isStatic ? 'none' : 'all');\n        });\n\n        if(hasTransition) {\n            slicePath.transition().attrTween('d', function(pt2) {\n                var interp = makeUpdateSliceInterpolator(pt2, onPathbar, refRect, [width, height]);\n                return function(t) { return pathSlice(interp(t)); };\n            });\n        } else {\n            slicePath.attr('d', pathSlice);\n        }\n\n        sliceTop\n            .call(attachFxHandlers, entry, gd, cd, {\n                styleOne: styleOne,\n                eventDataKeys: constants.eventDataKeys,\n                transitionTime: constants.CLICK_TRANSITION_TIME,\n                transitionEasing: constants.CLICK_TRANSITION_EASING\n            })\n            .call(helpers.setSliceCursor, gd, {\n                hideOnRoot: false,\n                hideOnLeaves: false,\n                isTransitioning: gd._transitioning\n            });\n\n        slicePath.call(styleOne, pt, trace, gd, {\n            hovered: false\n        });\n\n        pt._text = (helpers.getPtLabel(pt) || '').split('<br>').join(' ') || '';\n\n        var sliceTextGroup = Lib.ensureSingle(sliceTop, 'g', 'slicetext');\n        var sliceText = Lib.ensureSingle(sliceTextGroup, 'text', '', function(s) {\n            // prohibit tex interpretation until we can handle\n            // tex and regular text together\n            s.attr('data-notex', 1);\n        });\n\n        var font = Lib.ensureUniformFontSize(gd, helpers.determineTextFont(trace, pt, fullLayout.font, {\n            onPathbar: true\n        }));\n\n        sliceText.text(pt._text || ' ') // use one space character instead of a blank string to avoid jumps during transition\n            .classed('slicetext', true)\n            .attr('text-anchor', 'start')\n            .call(Drawing.font, font)\n            .call(svgTextUtils.convertToTspans, gd);\n\n        pt.textBB = Drawing.bBox(sliceText.node());\n        pt.transform = toMoveInsideSlice(pt, {\n            fontSize: font.size,\n            onPathbar: true\n        });\n        pt.transform.fontSize = font.size;\n\n        if(hasTransition) {\n            sliceText.transition().attrTween('transform', function(pt2) {\n                var interp = makeUpdateTextInterpolator(pt2, onPathbar, refRect, [width, height]);\n                return function(t) { return strTransform(interp(t)); };\n            });\n        } else {\n            sliceText.attr('transform', strTransform(pt));\n        }\n    });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}