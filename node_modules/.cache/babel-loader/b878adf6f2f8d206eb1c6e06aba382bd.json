{"ast":null,"code":"'use strict';\n\n/*\n * make a regex for matching counter ids/names ie xaxis, xaxis2, xaxis10...\n *\n * @param {string} head: the head of the pattern, eg 'x' matches 'x', 'x2', 'x10' etc.\n *      'xy' is a special case for cartesian subplots: it matches 'x2y3' etc\n * @param {Optional(string)} tail: a fixed piece after the id\n *      eg counterRegex('scene', '.annotations') for scene2.annotations etc.\n * @param {boolean} openEnded: if true, the string may continue past the match.\n * @param {boolean} matchBeginning: if false, the string may start before the match.\n */\nexports.counter = function (head, tail, openEnded, matchBeginning) {\n  var fullTail = (tail || '') + (openEnded ? '' : '$');\n  var startWithPrefix = matchBeginning === false ? '' : '^';\n  if (head === 'xy') {\n    return new RegExp(startWithPrefix + 'x([2-9]|[1-9][0-9]+)?y([2-9]|[1-9][0-9]+)?' + fullTail);\n  }\n  return new RegExp(startWithPrefix + head + '([2-9]|[1-9][0-9]+)?' + fullTail);\n};","map":{"version":3,"names":["exports","counter","head","tail","openEnded","matchBeginning","fullTail","startWithPrefix","RegExp"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/lib/regex.js"],"sourcesContent":["'use strict';\n\n/*\n * make a regex for matching counter ids/names ie xaxis, xaxis2, xaxis10...\n *\n * @param {string} head: the head of the pattern, eg 'x' matches 'x', 'x2', 'x10' etc.\n *      'xy' is a special case for cartesian subplots: it matches 'x2y3' etc\n * @param {Optional(string)} tail: a fixed piece after the id\n *      eg counterRegex('scene', '.annotations') for scene2.annotations etc.\n * @param {boolean} openEnded: if true, the string may continue past the match.\n * @param {boolean} matchBeginning: if false, the string may start before the match.\n */\nexports.counter = function(head, tail, openEnded, matchBeginning) {\n    var fullTail = (tail || '') + (openEnded ? '' : '$');\n    var startWithPrefix = matchBeginning === false ? '' : '^';\n    if(head === 'xy') {\n        return new RegExp(startWithPrefix + 'x([2-9]|[1-9][0-9]+)?y([2-9]|[1-9][0-9]+)?' + fullTail);\n    }\n    return new RegExp(startWithPrefix + head + '([2-9]|[1-9][0-9]+)?' + fullTail);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,OAAO,CAACC,OAAO,GAAG,UAASC,IAAI,EAAEC,IAAI,EAAEC,SAAS,EAAEC,cAAc,EAAE;EAC9D,IAAIC,QAAQ,GAAG,CAACH,IAAI,IAAI,EAAE,KAAKC,SAAS,GAAG,EAAE,GAAG,GAAG,CAAC;EACpD,IAAIG,eAAe,GAAGF,cAAc,KAAK,KAAK,GAAG,EAAE,GAAG,GAAG;EACzD,IAAGH,IAAI,KAAK,IAAI,EAAE;IACd,OAAO,IAAIM,MAAM,CAACD,eAAe,GAAG,4CAA4C,GAAGD,QAAQ,CAAC;EAChG;EACA,OAAO,IAAIE,MAAM,CAACD,eAAe,GAAGL,IAAI,GAAG,sBAAsB,GAAGI,QAAQ,CAAC;AACjF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}