{"ast":null,"code":"'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar surfaceAttrs = require('../surface/attributes');\nvar baseAttrs = require('../../plots/attributes');\nvar extendFlat = require('../../lib/extend').extendFlat;\nmodule.exports = extendFlat({\n  x: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z`', 'jointly represent the X, Y and Z coordinates of the nth vertex.'].join(' ')\n  },\n  y: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z`', 'jointly represent the X, Y and Z coordinates of the nth vertex.'].join(' ')\n  },\n  z: {\n    valType: 'data_array',\n    editType: 'calc+clearAxisTypes',\n    description: ['Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z`', 'jointly represent the X, Y and Z coordinates of the nth vertex.'].join(' ')\n  },\n  i: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['A vector of vertex indices, i.e. integer values between 0 and the length of the vertex', 'vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}`', 'together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet', '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a', 'point in space, which is the first vertex of a triangle.'].join(' ')\n  },\n  j: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['A vector of vertex indices, i.e. integer values between 0 and the length of the vertex', 'vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}` ', 'together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet', '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a', 'point in space, which is the second vertex of a triangle.'].join(' ')\n  },\n  k: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['A vector of vertex indices, i.e. integer values between 0 and the length of the vertex', 'vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}`', 'together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet ', '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a', 'point in space, which is the third vertex of a triangle.'].join(' ')\n  },\n  text: {\n    valType: 'string',\n    dflt: '',\n    arrayOk: true,\n    editType: 'calc',\n    description: ['Sets the text elements associated with the vertices.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  },\n  hovertext: {\n    valType: 'string',\n    dflt: '',\n    arrayOk: true,\n    editType: 'calc',\n    description: 'Same as `text`.'\n  },\n  hovertemplate: hovertemplateAttrs({\n    editType: 'calc'\n  }),\n  xhoverformat: axisHoverFormat('x'),\n  yhoverformat: axisHoverFormat('y'),\n  zhoverformat: axisHoverFormat('z'),\n  delaunayaxis: {\n    valType: 'enumerated',\n    values: ['x', 'y', 'z'],\n    dflt: 'z',\n    editType: 'calc',\n    description: ['Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the', 'Delaunay triangulation.', 'It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate', 'Delaunay triangulation.'].join(' ')\n  },\n  alphahull: {\n    valType: 'number',\n    dflt: -1,\n    editType: 'calc',\n    description: ['Determines how the mesh surface triangles are derived from the set of', 'vertices (points) represented by the `x`, `y` and `z` arrays, if', 'the `i`, `j`, `k` arrays are not supplied.', 'For general use of `mesh3d` it is preferred that `i`, `j`, `k` are', 'supplied.', 'If *-1*, Delaunay triangulation is used, which is mainly suitable if the', 'mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`.', 'In case the `delaunayaxis` intersects the mesh surface at more than one point', 'it will result triangles that are very long in the dimension of `delaunayaxis`.', 'If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value', 'signals the use of the alpha-shape algorithm, _and_ its value', 'acts as the parameter for the mesh fitting.', 'If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies', 'or if the intention is to enclose the `x`, `y` and `z` point set into a convex', 'hull.'].join(' ')\n  },\n  intensity: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the intensity values for vertices or cells', 'as defined by `intensitymode`.', 'It can be used for plotting fields on meshes.'].join(' ')\n  },\n  intensitymode: {\n    valType: 'enumerated',\n    values: ['vertex', 'cell'],\n    dflt: 'vertex',\n    editType: 'calc',\n    description: ['Determines the source of `intensity` values.'].join(' ')\n  },\n  // Color field\n  color: {\n    valType: 'color',\n    editType: 'calc',\n    description: 'Sets the color of the whole mesh'\n  },\n  vertexcolor: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the color of each vertex', 'Overrides *color*. While Red, green and blue colors', 'are in the range of 0 and 255; in the case of having', 'vertex color data in RGBA format, the alpha color', 'should be normalized to be between 0 and 1.'].join(' ')\n  },\n  facecolor: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the color of each face', 'Overrides *color* and *vertexcolor*.'].join(' ')\n  },\n  transforms: undefined\n}, colorScaleAttrs('', {\n  colorAttr: '`intensity`',\n  showScaleDflt: true,\n  editTypeOverride: 'calc'\n}), {\n  opacity: surfaceAttrs.opacity,\n  // Flat shaded mode\n  flatshading: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'calc',\n    description: ['Determines whether or not normal smoothing is applied to the meshes,', 'creating meshes with an angular, low-poly look via flat reflections.'].join(' ')\n  },\n  contour: {\n    show: extendFlat({}, surfaceAttrs.contours.x.show, {\n      description: ['Sets whether or not dynamic contours are shown on hover'].join(' ')\n    }),\n    color: surfaceAttrs.contours.x.color,\n    width: surfaceAttrs.contours.x.width,\n    editType: 'calc'\n  },\n  lightposition: {\n    x: extendFlat({}, surfaceAttrs.lightposition.x, {\n      dflt: 1e5\n    }),\n    y: extendFlat({}, surfaceAttrs.lightposition.y, {\n      dflt: 1e5\n    }),\n    z: extendFlat({}, surfaceAttrs.lightposition.z, {\n      dflt: 0\n    }),\n    editType: 'calc'\n  },\n  lighting: extendFlat({\n    vertexnormalsepsilon: {\n      valType: 'number',\n      min: 0.00,\n      max: 1,\n      dflt: 1e-12,\n      // otherwise finely tessellated things eg. the brain will have no specular light reflection\n      editType: 'calc',\n      description: 'Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.'\n    },\n    facenormalsepsilon: {\n      valType: 'number',\n      min: 0.00,\n      max: 1,\n      dflt: 1e-6,\n      // even the brain model doesn't appear to need finer than this\n      editType: 'calc',\n      description: 'Epsilon for face normals calculation avoids math issues arising from degenerate geometry.'\n    },\n    editType: 'calc'\n  }, surfaceAttrs.lighting),\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    editType: 'calc'\n  }),\n  showlegend: extendFlat({}, baseAttrs.showlegend, {\n    dflt: false\n  })\n});","map":{"version":3,"names":["colorScaleAttrs","require","axisHoverFormat","hovertemplateAttrs","surfaceAttrs","baseAttrs","extendFlat","module","exports","x","valType","editType","description","join","y","z","i","j","k","text","dflt","arrayOk","hovertext","hovertemplate","xhoverformat","yhoverformat","zhoverformat","delaunayaxis","values","alphahull","intensity","intensitymode","color","vertexcolor","facecolor","transforms","undefined","colorAttr","showScaleDflt","editTypeOverride","opacity","flatshading","contour","show","contours","width","lightposition","lighting","vertexnormalsepsilon","min","max","facenormalsepsilon","hoverinfo","showlegend"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/mesh3d/attributes.js"],"sourcesContent":["'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar axisHoverFormat = require('../../plots/cartesian/axis_format_attributes').axisHoverFormat;\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar surfaceAttrs = require('../surface/attributes');\nvar baseAttrs = require('../../plots/attributes');\n\nvar extendFlat = require('../../lib/extend').extendFlat;\n\nmodule.exports = extendFlat({\n    x: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z`',\n            'jointly represent the X, Y and Z coordinates of the nth vertex.'\n        ].join(' ')\n    },\n    y: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z`',\n            'jointly represent the X, Y and Z coordinates of the nth vertex.'\n        ].join(' ')\n    },\n    z: {\n        valType: 'data_array',\n        editType: 'calc+clearAxisTypes',\n        description: [\n            'Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z`',\n            'jointly represent the X, Y and Z coordinates of the nth vertex.'\n        ].join(' ')\n    },\n\n    i: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'A vector of vertex indices, i.e. integer values between 0 and the length of the vertex',\n            'vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}`',\n            'together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet',\n            '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a',\n            'point in space, which is the first vertex of a triangle.'\n        ].join(' ')\n    },\n    j: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'A vector of vertex indices, i.e. integer values between 0 and the length of the vertex',\n            'vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}` ',\n            'together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet',\n            '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a',\n            'point in space, which is the second vertex of a triangle.'\n        ].join(' ')\n\n    },\n    k: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'A vector of vertex indices, i.e. integer values between 0 and the length of the vertex',\n            'vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}`',\n            'together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet ',\n            '`{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a',\n            'point in space, which is the third vertex of a triangle.'\n        ].join(' ')\n\n    },\n\n    text: {\n        valType: 'string',\n        dflt: '',\n        arrayOk: true,\n        editType: 'calc',\n        description: [\n            'Sets the text elements associated with the vertices.',\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\n            'these elements will be seen in the hover labels.'\n        ].join(' ')\n    },\n    hovertext: {\n        valType: 'string',\n        dflt: '',\n        arrayOk: true,\n        editType: 'calc',\n        description: 'Same as `text`.'\n    },\n    hovertemplate: hovertemplateAttrs({editType: 'calc'}),\n\n    xhoverformat: axisHoverFormat('x'),\n    yhoverformat: axisHoverFormat('y'),\n    zhoverformat: axisHoverFormat('z'),\n\n    delaunayaxis: {\n        valType: 'enumerated',\n        values: [ 'x', 'y', 'z' ],\n        dflt: 'z',\n        editType: 'calc',\n        description: [\n            'Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the',\n            'Delaunay triangulation.',\n            'It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate',\n            'Delaunay triangulation.'\n        ].join(' ')\n    },\n\n    alphahull: {\n        valType: 'number',\n        dflt: -1,\n        editType: 'calc',\n        description: [\n            'Determines how the mesh surface triangles are derived from the set of',\n            'vertices (points) represented by the `x`, `y` and `z` arrays, if',\n            'the `i`, `j`, `k` arrays are not supplied.',\n            'For general use of `mesh3d` it is preferred that `i`, `j`, `k` are',\n            'supplied.',\n\n            'If *-1*, Delaunay triangulation is used, which is mainly suitable if the',\n            'mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`.',\n            'In case the `delaunayaxis` intersects the mesh surface at more than one point',\n            'it will result triangles that are very long in the dimension of `delaunayaxis`.',\n\n            'If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value',\n            'signals the use of the alpha-shape algorithm, _and_ its value',\n            'acts as the parameter for the mesh fitting.',\n\n            'If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies',\n            'or if the intention is to enclose the `x`, `y` and `z` point set into a convex',\n            'hull.'\n        ].join(' ')\n    },\n\n    intensity: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the intensity values for vertices or cells',\n            'as defined by `intensitymode`.',\n            'It can be used for plotting fields on meshes.'\n        ].join(' ')\n    },\n    intensitymode: {\n        valType: 'enumerated',\n        values: ['vertex', 'cell'],\n        dflt: 'vertex',\n        editType: 'calc',\n        description: [\n            'Determines the source of `intensity` values.'\n        ].join(' ')\n    },\n\n    // Color field\n    color: {\n        valType: 'color',\n        editType: 'calc',\n        description: 'Sets the color of the whole mesh'\n    },\n    vertexcolor: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the color of each vertex',\n            'Overrides *color*. While Red, green and blue colors',\n            'are in the range of 0 and 255; in the case of having',\n            'vertex color data in RGBA format, the alpha color',\n            'should be normalized to be between 0 and 1.'\n        ].join(' ')\n    },\n    facecolor: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the color of each face',\n            'Overrides *color* and *vertexcolor*.'\n        ].join(' ')\n    },\n    transforms: undefined\n},\n\ncolorScaleAttrs('', {\n    colorAttr: '`intensity`',\n    showScaleDflt: true,\n    editTypeOverride: 'calc'\n}), {\n    opacity: surfaceAttrs.opacity,\n\n    // Flat shaded mode\n    flatshading: {\n        valType: 'boolean',\n        dflt: false,\n        editType: 'calc',\n        description: [\n            'Determines whether or not normal smoothing is applied to the meshes,',\n            'creating meshes with an angular, low-poly look via flat reflections.'\n        ].join(' ')\n    },\n\n    contour: {\n        show: extendFlat({}, surfaceAttrs.contours.x.show, {\n            description: [\n                'Sets whether or not dynamic contours are shown on hover'\n            ].join(' ')\n        }),\n        color: surfaceAttrs.contours.x.color,\n        width: surfaceAttrs.contours.x.width,\n        editType: 'calc'\n    },\n\n    lightposition: {\n        x: extendFlat({}, surfaceAttrs.lightposition.x, {dflt: 1e5}),\n        y: extendFlat({}, surfaceAttrs.lightposition.y, {dflt: 1e5}),\n        z: extendFlat({}, surfaceAttrs.lightposition.z, {dflt: 0}),\n        editType: 'calc'\n    },\n    lighting: extendFlat({\n        vertexnormalsepsilon: {\n            valType: 'number',\n            min: 0.00,\n            max: 1,\n            dflt: 1e-12, // otherwise finely tessellated things eg. the brain will have no specular light reflection\n            editType: 'calc',\n            description: 'Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.'\n        },\n        facenormalsepsilon: {\n            valType: 'number',\n            min: 0.00,\n            max: 1,\n            dflt: 1e-6, // even the brain model doesn't appear to need finer than this\n            editType: 'calc',\n            description: 'Epsilon for face normals calculation avoids math issues arising from degenerate geometry.'\n        },\n        editType: 'calc'\n    }, surfaceAttrs.lighting),\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {editType: 'calc'}),\n    showlegend: extendFlat({}, baseAttrs.showlegend, {dflt: false})\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}