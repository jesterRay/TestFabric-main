{"ast":null,"code":"'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar Lib = require('../../lib');\nmodule.exports = function setContours(trace, vals) {\n  var contours = trace.contours;\n\n  // check if we need to auto-choose contour levels\n  if (trace.autocontour) {\n    // N.B. do not try to use coloraxis cmin/cmax,\n    // these values here are meant to remain \"per-trace\" for now\n    var zmin = trace.zmin;\n    var zmax = trace.zmax;\n    if (trace.zauto || zmin === undefined) {\n      zmin = Lib.aggNums(Math.min, null, vals);\n    }\n    if (trace.zauto || zmax === undefined) {\n      zmax = Lib.aggNums(Math.max, null, vals);\n    }\n    var dummyAx = autoContours(zmin, zmax, trace.ncontours);\n    contours.size = dummyAx.dtick;\n    contours.start = Axes.tickFirst(dummyAx);\n    dummyAx.range.reverse();\n    contours.end = Axes.tickFirst(dummyAx);\n    if (contours.start === zmin) contours.start += contours.size;\n    if (contours.end === zmax) contours.end -= contours.size;\n\n    // if you set a small ncontours, *and* the ends are exactly on zmin/zmax\n    // there's an edge case where start > end now. Make sure there's at least\n    // one meaningful contour, put it midway between the crossed values\n    if (contours.start > contours.end) {\n      contours.start = contours.end = (contours.start + contours.end) / 2;\n    }\n\n    // copy auto-contour info back to the source data.\n    // previously we copied the whole contours object back, but that had\n    // other info (coloring, showlines) that should be left to supplyDefaults\n    if (!trace._input.contours) trace._input.contours = {};\n    Lib.extendFlat(trace._input.contours, {\n      start: contours.start,\n      end: contours.end,\n      size: contours.size\n    });\n    trace._input.autocontour = true;\n  } else if (contours.type !== 'constraint') {\n    // sanity checks on manually-supplied start/end/size\n    var start = contours.start;\n    var end = contours.end;\n    var inputContours = trace._input.contours;\n    if (start > end) {\n      contours.start = inputContours.start = end;\n      end = contours.end = inputContours.end = start;\n      start = contours.start;\n    }\n    if (!(contours.size > 0)) {\n      var sizeOut;\n      if (start === end) sizeOut = 1;else sizeOut = autoContours(start, end, trace.ncontours).dtick;\n      inputContours.size = contours.size = sizeOut;\n    }\n  }\n};\n\n/*\n * autoContours: make a dummy axis object with dtick we can use\n * as contours.size, and if needed we can use Axes.tickFirst\n * with this axis object to calculate the start and end too\n *\n * start: the value to start the contours at\n * end: the value to end at (must be > start)\n * ncontours: max number of contours to make, like roughDTick\n *\n * returns: an axis object\n */\nfunction autoContours(start, end, ncontours) {\n  var dummyAx = {\n    type: 'linear',\n    range: [start, end]\n  };\n  Axes.autoTicks(dummyAx, (end - start) / (ncontours || 15));\n  return dummyAx;\n}","map":{"version":3,"names":["Axes","require","Lib","module","exports","setContours","trace","vals","contours","autocontour","zmin","zmax","zauto","undefined","aggNums","Math","min","max","dummyAx","autoContours","ncontours","size","dtick","start","tickFirst","range","reverse","end","_input","extendFlat","type","inputContours","sizeOut","autoTicks"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/contour/set_contours.js"],"sourcesContent":["'use strict';\n\nvar Axes = require('../../plots/cartesian/axes');\nvar Lib = require('../../lib');\n\nmodule.exports = function setContours(trace, vals) {\n    var contours = trace.contours;\n\n    // check if we need to auto-choose contour levels\n    if(trace.autocontour) {\n        // N.B. do not try to use coloraxis cmin/cmax,\n        // these values here are meant to remain \"per-trace\" for now\n        var zmin = trace.zmin;\n        var zmax = trace.zmax;\n        if(trace.zauto || zmin === undefined) {\n            zmin = Lib.aggNums(Math.min, null, vals);\n        }\n        if(trace.zauto || zmax === undefined) {\n            zmax = Lib.aggNums(Math.max, null, vals);\n        }\n\n        var dummyAx = autoContours(zmin, zmax, trace.ncontours);\n        contours.size = dummyAx.dtick;\n        contours.start = Axes.tickFirst(dummyAx);\n        dummyAx.range.reverse();\n        contours.end = Axes.tickFirst(dummyAx);\n\n        if(contours.start === zmin) contours.start += contours.size;\n        if(contours.end === zmax) contours.end -= contours.size;\n\n        // if you set a small ncontours, *and* the ends are exactly on zmin/zmax\n        // there's an edge case where start > end now. Make sure there's at least\n        // one meaningful contour, put it midway between the crossed values\n        if(contours.start > contours.end) {\n            contours.start = contours.end = (contours.start + contours.end) / 2;\n        }\n\n        // copy auto-contour info back to the source data.\n        // previously we copied the whole contours object back, but that had\n        // other info (coloring, showlines) that should be left to supplyDefaults\n        if(!trace._input.contours) trace._input.contours = {};\n        Lib.extendFlat(trace._input.contours, {\n            start: contours.start,\n            end: contours.end,\n            size: contours.size\n        });\n        trace._input.autocontour = true;\n    } else if(contours.type !== 'constraint') {\n        // sanity checks on manually-supplied start/end/size\n        var start = contours.start;\n        var end = contours.end;\n        var inputContours = trace._input.contours;\n\n        if(start > end) {\n            contours.start = inputContours.start = end;\n            end = contours.end = inputContours.end = start;\n            start = contours.start;\n        }\n\n        if(!(contours.size > 0)) {\n            var sizeOut;\n            if(start === end) sizeOut = 1;\n            else sizeOut = autoContours(start, end, trace.ncontours).dtick;\n\n            inputContours.size = contours.size = sizeOut;\n        }\n    }\n};\n\n\n/*\n * autoContours: make a dummy axis object with dtick we can use\n * as contours.size, and if needed we can use Axes.tickFirst\n * with this axis object to calculate the start and end too\n *\n * start: the value to start the contours at\n * end: the value to end at (must be > start)\n * ncontours: max number of contours to make, like roughDTick\n *\n * returns: an axis object\n */\nfunction autoContours(start, end, ncontours) {\n    var dummyAx = {\n        type: 'linear',\n        range: [start, end]\n    };\n\n    Axes.autoTicks(\n        dummyAx,\n        (end - start) / (ncontours || 15)\n    );\n\n    return dummyAx;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}