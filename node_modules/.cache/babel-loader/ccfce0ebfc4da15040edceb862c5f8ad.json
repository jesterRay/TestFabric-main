{"ast":null,"code":"'use strict';\n\nvar readPaths = require('../shapes/draw_newshape/helpers').readPaths;\nvar displayOutlines = require('../shapes/display_outlines');\nvar clearOutlineControllers = require('../shapes/handle_outline').clearOutlineControllers;\nvar Color = require('../color');\nvar Drawing = require('../drawing');\nvar arrayEditor = require('../../plot_api/plot_template').arrayEditor;\nvar helpers = require('../shapes/helpers');\nvar getPathString = helpers.getPathString;\n\n// Selections are stored in gd.layout.selections, an array of objects\n// index can point to one item in this array,\n//  or non-numeric to simply add a new one\n//  or -1 to modify all existing\n// opt can be the full options object, or one key (to be set to value)\n//  or undefined to simply redraw\n// if opt is blank, val can be 'add' or a full options object to add a new\n//  annotation at that point in the array, or 'remove' to delete this one\n\nmodule.exports = {\n  draw: draw,\n  drawOne: drawOne,\n  activateLastSelection: activateLastSelection\n};\nfunction draw(gd) {\n  var fullLayout = gd._fullLayout;\n  clearOutlineControllers(gd);\n\n  // Remove previous selections before drawing new selections in fullLayout.selections\n  fullLayout._selectionLayer.selectAll('path').remove();\n  for (var k in fullLayout._plots) {\n    var selectionLayer = fullLayout._plots[k].selectionLayer;\n    if (selectionLayer) selectionLayer.selectAll('path').remove();\n  }\n  for (var i = 0; i < fullLayout.selections.length; i++) {\n    drawOne(gd, i);\n  }\n}\nfunction couldHaveActiveSelection(gd) {\n  return gd._context.editSelection;\n}\nfunction drawOne(gd, index) {\n  // remove the existing selection if there is one.\n  // because indices can change, we need to look in all selection layers\n  gd._fullLayout._paperdiv.selectAll('.selectionlayer [data-index=\"' + index + '\"]').remove();\n  var o = helpers.makeSelectionsOptionsAndPlotinfo(gd, index);\n  var options = o.options;\n  var plotinfo = o.plotinfo;\n\n  // this selection is gone - quit now after deleting it\n  // TODO: use d3 idioms instead of deleting and redrawing every time\n  if (!options._input) return;\n  drawSelection(gd._fullLayout._selectionLayer);\n  function drawSelection(selectionLayer) {\n    var d = getPathString(gd, options);\n    var attrs = {\n      'data-index': index,\n      'fill-rule': 'evenodd',\n      d: d\n    };\n    var opacity = options.opacity;\n    var fillColor = 'rgba(0,0,0,0)';\n    var lineColor = options.line.color || Color.contrast(gd._fullLayout.plot_bgcolor);\n    var lineWidth = options.line.width;\n    var lineDash = options.line.dash;\n    if (!lineWidth) {\n      // ensure invisible border to activate the selection\n      lineWidth = 5;\n      lineDash = 'solid';\n    }\n    var isActiveSelection = couldHaveActiveSelection(gd) && gd._fullLayout._activeSelectionIndex === index;\n    if (isActiveSelection) {\n      fillColor = gd._fullLayout.activeselection.fillcolor;\n      opacity = gd._fullLayout.activeselection.opacity;\n    }\n    var allPaths = [];\n    for (var sensory = 1; sensory >= 0; sensory--) {\n      var path = selectionLayer.append('path').attr(attrs).style('opacity', sensory ? 0.1 : opacity).call(Color.stroke, lineColor).call(Color.fill, fillColor)\n      // make it easier to select senory background path\n      .call(Drawing.dashLine, sensory ? 'solid' : lineDash, sensory ? 4 + lineWidth : lineWidth);\n      setClipPath(path, gd, options);\n      if (isActiveSelection) {\n        var editHelpers = arrayEditor(gd.layout, 'selections', options);\n        path.style({\n          cursor: 'move'\n        });\n        var dragOptions = {\n          element: path.node(),\n          plotinfo: plotinfo,\n          gd: gd,\n          editHelpers: editHelpers,\n          isActiveSelection: true // i.e. to enable controllers\n        };\n        var polygons = readPaths(d, gd);\n        // display polygons on the screen\n        displayOutlines(polygons, path, dragOptions);\n      } else {\n        path.style('pointer-events', sensory ? 'all' : 'none');\n      }\n      allPaths[sensory] = path;\n    }\n    var forePath = allPaths[0];\n    var backPath = allPaths[1];\n    backPath.node().addEventListener('click', function () {\n      return activateSelection(gd, forePath);\n    });\n  }\n}\nfunction setClipPath(selectionPath, gd, selectionOptions) {\n  var clipAxes = selectionOptions.xref + selectionOptions.yref;\n  Drawing.setClipUrl(selectionPath, 'clip' + gd._fullLayout._uid + clipAxes, gd);\n}\nfunction activateSelection(gd, path) {\n  if (!couldHaveActiveSelection(gd)) return;\n  var element = path.node();\n  var id = +element.getAttribute('data-index');\n  if (id >= 0) {\n    // deactivate if already active\n    if (id === gd._fullLayout._activeSelectionIndex) {\n      deactivateSelection(gd);\n      return;\n    }\n    gd._fullLayout._activeSelectionIndex = id;\n    gd._fullLayout._deactivateSelection = deactivateSelection;\n    draw(gd);\n  }\n}\nfunction activateLastSelection(gd) {\n  if (!couldHaveActiveSelection(gd)) return;\n  var id = gd._fullLayout.selections.length - 1;\n  gd._fullLayout._activeSelectionIndex = id;\n  gd._fullLayout._deactivateSelection = deactivateSelection;\n  draw(gd);\n}\nfunction deactivateSelection(gd) {\n  if (!couldHaveActiveSelection(gd)) return;\n  var id = gd._fullLayout._activeSelectionIndex;\n  if (id >= 0) {\n    clearOutlineControllers(gd);\n    delete gd._fullLayout._activeSelectionIndex;\n    draw(gd);\n  }\n}","map":{"version":3,"names":["readPaths","require","displayOutlines","clearOutlineControllers","Color","Drawing","arrayEditor","helpers","getPathString","module","exports","draw","drawOne","activateLastSelection","gd","fullLayout","_fullLayout","_selectionLayer","selectAll","remove","k","_plots","selectionLayer","i","selections","length","couldHaveActiveSelection","_context","editSelection","index","_paperdiv","o","makeSelectionsOptionsAndPlotinfo","options","plotinfo","_input","drawSelection","d","attrs","opacity","fillColor","lineColor","line","color","contrast","plot_bgcolor","lineWidth","width","lineDash","dash","isActiveSelection","_activeSelectionIndex","activeselection","fillcolor","allPaths","sensory","path","append","attr","style","call","stroke","fill","dashLine","setClipPath","editHelpers","layout","cursor","dragOptions","element","node","polygons","forePath","backPath","addEventListener","activateSelection","selectionPath","selectionOptions","clipAxes","xref","yref","setClipUrl","_uid","id","getAttribute","deactivateSelection","_deactivateSelection"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/components/selections/draw.js"],"sourcesContent":["'use strict';\n\nvar readPaths = require('../shapes/draw_newshape/helpers').readPaths;\nvar displayOutlines = require('../shapes/display_outlines');\n\nvar clearOutlineControllers = require('../shapes/handle_outline').clearOutlineControllers;\n\nvar Color = require('../color');\nvar Drawing = require('../drawing');\nvar arrayEditor = require('../../plot_api/plot_template').arrayEditor;\n\nvar helpers = require('../shapes/helpers');\nvar getPathString = helpers.getPathString;\n\n\n// Selections are stored in gd.layout.selections, an array of objects\n// index can point to one item in this array,\n//  or non-numeric to simply add a new one\n//  or -1 to modify all existing\n// opt can be the full options object, or one key (to be set to value)\n//  or undefined to simply redraw\n// if opt is blank, val can be 'add' or a full options object to add a new\n//  annotation at that point in the array, or 'remove' to delete this one\n\nmodule.exports = {\n    draw: draw,\n    drawOne: drawOne,\n    activateLastSelection: activateLastSelection\n};\n\nfunction draw(gd) {\n    var fullLayout = gd._fullLayout;\n\n    clearOutlineControllers(gd);\n\n    // Remove previous selections before drawing new selections in fullLayout.selections\n    fullLayout._selectionLayer.selectAll('path').remove();\n\n    for(var k in fullLayout._plots) {\n        var selectionLayer = fullLayout._plots[k].selectionLayer;\n        if(selectionLayer) selectionLayer.selectAll('path').remove();\n    }\n\n    for(var i = 0; i < fullLayout.selections.length; i++) {\n        drawOne(gd, i);\n    }\n}\n\nfunction couldHaveActiveSelection(gd) {\n    return gd._context.editSelection;\n}\n\nfunction drawOne(gd, index) {\n    // remove the existing selection if there is one.\n    // because indices can change, we need to look in all selection layers\n    gd._fullLayout._paperdiv\n        .selectAll('.selectionlayer [data-index=\"' + index + '\"]')\n        .remove();\n\n    var o = helpers.makeSelectionsOptionsAndPlotinfo(gd, index);\n    var options = o.options;\n    var plotinfo = o.plotinfo;\n\n    // this selection is gone - quit now after deleting it\n    // TODO: use d3 idioms instead of deleting and redrawing every time\n    if(!options._input) return;\n\n    drawSelection(gd._fullLayout._selectionLayer);\n\n    function drawSelection(selectionLayer) {\n        var d = getPathString(gd, options);\n        var attrs = {\n            'data-index': index,\n            'fill-rule': 'evenodd',\n            d: d\n        };\n\n        var opacity = options.opacity;\n        var fillColor = 'rgba(0,0,0,0)';\n        var lineColor = options.line.color || Color.contrast(gd._fullLayout.plot_bgcolor);\n        var lineWidth = options.line.width;\n        var lineDash = options.line.dash;\n        if(!lineWidth) {\n            // ensure invisible border to activate the selection\n            lineWidth = 5;\n            lineDash = 'solid';\n        }\n\n        var isActiveSelection = couldHaveActiveSelection(gd) &&\n            gd._fullLayout._activeSelectionIndex === index;\n\n        if(isActiveSelection) {\n            fillColor = gd._fullLayout.activeselection.fillcolor;\n            opacity = gd._fullLayout.activeselection.opacity;\n        }\n\n        var allPaths = [];\n        for(var sensory = 1; sensory >= 0; sensory--) {\n            var path = selectionLayer.append('path')\n                .attr(attrs)\n                .style('opacity', sensory ? 0.1 : opacity)\n                .call(Color.stroke, lineColor)\n                .call(Color.fill, fillColor)\n                // make it easier to select senory background path\n                .call(Drawing.dashLine,\n                    sensory ? 'solid' : lineDash,\n                    sensory ? 4 + lineWidth : lineWidth\n                );\n\n            setClipPath(path, gd, options);\n\n            if(isActiveSelection) {\n                var editHelpers = arrayEditor(gd.layout, 'selections', options);\n\n                path.style({\n                    cursor: 'move',\n                });\n\n                var dragOptions = {\n                    element: path.node(),\n                    plotinfo: plotinfo,\n                    gd: gd,\n                    editHelpers: editHelpers,\n                    isActiveSelection: true // i.e. to enable controllers\n                };\n\n                var polygons = readPaths(d, gd);\n                // display polygons on the screen\n                displayOutlines(polygons, path, dragOptions);\n            } else {\n                path.style('pointer-events', sensory ? 'all' : 'none');\n            }\n\n            allPaths[sensory] = path;\n        }\n\n        var forePath = allPaths[0];\n        var backPath = allPaths[1];\n\n        backPath.node().addEventListener('click', function() { return activateSelection(gd, forePath); });\n    }\n}\n\nfunction setClipPath(selectionPath, gd, selectionOptions) {\n    var clipAxes = selectionOptions.xref + selectionOptions.yref;\n\n    Drawing.setClipUrl(\n        selectionPath,\n        'clip' + gd._fullLayout._uid + clipAxes,\n        gd\n    );\n}\n\n\nfunction activateSelection(gd, path) {\n    if(!couldHaveActiveSelection(gd)) return;\n\n    var element = path.node();\n    var id = +element.getAttribute('data-index');\n    if(id >= 0) {\n        // deactivate if already active\n        if(id === gd._fullLayout._activeSelectionIndex) {\n            deactivateSelection(gd);\n            return;\n        }\n\n        gd._fullLayout._activeSelectionIndex = id;\n        gd._fullLayout._deactivateSelection = deactivateSelection;\n        draw(gd);\n    }\n}\n\nfunction activateLastSelection(gd) {\n    if(!couldHaveActiveSelection(gd)) return;\n\n    var id = gd._fullLayout.selections.length - 1;\n    gd._fullLayout._activeSelectionIndex = id;\n    gd._fullLayout._deactivateSelection = deactivateSelection;\n    draw(gd);\n}\n\nfunction deactivateSelection(gd) {\n    if(!couldHaveActiveSelection(gd)) return;\n\n    var id = gd._fullLayout._activeSelectionIndex;\n    if(id >= 0) {\n        clearOutlineControllers(gd);\n        delete gd._fullLayout._activeSelectionIndex;\n        draw(gd);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}