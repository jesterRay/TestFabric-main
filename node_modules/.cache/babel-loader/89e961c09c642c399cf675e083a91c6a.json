{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar Plots = require('../plots');\nvar Drawing = require('../../components/drawing');\nvar getModuleCalcData = require('../get_data').getModuleCalcData;\nvar axisIds = require('./axis_ids');\nvar constants = require('./constants');\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\nvar ensureSingle = Lib.ensureSingle;\nfunction ensureSingleAndAddDatum(parent, nodeType, className) {\n  return Lib.ensureSingle(parent, nodeType, className, function (s) {\n    s.datum(className);\n  });\n}\nvar zindexSeparator = constants.zindexSeparator;\nexports.name = 'cartesian';\nexports.attr = ['xaxis', 'yaxis'];\nexports.idRoot = ['x', 'y'];\nexports.idRegex = constants.idRegex;\nexports.attrRegex = constants.attrRegex;\nexports.attributes = require('./attributes');\nexports.layoutAttributes = require('./layout_attributes');\nexports.supplyLayoutDefaults = require('./layout_defaults');\nexports.transitionAxes = require('./transition_axes');\nexports.finalizeSubplots = function (layoutIn, layoutOut) {\n  var subplots = layoutOut._subplots;\n  var xList = subplots.xaxis;\n  var yList = subplots.yaxis;\n  var spSVG = subplots.cartesian;\n  var spAll = spSVG.concat(subplots.gl2d || []);\n  var allX = {};\n  var allY = {};\n  var i, xi, yi;\n  for (i = 0; i < spAll.length; i++) {\n    var parts = spAll[i].split('y');\n    allX[parts[0]] = 1;\n    allY['y' + parts[1]] = 1;\n  }\n\n  // check for x axes with no subplot, and make one from the anchor of that x axis\n  for (i = 0; i < xList.length; i++) {\n    xi = xList[i];\n    if (!allX[xi]) {\n      yi = (layoutIn[axisIds.id2name(xi)] || {}).anchor;\n      if (!constants.idRegex.y.test(yi)) yi = 'y';\n      spSVG.push(xi + yi);\n      spAll.push(xi + yi);\n      if (!allY[yi]) {\n        allY[yi] = 1;\n        Lib.pushUnique(yList, yi);\n      }\n    }\n  }\n\n  // same for y axes with no subplot\n  for (i = 0; i < yList.length; i++) {\n    yi = yList[i];\n    if (!allY[yi]) {\n      xi = (layoutIn[axisIds.id2name(yi)] || {}).anchor;\n      if (!constants.idRegex.x.test(xi)) xi = 'x';\n      spSVG.push(xi + yi);\n      spAll.push(xi + yi);\n      if (!allX[xi]) {\n        allX[xi] = 1;\n        Lib.pushUnique(xList, xi);\n      }\n    }\n  }\n\n  // finally, if we've gotten here we're supposed to show cartesian...\n  // so if there are NO subplots at all, make one from the first\n  // x & y axes in the input layout\n  if (!spAll.length) {\n    xi = '';\n    yi = '';\n    for (var ki in layoutIn) {\n      if (constants.attrRegex.test(ki)) {\n        var axLetter = ki.charAt(0);\n        if (axLetter === 'x') {\n          if (!xi || +ki.substr(5) < +xi.substr(5)) {\n            xi = ki;\n          }\n        } else if (!yi || +ki.substr(5) < +yi.substr(5)) {\n          yi = ki;\n        }\n      }\n    }\n    xi = xi ? axisIds.name2id(xi) : 'x';\n    yi = yi ? axisIds.name2id(yi) : 'y';\n    xList.push(xi);\n    yList.push(yi);\n    spSVG.push(xi + yi);\n  }\n};\n\n/**\n * Cartesian.plot\n *\n * @param {DOM div | object} gd\n * @param {array (optional)} traces\n *  array of traces indices to plot\n *  if undefined, plots all cartesian traces,\n * @param {object} (optional) transitionOpts\n *  transition option object\n * @param {function} (optional) makeOnCompleteCallback\n *  transition make callback function from Plots.transition\n */\nexports.plot = function (gd, traces, transitionOpts, makeOnCompleteCallback) {\n  var fullLayout = gd._fullLayout;\n  var subplots = fullLayout._subplots.cartesian;\n  var calcdata = gd.calcdata;\n  var i;\n\n  // Traces is a list of trace indices to (re)plot. If it's not provided,\n  // then it's a complete replot so we create a new list and add all trace indices\n  // which are in calcdata.\n\n  if (!Array.isArray(traces)) {\n    // If traces is not provided, then it's a complete replot and missing\n    // traces are removed\n    traces = [];\n    for (i = 0; i < calcdata.length; i++) traces.push(i);\n  }\n  var zindices = fullLayout._zindices;\n  // Plot each zorder group in ascending order\n  for (var z = 0; z < zindices.length; z++) {\n    var zorder = zindices[z];\n\n    // For each subplot\n    for (i = 0; i < subplots.length; i++) {\n      var subplot = subplots[i];\n      var subplotInfo = fullLayout._plots[subplot];\n      if (z > 0) {\n        var idWithZ = subplotInfo.id;\n        if (idWithZ.indexOf(zindexSeparator) !== -1) continue;\n        idWithZ += zindexSeparator + (z + 1);\n        subplotInfo = Lib.extendFlat({}, subplotInfo, {\n          id: idWithZ,\n          plot: fullLayout._cartesianlayer.selectAll('.subplot').select('.' + idWithZ)\n        });\n      }\n\n      // Get all calcdata (traces) for this subplot:\n      var cdSubplot = [];\n      var pcd;\n\n      // For each trace\n      for (var j = 0; j < calcdata.length; j++) {\n        var cd = calcdata[j];\n        var trace = cd[0].trace;\n        if (zorder !== (trace.zorder || 0)) continue;\n\n        // Skip trace if whitelist provided and it's not whitelisted:\n        // if (Array.isArray(traces) && traces.indexOf(i) === -1) continue;\n        if (trace.xaxis + trace.yaxis === subplot) {\n          // XXX: Should trace carpet dependencies. Only replot all carpet plots if the carpet\n          // axis has actually changed:\n          //\n          // If this trace is specifically requested, add it to the list:\n          if (traces.indexOf(trace.index) !== -1 || trace.carpet) {\n            // Okay, so example: traces 0, 1, and 2 have fill = tonext. You animate\n            // traces 0 and 2. Trace 1 also needs to be updated, otherwise its fill\n            // is outdated. So this retroactively adds the previous trace if the\n            // traces are interdependent.\n            if (pcd && pcd[0].trace.xaxis + pcd[0].trace.yaxis === subplot && ['tonextx', 'tonexty', 'tonext'].indexOf(trace.fill) !== -1 && cdSubplot.indexOf(pcd) === -1) {\n              cdSubplot.push(pcd);\n            }\n            cdSubplot.push(cd);\n          }\n\n          // Track the previous trace on this subplot for the retroactive-add step\n          // above:\n          pcd = cd;\n        }\n      }\n      // Plot the traces for this subplot\n      plotOne(gd, subplotInfo, cdSubplot, transitionOpts, makeOnCompleteCallback);\n    }\n  }\n};\nfunction plotOne(gd, plotinfo, cdSubplot, transitionOpts, makeOnCompleteCallback) {\n  var traceLayerClasses = constants.traceLayerClasses;\n  var fullLayout = gd._fullLayout;\n  var zindices = fullLayout._zindices;\n  var modules = fullLayout._modules;\n  var _module, cdModuleAndOthers, cdModule;\n  var layerData = [];\n  var zoomScaleQueryParts = [];\n\n  // Plot each zorder group in ascending order\n  for (var z = 0; z < zindices.length; z++) {\n    var zorder = zindices[z];\n    // For each \"module\" (trace type)\n    for (var i = 0; i < modules.length; i++) {\n      _module = modules[i];\n      var name = _module.name;\n      var categories = Registry.modules[name].categories;\n      if (categories.svg) {\n        var classBaseName = _module.layerName || name + 'layer';\n        var className = classBaseName + (z ? Number(z) + 1 : '');\n        var plotMethod = _module.plot;\n\n        // plot all visible traces of this type on this subplot at once\n        cdModuleAndOthers = getModuleCalcData(cdSubplot, plotMethod, zorder);\n        cdModule = cdModuleAndOthers[0];\n        // don't need to search the found traces again - in fact we need to NOT\n        // so that if two modules share the same plotter we don't double-plot\n        cdSubplot = cdModuleAndOthers[1];\n        if (cdModule.length) {\n          layerData.push({\n            i: traceLayerClasses.indexOf(classBaseName),\n            zindex: z,\n            className: className,\n            plotMethod: plotMethod,\n            cdModule: cdModule\n          });\n        }\n        if (categories.zoomScale) {\n          zoomScaleQueryParts.push('.' + className);\n        }\n      }\n    }\n  }\n  // Sort the layers primarily by zindex, then by i\n  layerData.sort(function (a, b) {\n    return (a.zindex || 0) - (b.zindex || 0) || a.i - b.i;\n  });\n  var layers = plotinfo.plot.selectAll('g.mlayer').data(layerData, function (d) {\n    return d.className;\n  });\n  layers.enter().append('g').attr('class', function (d) {\n    return d.className;\n  }).classed('mlayer', true).classed('rangeplot', plotinfo.isRangePlot);\n  layers.exit().remove();\n  layers.order();\n  layers.each(function (d) {\n    var sel = d3.select(this);\n    var className = d.className;\n    d.plotMethod(gd, plotinfo, d.cdModule, sel, transitionOpts, makeOnCompleteCallback);\n\n    // layers that allow `cliponaxis: false`\n    if (constants.clipOnAxisFalseQuery.indexOf('.' + className) === -1) {\n      Drawing.setClipUrl(sel, plotinfo.layerClipId, gd);\n    }\n  });\n\n  // call Scattergl.plot separately\n  if (fullLayout._has('scattergl')) {\n    _module = Registry.getModule('scattergl');\n    cdModule = getModuleCalcData(cdSubplot, _module)[0];\n    _module.plot(gd, plotinfo, cdModule);\n  }\n\n  // stash \"hot\" selections for faster interaction on drag and scroll\n  if (!gd._context.staticPlot) {\n    if (plotinfo._hasClipOnAxisFalse) {\n      plotinfo.clipOnAxisFalseTraces = plotinfo.plot.selectAll(constants.clipOnAxisFalseQuery.join(',')).selectAll('.trace');\n    }\n    if (zoomScaleQueryParts.length) {\n      var traces = plotinfo.plot.selectAll(zoomScaleQueryParts.join(',')).selectAll('.trace');\n      plotinfo.zoomScalePts = traces.selectAll('path.point');\n      plotinfo.zoomScaleTxt = traces.selectAll('.textpoint');\n    }\n  }\n}\nexports.clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var oldPlots = oldFullLayout._plots || {};\n  var newPlots = newFullLayout._plots || {};\n  var oldSubplotList = oldFullLayout._subplots || {};\n  var plotinfo;\n  var i, k;\n\n  // when going from a large splom graph to something else,\n  // we need to clear <g subplot> so that the new cartesian subplot\n  // can have the correct layer ordering\n  if (oldFullLayout._hasOnlyLargeSploms && !newFullLayout._hasOnlyLargeSploms) {\n    for (k in oldPlots) {\n      plotinfo = oldPlots[k];\n      if (plotinfo.plotgroup) plotinfo.plotgroup.remove();\n    }\n  }\n  var hadGl = oldFullLayout._has && oldFullLayout._has('gl');\n  var hasGl = newFullLayout._has && newFullLayout._has('gl');\n  if (hadGl && !hasGl) {\n    for (k in oldPlots) {\n      plotinfo = oldPlots[k];\n      if (plotinfo._scene) plotinfo._scene.destroy();\n    }\n  }\n\n  // delete any titles we don't need anymore\n  // check if axis list has changed, and if so clear old titles\n  if (oldSubplotList.xaxis && oldSubplotList.yaxis) {\n    var oldAxIDs = axisIds.listIds({\n      _fullLayout: oldFullLayout\n    });\n    for (i = 0; i < oldAxIDs.length; i++) {\n      var oldAxId = oldAxIDs[i];\n      if (!newFullLayout[axisIds.id2name(oldAxId)]) {\n        oldFullLayout._infolayer.selectAll('.g-' + oldAxId + 'title').remove();\n      }\n    }\n  }\n  var hadCartesian = oldFullLayout._has && oldFullLayout._has('cartesian');\n  var hasCartesian = newFullLayout._has && newFullLayout._has('cartesian');\n  if (hadCartesian && !hasCartesian) {\n    // if we've gotten rid of all cartesian traces, remove all the subplot svg items\n\n    purgeSubplotLayers(oldFullLayout._cartesianlayer.selectAll('.subplot'), oldFullLayout);\n    oldFullLayout._defs.selectAll('.axesclip').remove();\n    delete oldFullLayout._axisConstraintGroups;\n    delete oldFullLayout._axisMatchGroups;\n  } else if (oldSubplotList.cartesian) {\n    // otherwise look for subplots we need to remove\n\n    for (i = 0; i < oldSubplotList.cartesian.length; i++) {\n      var oldSubplotId = oldSubplotList.cartesian[i];\n\n      // skip zindex layes in this process\n      if (oldSubplotId.indexOf(zindexSeparator) !== -1) continue;\n      if (!newPlots[oldSubplotId]) {\n        var selector = '.' + oldSubplotId + ',.' + oldSubplotId + '-x,.' + oldSubplotId + '-y';\n        oldFullLayout._cartesianlayer.selectAll(selector).remove();\n        removeSubplotExtras(oldSubplotId, oldFullLayout);\n      }\n    }\n  }\n};\nexports.drawFramework = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var calcdata = gd.calcdata;\n  var i;\n\n  // Separate traces by zorder and plot each zorder group separately\n  var traceZorderGroups = {};\n  for (i = 0; i < calcdata.length; i++) {\n    var cdi = calcdata[i][0];\n    var trace = cdi.trace;\n    var zi = trace.zorder || 0;\n    if (!traceZorderGroups[zi]) traceZorderGroups[zi] = [];\n    traceZorderGroups[zi].push(cdi);\n  }\n\n  // Group by zorder group in ascending order\n  var zindices = Object.keys(traceZorderGroups).map(Number).sort(Lib.sorterAsc);\n  if (!zindices.length) zindices = [0];\n  fullLayout._zindices = zindices;\n  var initialSubplotData = makeSubplotData(gd);\n  var len = initialSubplotData.length;\n  var subplotData = [];\n  for (i = 0; i < len; i++) {\n    subplotData[i] = initialSubplotData[i].slice();\n  }\n  for (var z = 1; z < zindices.length; z++) {\n    var newSubplotData = [];\n    for (i = 0; i < len; i++) {\n      newSubplotData[i] = initialSubplotData[i].slice();\n      newSubplotData[i][0] += zindexSeparator + (z + 1);\n    }\n    subplotData = subplotData.concat(newSubplotData);\n  }\n  var subplotLayers = fullLayout._cartesianlayer.selectAll('.subplot').data(subplotData, String);\n  subplotLayers.enter().append('g').attr('class', function (d) {\n    return 'subplot ' + d[0];\n  });\n  subplotLayers.order();\n  subplotLayers.exit().call(purgeSubplotLayers, fullLayout);\n  subplotLayers.each(function (d) {\n    var id = d[0];\n    var posZ = id.indexOf(zindexSeparator);\n    var hasZ = posZ !== -1;\n    var idWithoutZ = hasZ ? id.slice(0, posZ) : id;\n    var plotinfo = fullLayout._plots[id];\n    if (!plotinfo) {\n      plotinfo = Lib.extendFlat({}, fullLayout._plots[idWithoutZ]);\n      if (plotinfo) {\n        plotinfo.id = id;\n        fullLayout._plots[id] = plotinfo;\n        fullLayout._subplots.cartesian.push(id);\n      }\n    }\n    if (plotinfo) {\n      plotinfo.plotgroup = d3.select(this);\n      makeSubplotLayer(gd, plotinfo);\n      if (!hasZ) {\n        // make separate drag layers for each subplot,\n        // but append them to paper rather than the plot groups,\n        // so they end up on top of the rest\n        plotinfo.draglayer = ensureSingle(fullLayout._draggers, 'g', id);\n      }\n    }\n  });\n};\nexports.rangePlot = function (gd, plotinfo, cdSubplot) {\n  makeSubplotLayer(gd, plotinfo);\n  plotOne(gd, plotinfo, cdSubplot);\n  Plots.style(gd);\n};\nfunction makeSubplotData(gd) {\n  var fullLayout = gd._fullLayout;\n  var numZ = fullLayout._zindices.length;\n  var ids = fullLayout._subplots.cartesian;\n  var len = ids.length;\n  var i, j, id, plotinfo, xa, ya;\n\n  // split 'regular' and 'overlaying' subplots\n  var regulars = [];\n  var overlays = [];\n  for (i = 0; i < len; i++) {\n    id = ids[i];\n    plotinfo = fullLayout._plots[id];\n    xa = plotinfo.xaxis;\n    ya = plotinfo.yaxis;\n    var xa2 = xa._mainAxis;\n    var ya2 = ya._mainAxis;\n    var mainplot = xa2._id + ya2._id;\n    var mainplotinfo = fullLayout._plots[mainplot];\n    plotinfo.overlays = [];\n    if (mainplot !== id && mainplotinfo) {\n      plotinfo.mainplot = mainplot;\n      plotinfo.mainplotinfo = mainplotinfo;\n      overlays.push(id);\n    } else {\n      plotinfo.mainplot = undefined;\n      plotinfo.mainplotinfo = undefined;\n      regulars.push(id);\n    }\n  }\n\n  // fill in list of overlaying subplots in 'main plot'\n  for (i = 0; i < overlays.length; i++) {\n    id = overlays[i];\n    plotinfo = fullLayout._plots[id];\n    plotinfo.mainplotinfo.overlays.push(plotinfo);\n  }\n\n  // put 'regular' subplot data before 'overlaying'\n  var subplotIds = regulars.concat(overlays);\n  var subplotData = [];\n  for (i = 0; i < len; i++) {\n    id = subplotIds[i];\n    plotinfo = fullLayout._plots[id];\n    xa = plotinfo.xaxis;\n    ya = plotinfo.yaxis;\n    var d = [];\n    for (var z = 1; z <= numZ; z++) {\n      var zStr = '';\n      if (z > 1) zStr += zindexSeparator + z;\n\n      // use info about axis layer and overlaying pattern\n      // to clean what need to be cleaned up in exit selection\n      d.push(id + zStr);\n      for (j = 0; j < plotinfo.overlays.length; j++) {\n        d.push(plotinfo.overlays[j].id + zStr);\n      }\n    }\n    d = d.concat([xa.layer, ya.layer, xa.overlaying || '', ya.overlaying || '']);\n    subplotData.push(d);\n  }\n  return subplotData;\n}\nfunction makeSubplotLayer(gd, plotinfo) {\n  var fullLayout = gd._fullLayout;\n  var plotgroup = plotinfo.plotgroup;\n  var id = plotinfo.id;\n  var posZ = id.indexOf(zindexSeparator);\n  var hasZ = posZ !== -1;\n  var xLayer = constants.layerValue2layerClass[plotinfo.xaxis.layer];\n  var yLayer = constants.layerValue2layerClass[plotinfo.yaxis.layer];\n  var hasOnlyLargeSploms = fullLayout._hasOnlyLargeSploms;\n  if (!plotinfo.mainplot || fullLayout._zindices.length > 1) {\n    if (hasOnlyLargeSploms) {\n      // TODO could do even better\n      // - we don't need plot (but we would have to mock it in lsInner\n      //   and other places\n      // - we don't (x|y)lines and (x|y)axislayer for most subplots\n      //   usually just the bottom x and left y axes.\n      plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n      plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n      plotinfo.xaxislayer = ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n      plotinfo.yaxislayer = ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n    } else {\n      if (!hasZ) {\n        var backLayer = ensureSingle(plotgroup, 'g', 'layer-subplot');\n        plotinfo.shapelayer = ensureSingle(backLayer, 'g', 'shapelayer');\n        plotinfo.imagelayer = ensureSingle(backLayer, 'g', 'imagelayer');\n        plotinfo.minorGridlayer = ensureSingle(plotgroup, 'g', 'minor-gridlayer');\n        plotinfo.gridlayer = ensureSingle(plotgroup, 'g', 'gridlayer');\n        plotinfo.zerolinelayer = ensureSingle(plotgroup, 'g', 'zerolinelayer');\n        var betweenLayer = ensureSingle(plotgroup, 'g', 'layer-between');\n        plotinfo.shapelayerBetween = ensureSingle(betweenLayer, 'g', 'shapelayer');\n        plotinfo.imagelayerBetween = ensureSingle(betweenLayer, 'g', 'imagelayer');\n        ensureSingle(plotgroup, 'path', 'xlines-below');\n        ensureSingle(plotgroup, 'path', 'ylines-below');\n        plotinfo.overlinesBelow = ensureSingle(plotgroup, 'g', 'overlines-below');\n        ensureSingle(plotgroup, 'g', 'xaxislayer-below');\n        ensureSingle(plotgroup, 'g', 'yaxislayer-below');\n        plotinfo.overaxesBelow = ensureSingle(plotgroup, 'g', 'overaxes-below');\n      }\n      plotinfo.overplot = ensureSingle(plotgroup, 'g', 'overplot');\n      plotinfo.plot = ensureSingle(plotinfo.overplot, 'g', id);\n      if (!hasZ) {\n        plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n        plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n        plotinfo.overlinesAbove = ensureSingle(plotgroup, 'g', 'overlines-above');\n        ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n        ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n        plotinfo.overaxesAbove = ensureSingle(plotgroup, 'g', 'overaxes-above');\n\n        // set refs to correct layers as determined by 'axis.layer'\n        plotinfo.xlines = plotgroup.select('.xlines-' + xLayer);\n        plotinfo.ylines = plotgroup.select('.ylines-' + yLayer);\n        plotinfo.xaxislayer = plotgroup.select('.xaxislayer-' + xLayer);\n        plotinfo.yaxislayer = plotgroup.select('.yaxislayer-' + yLayer);\n      }\n    }\n  } else {\n    var mainplotinfo = plotinfo.mainplotinfo;\n    var mainplotgroup = mainplotinfo.plotgroup;\n    var xId = id + '-x';\n    var yId = id + '-y';\n\n    // now make the components of overlaid subplots\n    // overlays don't have backgrounds, and append all\n    // their other components to the corresponding\n    // extra groups of their main plots.\n\n    plotinfo.minorGridlayer = mainplotinfo.minorGridlayer;\n    plotinfo.gridlayer = mainplotinfo.gridlayer;\n    plotinfo.zerolinelayer = mainplotinfo.zerolinelayer;\n    ensureSingle(mainplotinfo.overlinesBelow, 'path', xId);\n    ensureSingle(mainplotinfo.overlinesBelow, 'path', yId);\n    ensureSingle(mainplotinfo.overaxesBelow, 'g', xId);\n    ensureSingle(mainplotinfo.overaxesBelow, 'g', yId);\n    plotinfo.plot = ensureSingle(mainplotinfo.overplot, 'g', id);\n    ensureSingle(mainplotinfo.overlinesAbove, 'path', xId);\n    ensureSingle(mainplotinfo.overlinesAbove, 'path', yId);\n    ensureSingle(mainplotinfo.overaxesAbove, 'g', xId);\n    ensureSingle(mainplotinfo.overaxesAbove, 'g', yId);\n\n    // set refs to correct layers as determined by 'abovetraces'\n    plotinfo.xlines = mainplotgroup.select('.overlines-' + xLayer).select('.' + xId);\n    plotinfo.ylines = mainplotgroup.select('.overlines-' + yLayer).select('.' + yId);\n    plotinfo.xaxislayer = mainplotgroup.select('.overaxes-' + xLayer).select('.' + xId);\n    plotinfo.yaxislayer = mainplotgroup.select('.overaxes-' + yLayer).select('.' + yId);\n  }\n  if (!hasZ) {\n    // common attributes for all subplots, overlays or not\n\n    if (!hasOnlyLargeSploms) {\n      ensureSingleAndAddDatum(plotinfo.minorGridlayer, 'g', plotinfo.xaxis._id);\n      ensureSingleAndAddDatum(plotinfo.minorGridlayer, 'g', plotinfo.yaxis._id);\n      plotinfo.minorGridlayer.selectAll('g').map(function (d) {\n        return d[0];\n      }).sort(axisIds.idSort);\n      ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.xaxis._id);\n      ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.yaxis._id);\n      plotinfo.gridlayer.selectAll('g').map(function (d) {\n        return d[0];\n      }).sort(axisIds.idSort);\n    }\n    plotinfo.xlines.style('fill', 'none').classed('crisp', true);\n    plotinfo.ylines.style('fill', 'none').classed('crisp', true);\n  }\n}\nfunction purgeSubplotLayers(layers, fullLayout) {\n  if (!layers) return;\n  var overlayIdsToRemove = {};\n  layers.each(function (d) {\n    var id = d[0];\n    var plotgroup = d3.select(this);\n    plotgroup.remove();\n    removeSubplotExtras(id, fullLayout);\n    overlayIdsToRemove[id] = true;\n\n    // do not remove individual axis <clipPath>s here\n    // as other subplots may need them\n  });\n\n  // must remove overlaid subplot trace layers 'manually'\n\n  for (var k in fullLayout._plots) {\n    var subplotInfo = fullLayout._plots[k];\n    var overlays = subplotInfo.overlays || [];\n    for (var j = 0; j < overlays.length; j++) {\n      var overlayInfo = overlays[j];\n      if (overlayIdsToRemove[overlayInfo.id]) {\n        overlayInfo.plot.selectAll('.trace').remove();\n      }\n    }\n  }\n}\nfunction removeSubplotExtras(subplotId, fullLayout) {\n  fullLayout._draggers.selectAll('g.' + subplotId).remove();\n  fullLayout._defs.select('#clip' + fullLayout._uid + subplotId + 'plot').remove();\n}\nexports.toSVG = function (gd) {\n  var imageRoot = gd._fullLayout._glimages;\n  var root = d3.select(gd).selectAll('.svg-container');\n  var canvases = root.filter(function (d, i) {\n    return i === root.size() - 1;\n  }).selectAll('.gl-canvas-context, .gl-canvas-focus');\n  function canvasToImage() {\n    var canvas = this;\n    var imageData = canvas.toDataURL('image/png');\n    var image = imageRoot.append('svg:image');\n    image.attr({\n      xmlns: xmlnsNamespaces.svg,\n      'xlink:href': imageData,\n      preserveAspectRatio: 'none',\n      x: 0,\n      y: 0,\n      width: canvas.style.width,\n      height: canvas.style.height\n    });\n  }\n  canvases.each(canvasToImage);\n};\nexports.updateFx = require('./graph_interact').updateFx;","map":{"version":3,"names":["d3","require","Registry","Lib","Plots","Drawing","getModuleCalcData","axisIds","constants","xmlnsNamespaces","ensureSingle","ensureSingleAndAddDatum","parent","nodeType","className","s","datum","zindexSeparator","exports","name","attr","idRoot","idRegex","attrRegex","attributes","layoutAttributes","supplyLayoutDefaults","transitionAxes","finalizeSubplots","layoutIn","layoutOut","subplots","_subplots","xList","xaxis","yList","yaxis","spSVG","cartesian","spAll","concat","gl2d","allX","allY","i","xi","yi","length","parts","split","id2name","anchor","y","test","push","pushUnique","x","ki","axLetter","charAt","substr","name2id","plot","gd","traces","transitionOpts","makeOnCompleteCallback","fullLayout","_fullLayout","calcdata","Array","isArray","zindices","_zindices","z","zorder","subplot","subplotInfo","_plots","idWithZ","id","indexOf","extendFlat","_cartesianlayer","selectAll","select","cdSubplot","pcd","j","cd","trace","index","carpet","fill","plotOne","plotinfo","traceLayerClasses","modules","_modules","_module","cdModuleAndOthers","cdModule","layerData","zoomScaleQueryParts","categories","svg","classBaseName","layerName","Number","plotMethod","zindex","zoomScale","sort","a","b","layers","data","d","enter","append","classed","isRangePlot","exit","remove","order","each","sel","clipOnAxisFalseQuery","setClipUrl","layerClipId","_has","getModule","_context","staticPlot","_hasClipOnAxisFalse","clipOnAxisFalseTraces","join","zoomScalePts","zoomScaleTxt","clean","newFullData","newFullLayout","oldFullData","oldFullLayout","oldPlots","newPlots","oldSubplotList","k","_hasOnlyLargeSploms","plotgroup","hadGl","hasGl","_scene","destroy","oldAxIDs","listIds","oldAxId","_infolayer","hadCartesian","hasCartesian","purgeSubplotLayers","_defs","_axisConstraintGroups","_axisMatchGroups","oldSubplotId","selector","removeSubplotExtras","drawFramework","traceZorderGroups","cdi","zi","Object","keys","map","sorterAsc","initialSubplotData","makeSubplotData","len","subplotData","slice","newSubplotData","subplotLayers","String","call","posZ","hasZ","idWithoutZ","makeSubplotLayer","draglayer","_draggers","rangePlot","style","numZ","ids","xa","ya","regulars","overlays","xa2","_mainAxis","ya2","mainplot","_id","mainplotinfo","undefined","subplotIds","zStr","layer","overlaying","xLayer","layerValue2layerClass","yLayer","hasOnlyLargeSploms","xlines","ylines","xaxislayer","yaxislayer","backLayer","shapelayer","imagelayer","minorGridlayer","gridlayer","zerolinelayer","betweenLayer","shapelayerBetween","imagelayerBetween","overlinesBelow","overaxesBelow","overplot","overlinesAbove","overaxesAbove","mainplotgroup","xId","yId","idSort","overlayIdsToRemove","overlayInfo","subplotId","_uid","toSVG","imageRoot","_glimages","root","canvases","filter","size","canvasToImage","canvas","imageData","toDataURL","image","xmlns","preserveAspectRatio","width","height","updateFx"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/plots/cartesian/index.js"],"sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar Plots = require('../plots');\nvar Drawing = require('../../components/drawing');\n\nvar getModuleCalcData = require('../get_data').getModuleCalcData;\nvar axisIds = require('./axis_ids');\nvar constants = require('./constants');\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\n\nvar ensureSingle = Lib.ensureSingle;\n\nfunction ensureSingleAndAddDatum(parent, nodeType, className) {\n    return Lib.ensureSingle(parent, nodeType, className, function(s) {\n        s.datum(className);\n    });\n}\n\nvar zindexSeparator = constants.zindexSeparator;\n\nexports.name = 'cartesian';\n\nexports.attr = ['xaxis', 'yaxis'];\n\nexports.idRoot = ['x', 'y'];\n\nexports.idRegex = constants.idRegex;\n\nexports.attrRegex = constants.attrRegex;\n\nexports.attributes = require('./attributes');\n\nexports.layoutAttributes = require('./layout_attributes');\n\nexports.supplyLayoutDefaults = require('./layout_defaults');\n\nexports.transitionAxes = require('./transition_axes');\n\nexports.finalizeSubplots = function(layoutIn, layoutOut) {\n    var subplots = layoutOut._subplots;\n    var xList = subplots.xaxis;\n    var yList = subplots.yaxis;\n    var spSVG = subplots.cartesian;\n    var spAll = spSVG.concat(subplots.gl2d || []);\n    var allX = {};\n    var allY = {};\n    var i, xi, yi;\n\n    for(i = 0; i < spAll.length; i++) {\n        var parts = spAll[i].split('y');\n        allX[parts[0]] = 1;\n        allY['y' + parts[1]] = 1;\n    }\n\n    // check for x axes with no subplot, and make one from the anchor of that x axis\n    for(i = 0; i < xList.length; i++) {\n        xi = xList[i];\n        if(!allX[xi]) {\n            yi = (layoutIn[axisIds.id2name(xi)] || {}).anchor;\n            if(!constants.idRegex.y.test(yi)) yi = 'y';\n            spSVG.push(xi + yi);\n            spAll.push(xi + yi);\n\n            if(!allY[yi]) {\n                allY[yi] = 1;\n                Lib.pushUnique(yList, yi);\n            }\n        }\n    }\n\n    // same for y axes with no subplot\n    for(i = 0; i < yList.length; i++) {\n        yi = yList[i];\n        if(!allY[yi]) {\n            xi = (layoutIn[axisIds.id2name(yi)] || {}).anchor;\n            if(!constants.idRegex.x.test(xi)) xi = 'x';\n            spSVG.push(xi + yi);\n            spAll.push(xi + yi);\n\n            if(!allX[xi]) {\n                allX[xi] = 1;\n                Lib.pushUnique(xList, xi);\n            }\n        }\n    }\n\n    // finally, if we've gotten here we're supposed to show cartesian...\n    // so if there are NO subplots at all, make one from the first\n    // x & y axes in the input layout\n    if(!spAll.length) {\n        xi = '';\n        yi = '';\n        for(var ki in layoutIn) {\n            if(constants.attrRegex.test(ki)) {\n                var axLetter = ki.charAt(0);\n                if(axLetter === 'x') {\n                    if(!xi || (+ki.substr(5) < +xi.substr(5))) {\n                        xi = ki;\n                    }\n                } else if(!yi || (+ki.substr(5) < +yi.substr(5))) {\n                    yi = ki;\n                }\n            }\n        }\n        xi = xi ? axisIds.name2id(xi) : 'x';\n        yi = yi ? axisIds.name2id(yi) : 'y';\n        xList.push(xi);\n        yList.push(yi);\n        spSVG.push(xi + yi);\n    }\n};\n\n/**\n * Cartesian.plot\n *\n * @param {DOM div | object} gd\n * @param {array (optional)} traces\n *  array of traces indices to plot\n *  if undefined, plots all cartesian traces,\n * @param {object} (optional) transitionOpts\n *  transition option object\n * @param {function} (optional) makeOnCompleteCallback\n *  transition make callback function from Plots.transition\n */\nexports.plot = function(gd, traces, transitionOpts, makeOnCompleteCallback) {\n    var fullLayout = gd._fullLayout;\n    var subplots = fullLayout._subplots.cartesian;\n    var calcdata = gd.calcdata;\n    var i;\n\n    // Traces is a list of trace indices to (re)plot. If it's not provided,\n    // then it's a complete replot so we create a new list and add all trace indices\n    // which are in calcdata.\n\n    if(!Array.isArray(traces)) {\n        // If traces is not provided, then it's a complete replot and missing\n        // traces are removed\n        traces = [];\n        for(i = 0; i < calcdata.length; i++) traces.push(i);\n    }\n\n    var zindices = fullLayout._zindices;\n    // Plot each zorder group in ascending order\n    for(var z = 0; z < zindices.length; z++) {\n        var zorder = zindices[z];\n\n        // For each subplot\n        for(i = 0; i < subplots.length; i++) {\n            var subplot = subplots[i];\n            var subplotInfo = fullLayout._plots[subplot];\n\n            if(z > 0) {\n                var idWithZ = subplotInfo.id;\n                if(idWithZ.indexOf(zindexSeparator) !== -1) continue;\n                idWithZ += zindexSeparator + (z + 1);\n                subplotInfo = Lib.extendFlat({}, subplotInfo, {\n                    id: idWithZ,\n                    plot: fullLayout._cartesianlayer.selectAll('.subplot').select('.' + idWithZ)\n                });\n            }\n\n            // Get all calcdata (traces) for this subplot:\n            var cdSubplot = [];\n            var pcd;\n\n            // For each trace\n            for(var j = 0; j < calcdata.length; j++) {\n                var cd = calcdata[j];\n                var trace = cd[0].trace;\n\n                if(zorder !== (trace.zorder || 0)) continue;\n\n                // Skip trace if whitelist provided and it's not whitelisted:\n                // if (Array.isArray(traces) && traces.indexOf(i) === -1) continue;\n                if(trace.xaxis + trace.yaxis === subplot) {\n                    // XXX: Should trace carpet dependencies. Only replot all carpet plots if the carpet\n                    // axis has actually changed:\n                    //\n                    // If this trace is specifically requested, add it to the list:\n                    if(traces.indexOf(trace.index) !== -1 || trace.carpet) {\n                        // Okay, so example: traces 0, 1, and 2 have fill = tonext. You animate\n                        // traces 0 and 2. Trace 1 also needs to be updated, otherwise its fill\n                        // is outdated. So this retroactively adds the previous trace if the\n                        // traces are interdependent.\n                        if(\n                            pcd &&\n                            pcd[0].trace.xaxis + pcd[0].trace.yaxis === subplot &&\n                            ['tonextx', 'tonexty', 'tonext'].indexOf(trace.fill) !== -1 &&\n                            cdSubplot.indexOf(pcd) === -1\n                        ) {\n                            cdSubplot.push(pcd);\n                        }\n\n                        cdSubplot.push(cd);\n                    }\n\n                    // Track the previous trace on this subplot for the retroactive-add step\n                    // above:\n                    pcd = cd;\n                }\n            }\n            // Plot the traces for this subplot\n            plotOne(gd, subplotInfo, cdSubplot, transitionOpts, makeOnCompleteCallback);\n        }\n    }\n};\n\nfunction plotOne(gd, plotinfo, cdSubplot, transitionOpts, makeOnCompleteCallback) {\n    var traceLayerClasses = constants.traceLayerClasses;\n    var fullLayout = gd._fullLayout;\n    var zindices = fullLayout._zindices;\n\n    var modules = fullLayout._modules;\n    var _module, cdModuleAndOthers, cdModule;\n\n    var layerData = [];\n    var zoomScaleQueryParts = [];\n\n    // Plot each zorder group in ascending order\n    for(var z = 0; z < zindices.length; z++) {\n        var zorder = zindices[z];\n        // For each \"module\" (trace type)\n        for(var i = 0; i < modules.length; i++) {\n            _module = modules[i];\n            var name = _module.name;\n            var categories = Registry.modules[name].categories;\n\n            if(categories.svg) {\n                var classBaseName = (_module.layerName || name + 'layer');\n                var className = classBaseName + (z ? Number(z) + 1 : '');\n                var plotMethod = _module.plot;\n\n                // plot all visible traces of this type on this subplot at once\n                cdModuleAndOthers = getModuleCalcData(cdSubplot, plotMethod, zorder);\n                cdModule = cdModuleAndOthers[0];\n                // don't need to search the found traces again - in fact we need to NOT\n                // so that if two modules share the same plotter we don't double-plot\n                cdSubplot = cdModuleAndOthers[1];\n\n                if(cdModule.length) {\n                    layerData.push({\n                        i: traceLayerClasses.indexOf(classBaseName),\n                        zindex: z,\n                        className: className,\n                        plotMethod: plotMethod,\n                        cdModule: cdModule\n                    });\n                }\n\n                if(categories.zoomScale) {\n                    zoomScaleQueryParts.push('.' + className);\n                }\n            }\n        }\n    }\n    // Sort the layers primarily by zindex, then by i\n    layerData.sort(function(a, b) {\n        return (\n            (a.zindex || 0) - (b.zindex || 0) ||\n            (a.i - b.i)\n        );\n    });\n\n    var layers = plotinfo.plot.selectAll('g.mlayer')\n        .data(layerData, function(d) { return d.className; });\n\n    layers.enter().append('g')\n        .attr('class', function(d) { return d.className; })\n        .classed('mlayer', true)\n        .classed('rangeplot', plotinfo.isRangePlot);\n\n    layers.exit().remove();\n\n    layers.order();\n\n    layers.each(function(d) {\n        var sel = d3.select(this);\n        var className = d.className;\n\n        d.plotMethod(\n            gd, plotinfo, d.cdModule, sel,\n            transitionOpts, makeOnCompleteCallback\n        );\n\n        // layers that allow `cliponaxis: false`\n        if(constants.clipOnAxisFalseQuery.indexOf('.' + className) === -1) {\n            Drawing.setClipUrl(sel, plotinfo.layerClipId, gd);\n        }\n    });\n\n    // call Scattergl.plot separately\n    if(fullLayout._has('scattergl')) {\n        _module = Registry.getModule('scattergl');\n        cdModule = getModuleCalcData(cdSubplot, _module)[0];\n        _module.plot(gd, plotinfo, cdModule);\n    }\n\n    // stash \"hot\" selections for faster interaction on drag and scroll\n    if(!gd._context.staticPlot) {\n        if(plotinfo._hasClipOnAxisFalse) {\n            plotinfo.clipOnAxisFalseTraces = plotinfo.plot\n                .selectAll(constants.clipOnAxisFalseQuery.join(','))\n                .selectAll('.trace');\n        }\n\n        if(zoomScaleQueryParts.length) {\n            var traces = plotinfo.plot\n                .selectAll(zoomScaleQueryParts.join(','))\n                .selectAll('.trace');\n\n            plotinfo.zoomScalePts = traces.selectAll('path.point');\n            plotinfo.zoomScaleTxt = traces.selectAll('.textpoint');\n        }\n    }\n}\n\nexports.clean = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var oldPlots = oldFullLayout._plots || {};\n    var newPlots = newFullLayout._plots || {};\n    var oldSubplotList = oldFullLayout._subplots || {};\n    var plotinfo;\n    var i, k;\n\n    // when going from a large splom graph to something else,\n    // we need to clear <g subplot> so that the new cartesian subplot\n    // can have the correct layer ordering\n    if(oldFullLayout._hasOnlyLargeSploms && !newFullLayout._hasOnlyLargeSploms) {\n        for(k in oldPlots) {\n            plotinfo = oldPlots[k];\n            if(plotinfo.plotgroup) plotinfo.plotgroup.remove();\n        }\n    }\n\n    var hadGl = (oldFullLayout._has && oldFullLayout._has('gl'));\n    var hasGl = (newFullLayout._has && newFullLayout._has('gl'));\n\n    if(hadGl && !hasGl) {\n        for(k in oldPlots) {\n            plotinfo = oldPlots[k];\n            if(plotinfo._scene) plotinfo._scene.destroy();\n        }\n    }\n\n    // delete any titles we don't need anymore\n    // check if axis list has changed, and if so clear old titles\n    if(oldSubplotList.xaxis && oldSubplotList.yaxis) {\n        var oldAxIDs = axisIds.listIds({_fullLayout: oldFullLayout});\n        for(i = 0; i < oldAxIDs.length; i++) {\n            var oldAxId = oldAxIDs[i];\n            if(!newFullLayout[axisIds.id2name(oldAxId)]) {\n                oldFullLayout._infolayer.selectAll('.g-' + oldAxId + 'title').remove();\n            }\n        }\n    }\n\n    var hadCartesian = (oldFullLayout._has && oldFullLayout._has('cartesian'));\n    var hasCartesian = (newFullLayout._has && newFullLayout._has('cartesian'));\n\n    if(hadCartesian && !hasCartesian) {\n        // if we've gotten rid of all cartesian traces, remove all the subplot svg items\n\n        purgeSubplotLayers(oldFullLayout._cartesianlayer.selectAll('.subplot'), oldFullLayout);\n        oldFullLayout._defs.selectAll('.axesclip').remove();\n        delete oldFullLayout._axisConstraintGroups;\n        delete oldFullLayout._axisMatchGroups;\n    } else if(oldSubplotList.cartesian) {\n        // otherwise look for subplots we need to remove\n\n        for(i = 0; i < oldSubplotList.cartesian.length; i++) {\n            var oldSubplotId = oldSubplotList.cartesian[i];\n\n            // skip zindex layes in this process\n            if(oldSubplotId.indexOf(zindexSeparator) !== -1) continue;\n\n            if(!newPlots[oldSubplotId]) {\n                var selector = '.' + oldSubplotId + ',.' + oldSubplotId + '-x,.' + oldSubplotId + '-y';\n                oldFullLayout._cartesianlayer.selectAll(selector).remove();\n                removeSubplotExtras(oldSubplotId, oldFullLayout);\n            }\n        }\n    }\n};\n\nexports.drawFramework = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var calcdata = gd.calcdata;\n    var i;\n\n    // Separate traces by zorder and plot each zorder group separately\n    var traceZorderGroups = {};\n    for(i = 0; i < calcdata.length; i++) {\n        var cdi = calcdata[i][0];\n        var trace = cdi.trace;\n\n        var zi = trace.zorder || 0;\n        if(!traceZorderGroups[zi]) traceZorderGroups[zi] = [];\n        traceZorderGroups[zi].push(cdi);\n    }\n\n    // Group by zorder group in ascending order\n    var zindices = Object.keys(traceZorderGroups)\n        .map(Number)\n        .sort(Lib.sorterAsc);\n\n    if(!zindices.length) zindices = [0];\n\n    fullLayout._zindices = zindices;\n\n    var initialSubplotData = makeSubplotData(gd);\n\n    var len = initialSubplotData.length;\n    var subplotData = [];\n    for(i = 0; i < len; i++) {\n        subplotData[i] = initialSubplotData[i].slice();\n    }\n\n    for(var z = 1; z < zindices.length; z++) {\n        var newSubplotData = [];\n        for(i = 0; i < len; i++) {\n            newSubplotData[i] = initialSubplotData[i].slice();\n            newSubplotData[i][0] += zindexSeparator + (z + 1);\n        }\n        subplotData = subplotData.concat(newSubplotData);\n    }\n\n    var subplotLayers = fullLayout._cartesianlayer.selectAll('.subplot')\n        .data(subplotData, String);\n\n\n    subplotLayers.enter().append('g')\n        .attr('class', function(d) { return 'subplot ' + d[0]; });\n\n    subplotLayers.order();\n\n    subplotLayers.exit()\n        .call(purgeSubplotLayers, fullLayout);\n\n    subplotLayers.each(function(d) {\n        var id = d[0];\n        var posZ = id.indexOf(zindexSeparator);\n        var hasZ = posZ !== -1;\n        var idWithoutZ = hasZ ?\n            id.slice(0, posZ) :\n            id;\n\n        var plotinfo = fullLayout._plots[id];\n        if(!plotinfo) {\n            plotinfo = Lib.extendFlat({}, fullLayout._plots[idWithoutZ]);\n\n            if(plotinfo) {\n                plotinfo.id = id;\n                fullLayout._plots[id] = plotinfo;\n                fullLayout._subplots.cartesian.push(id);\n            }\n        }\n\n        if(plotinfo) {\n            plotinfo.plotgroup = d3.select(this);\n            makeSubplotLayer(gd, plotinfo);\n\n            if(!hasZ) {\n                // make separate drag layers for each subplot,\n                // but append them to paper rather than the plot groups,\n                // so they end up on top of the rest\n                plotinfo.draglayer = ensureSingle(fullLayout._draggers, 'g', id);\n            }\n        }\n    });\n};\n\nexports.rangePlot = function(gd, plotinfo, cdSubplot) {\n    makeSubplotLayer(gd, plotinfo);\n    plotOne(gd, plotinfo, cdSubplot);\n    Plots.style(gd);\n};\n\nfunction makeSubplotData(gd) {\n    var fullLayout = gd._fullLayout;\n    var numZ = fullLayout._zindices.length;\n\n    var ids = fullLayout._subplots.cartesian;\n    var len = ids.length;\n    var i, j, id, plotinfo, xa, ya;\n\n    // split 'regular' and 'overlaying' subplots\n    var regulars = [];\n    var overlays = [];\n\n    for(i = 0; i < len; i++) {\n        id = ids[i];\n        plotinfo = fullLayout._plots[id];\n        xa = plotinfo.xaxis;\n        ya = plotinfo.yaxis;\n\n        var xa2 = xa._mainAxis;\n        var ya2 = ya._mainAxis;\n        var mainplot = xa2._id + ya2._id;\n        var mainplotinfo = fullLayout._plots[mainplot];\n        plotinfo.overlays = [];\n\n        if(mainplot !== id && mainplotinfo) {\n            plotinfo.mainplot = mainplot;\n            plotinfo.mainplotinfo = mainplotinfo;\n            overlays.push(id);\n        } else {\n            plotinfo.mainplot = undefined;\n            plotinfo.mainplotinfo = undefined;\n            regulars.push(id);\n        }\n    }\n\n    // fill in list of overlaying subplots in 'main plot'\n    for(i = 0; i < overlays.length; i++) {\n        id = overlays[i];\n        plotinfo = fullLayout._plots[id];\n        plotinfo.mainplotinfo.overlays.push(plotinfo);\n    }\n\n    // put 'regular' subplot data before 'overlaying'\n    var subplotIds = regulars.concat(overlays);\n    var subplotData = [];\n\n    for(i = 0; i < len; i++) {\n        id = subplotIds[i];\n        plotinfo = fullLayout._plots[id];\n        xa = plotinfo.xaxis;\n        ya = plotinfo.yaxis;\n\n        var d = [];\n\n        for(var z = 1; z <= numZ; z++) {\n            var zStr = '';\n            if(z > 1) zStr += zindexSeparator + z;\n\n            // use info about axis layer and overlaying pattern\n            // to clean what need to be cleaned up in exit selection\n            d.push(id + zStr);\n            for(j = 0; j < plotinfo.overlays.length; j++) {\n                d.push(plotinfo.overlays[j].id + zStr);\n            }\n        }\n\n        d = d.concat([\n            xa.layer,\n            ya.layer,\n            xa.overlaying || '',\n            ya.overlaying || ''\n        ]);\n\n        subplotData.push(d);\n    }\n    return subplotData;\n}\n\nfunction makeSubplotLayer(gd, plotinfo) {\n    var fullLayout = gd._fullLayout;\n    var plotgroup = plotinfo.plotgroup;\n    var id = plotinfo.id;\n\n    var posZ = id.indexOf(zindexSeparator);\n    var hasZ = posZ !== -1;\n\n    var xLayer = constants.layerValue2layerClass[plotinfo.xaxis.layer];\n    var yLayer = constants.layerValue2layerClass[plotinfo.yaxis.layer];\n    var hasOnlyLargeSploms = fullLayout._hasOnlyLargeSploms;\n\n    if(!plotinfo.mainplot || fullLayout._zindices.length > 1) {\n        if(hasOnlyLargeSploms) {\n            // TODO could do even better\n            // - we don't need plot (but we would have to mock it in lsInner\n            //   and other places\n            // - we don't (x|y)lines and (x|y)axislayer for most subplots\n            //   usually just the bottom x and left y axes.\n            plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n            plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n            plotinfo.xaxislayer = ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n            plotinfo.yaxislayer = ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n        } else {\n            if(!hasZ) {\n                var backLayer = ensureSingle(plotgroup, 'g', 'layer-subplot');\n                plotinfo.shapelayer = ensureSingle(backLayer, 'g', 'shapelayer');\n                plotinfo.imagelayer = ensureSingle(backLayer, 'g', 'imagelayer');\n\n                plotinfo.minorGridlayer = ensureSingle(plotgroup, 'g', 'minor-gridlayer');\n                plotinfo.gridlayer = ensureSingle(plotgroup, 'g', 'gridlayer');\n                plotinfo.zerolinelayer = ensureSingle(plotgroup, 'g', 'zerolinelayer');\n\n                var betweenLayer = ensureSingle(plotgroup, 'g', 'layer-between');\n                plotinfo.shapelayerBetween = ensureSingle(betweenLayer, 'g', 'shapelayer');\n                plotinfo.imagelayerBetween = ensureSingle(betweenLayer, 'g', 'imagelayer');\n\n                ensureSingle(plotgroup, 'path', 'xlines-below');\n                ensureSingle(plotgroup, 'path', 'ylines-below');\n                plotinfo.overlinesBelow = ensureSingle(plotgroup, 'g', 'overlines-below');\n\n                ensureSingle(plotgroup, 'g', 'xaxislayer-below');\n                ensureSingle(plotgroup, 'g', 'yaxislayer-below');\n                plotinfo.overaxesBelow = ensureSingle(plotgroup, 'g', 'overaxes-below');\n            }\n\n            plotinfo.overplot = ensureSingle(plotgroup, 'g', 'overplot');\n            plotinfo.plot = ensureSingle(plotinfo.overplot, 'g', id);\n\n            if(!hasZ) {\n                plotinfo.xlines = ensureSingle(plotgroup, 'path', 'xlines-above');\n                plotinfo.ylines = ensureSingle(plotgroup, 'path', 'ylines-above');\n                plotinfo.overlinesAbove = ensureSingle(plotgroup, 'g', 'overlines-above');\n\n                ensureSingle(plotgroup, 'g', 'xaxislayer-above');\n                ensureSingle(plotgroup, 'g', 'yaxislayer-above');\n                plotinfo.overaxesAbove = ensureSingle(plotgroup, 'g', 'overaxes-above');\n\n                // set refs to correct layers as determined by 'axis.layer'\n                plotinfo.xlines = plotgroup.select('.xlines-' + xLayer);\n                plotinfo.ylines = plotgroup.select('.ylines-' + yLayer);\n                plotinfo.xaxislayer = plotgroup.select('.xaxislayer-' + xLayer);\n                plotinfo.yaxislayer = plotgroup.select('.yaxislayer-' + yLayer);\n            }\n        }\n    } else {\n        var mainplotinfo = plotinfo.mainplotinfo;\n        var mainplotgroup = mainplotinfo.plotgroup;\n        var xId = id + '-x';\n        var yId = id + '-y';\n\n        // now make the components of overlaid subplots\n        // overlays don't have backgrounds, and append all\n        // their other components to the corresponding\n        // extra groups of their main plots.\n\n        plotinfo.minorGridlayer = mainplotinfo.minorGridlayer;\n        plotinfo.gridlayer = mainplotinfo.gridlayer;\n        plotinfo.zerolinelayer = mainplotinfo.zerolinelayer;\n\n        ensureSingle(mainplotinfo.overlinesBelow, 'path', xId);\n        ensureSingle(mainplotinfo.overlinesBelow, 'path', yId);\n        ensureSingle(mainplotinfo.overaxesBelow, 'g', xId);\n        ensureSingle(mainplotinfo.overaxesBelow, 'g', yId);\n\n        plotinfo.plot = ensureSingle(mainplotinfo.overplot, 'g', id);\n\n        ensureSingle(mainplotinfo.overlinesAbove, 'path', xId);\n        ensureSingle(mainplotinfo.overlinesAbove, 'path', yId);\n        ensureSingle(mainplotinfo.overaxesAbove, 'g', xId);\n        ensureSingle(mainplotinfo.overaxesAbove, 'g', yId);\n\n        // set refs to correct layers as determined by 'abovetraces'\n        plotinfo.xlines = mainplotgroup.select('.overlines-' + xLayer).select('.' + xId);\n        plotinfo.ylines = mainplotgroup.select('.overlines-' + yLayer).select('.' + yId);\n        plotinfo.xaxislayer = mainplotgroup.select('.overaxes-' + xLayer).select('.' + xId);\n        plotinfo.yaxislayer = mainplotgroup.select('.overaxes-' + yLayer).select('.' + yId);\n    }\n\n    if(!hasZ) {\n        // common attributes for all subplots, overlays or not\n\n        if(!hasOnlyLargeSploms) {\n            ensureSingleAndAddDatum(plotinfo.minorGridlayer, 'g', plotinfo.xaxis._id);\n            ensureSingleAndAddDatum(plotinfo.minorGridlayer, 'g', plotinfo.yaxis._id);\n            plotinfo.minorGridlayer.selectAll('g')\n                .map(function(d) { return d[0]; })\n                .sort(axisIds.idSort);\n\n            ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.xaxis._id);\n            ensureSingleAndAddDatum(plotinfo.gridlayer, 'g', plotinfo.yaxis._id);\n            plotinfo.gridlayer.selectAll('g')\n                .map(function(d) { return d[0]; })\n                .sort(axisIds.idSort);\n        }\n\n        plotinfo.xlines\n            .style('fill', 'none')\n            .classed('crisp', true);\n\n        plotinfo.ylines\n            .style('fill', 'none')\n            .classed('crisp', true);\n    }\n}\n\nfunction purgeSubplotLayers(layers, fullLayout) {\n    if(!layers) return;\n\n    var overlayIdsToRemove = {};\n\n    layers.each(function(d) {\n        var id = d[0];\n        var plotgroup = d3.select(this);\n\n        plotgroup.remove();\n        removeSubplotExtras(id, fullLayout);\n        overlayIdsToRemove[id] = true;\n\n        // do not remove individual axis <clipPath>s here\n        // as other subplots may need them\n    });\n\n    // must remove overlaid subplot trace layers 'manually'\n\n    for(var k in fullLayout._plots) {\n        var subplotInfo = fullLayout._plots[k];\n        var overlays = subplotInfo.overlays || [];\n\n        for(var j = 0; j < overlays.length; j++) {\n            var overlayInfo = overlays[j];\n\n            if(overlayIdsToRemove[overlayInfo.id]) {\n                overlayInfo.plot.selectAll('.trace').remove();\n            }\n        }\n    }\n}\n\nfunction removeSubplotExtras(subplotId, fullLayout) {\n    fullLayout._draggers.selectAll('g.' + subplotId).remove();\n    fullLayout._defs.select('#clip' + fullLayout._uid + subplotId + 'plot').remove();\n}\n\nexports.toSVG = function(gd) {\n    var imageRoot = gd._fullLayout._glimages;\n    var root = d3.select(gd).selectAll('.svg-container');\n    var canvases = root.filter(function(d, i) {return i === root.size() - 1;})\n        .selectAll('.gl-canvas-context, .gl-canvas-focus');\n\n    function canvasToImage() {\n        var canvas = this;\n        var imageData = canvas.toDataURL('image/png');\n        var image = imageRoot.append('svg:image');\n\n        image.attr({\n            xmlns: xmlnsNamespaces.svg,\n            'xlink:href': imageData,\n            preserveAspectRatio: 'none',\n            x: 0,\n            y: 0,\n            width: canvas.style.width,\n            height: canvas.style.height\n        });\n    }\n\n    canvases.each(canvasToImage);\n};\n\nexports.updateFx = require('./graph_interact').updateFx;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}