{"ast":null,"code":"'use strict';\n\nvar Registry = require('../../registry');\nvar constants = require('./constants');\n\n// convert between axis names (xaxis, xaxis2, etc, elements of gd.layout)\n// and axis id's (x, x2, etc). Would probably have ditched 'xaxis'\n// completely in favor of just 'x' if it weren't ingrained in the API etc.\nexports.id2name = function id2name(id) {\n  if (typeof id !== 'string' || !id.match(constants.AX_ID_PATTERN)) return;\n  var axNum = id.split(' ')[0].substr(1);\n  if (axNum === '1') axNum = '';\n  return id.charAt(0) + 'axis' + axNum;\n};\nexports.name2id = function name2id(name) {\n  if (!name.match(constants.AX_NAME_PATTERN)) return;\n  var axNum = name.substr(5);\n  if (axNum === '1') axNum = '';\n  return name.charAt(0) + axNum;\n};\n\n/*\n * Cleans up the number of an axis, e.g., 'x002'->'x2', 'x0'->'x', 'x1' -> 'x',\n * etc.\n * If domainId is true, then id could be a domain reference and if it is, the\n * ' domain' part is kept at the end of the axis ID string.\n */\nexports.cleanId = function cleanId(id, axLetter, domainId) {\n  var domainTest = /( domain)$/.test(id);\n  if (typeof id !== 'string' || !id.match(constants.AX_ID_PATTERN)) return;\n  if (axLetter && id.charAt(0) !== axLetter) return;\n  if (domainTest && !domainId) return;\n  var axNum = id.split(' ')[0].substr(1).replace(/^0+/, '');\n  if (axNum === '1') axNum = '';\n  return id.charAt(0) + axNum + (domainTest && domainId ? ' domain' : '');\n};\n\n// get all axis objects, as restricted in listNames\nexports.list = function (gd, axLetter, only2d) {\n  var fullLayout = gd._fullLayout;\n  if (!fullLayout) return [];\n  var idList = exports.listIds(gd, axLetter);\n  var out = new Array(idList.length);\n  var i;\n  for (i = 0; i < idList.length; i++) {\n    var idi = idList[i];\n    out[i] = fullLayout[idi.charAt(0) + 'axis' + idi.substr(1)];\n  }\n  if (!only2d) {\n    var sceneIds3D = fullLayout._subplots.gl3d || [];\n    for (i = 0; i < sceneIds3D.length; i++) {\n      var scene = fullLayout[sceneIds3D[i]];\n      if (axLetter) out.push(scene[axLetter + 'axis']);else out.push(scene.xaxis, scene.yaxis, scene.zaxis);\n    }\n  }\n  return out;\n};\n\n// get all axis ids, optionally restricted by letter\n// this only makes sense for 2d axes\nexports.listIds = function (gd, axLetter) {\n  var fullLayout = gd._fullLayout;\n  if (!fullLayout) return [];\n  var subplotLists = fullLayout._subplots;\n  if (axLetter) return subplotLists[axLetter + 'axis'];\n  return subplotLists.xaxis.concat(subplotLists.yaxis);\n};\n\n// get an axis object from its id 'x','x2' etc\n// optionally, id can be a subplot (ie 'x2y3') and type gets x or y from it\nexports.getFromId = function (gd, id, type) {\n  var fullLayout = gd._fullLayout;\n  // remove \"domain\" suffix\n  id = id === undefined || typeof id !== 'string' ? id : id.replace(' domain', '');\n  if (type === 'x') id = id.replace(/y[0-9]*/, '');else if (type === 'y') id = id.replace(/x[0-9]*/, '');\n  return fullLayout[exports.id2name(id)];\n};\n\n// get an axis object of specified type from the containing trace\nexports.getFromTrace = function (gd, fullTrace, type) {\n  var fullLayout = gd._fullLayout;\n  var ax = null;\n  if (Registry.traceIs(fullTrace, 'gl3d')) {\n    var scene = fullTrace.scene;\n    if (scene.substr(0, 5) === 'scene') {\n      ax = fullLayout[scene][type + 'axis'];\n    }\n  } else {\n    ax = exports.getFromId(gd, fullTrace[type + 'axis'] || type);\n  }\n  return ax;\n};\n\n// sort x, x2, x10, y, y2, y10...\nexports.idSort = function (id1, id2) {\n  var letter1 = id1.charAt(0);\n  var letter2 = id2.charAt(0);\n  if (letter1 !== letter2) return letter1 > letter2 ? 1 : -1;\n  return +(id1.substr(1) || 1) - +(id2.substr(1) || 1);\n};\n\n/*\n * An axis reference (e.g., the contents at the 'xref' key of an object) might\n * have extra information appended. Extract the axis ID only.\n *\n * ar: the axis reference string\n *\n */\nexports.ref2id = function (ar) {\n  // This assumes ar has been coerced via coerceRef, and uses the shortcut of\n  // checking if the first letter matches [xyz] to determine if it should\n  // return the axis ID. Otherwise it returns false.\n  return /^[xyz]/.test(ar) ? ar.split(' ')[0] : false;\n};\nfunction isFound(axId, list) {\n  if (list && list.length) {\n    for (var i = 0; i < list.length; i++) {\n      if (list[i][axId]) return true;\n    }\n  }\n  return false;\n}\nexports.isLinked = function (fullLayout, axId) {\n  return isFound(axId, fullLayout._axisMatchGroups) || isFound(axId, fullLayout._axisConstraintGroups);\n};","map":{"version":3,"names":["Registry","require","constants","exports","id2name","id","match","AX_ID_PATTERN","axNum","split","substr","charAt","name2id","name","AX_NAME_PATTERN","cleanId","axLetter","domainId","domainTest","test","replace","list","gd","only2d","fullLayout","_fullLayout","idList","listIds","out","Array","length","i","idi","sceneIds3D","_subplots","gl3d","scene","push","xaxis","yaxis","zaxis","subplotLists","concat","getFromId","type","undefined","getFromTrace","fullTrace","ax","traceIs","idSort","id1","id2","letter1","letter2","ref2id","ar","isFound","axId","isLinked","_axisMatchGroups","_axisConstraintGroups"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/plots/cartesian/axis_ids.js"],"sourcesContent":["'use strict';\n\nvar Registry = require('../../registry');\n\nvar constants = require('./constants');\n\n\n// convert between axis names (xaxis, xaxis2, etc, elements of gd.layout)\n// and axis id's (x, x2, etc). Would probably have ditched 'xaxis'\n// completely in favor of just 'x' if it weren't ingrained in the API etc.\nexports.id2name = function id2name(id) {\n    if(typeof id !== 'string' || !id.match(constants.AX_ID_PATTERN)) return;\n    var axNum = id.split(' ')[0].substr(1);\n    if(axNum === '1') axNum = '';\n    return id.charAt(0) + 'axis' + axNum;\n};\n\nexports.name2id = function name2id(name) {\n    if(!name.match(constants.AX_NAME_PATTERN)) return;\n    var axNum = name.substr(5);\n    if(axNum === '1') axNum = '';\n    return name.charAt(0) + axNum;\n};\n\n/*\n * Cleans up the number of an axis, e.g., 'x002'->'x2', 'x0'->'x', 'x1' -> 'x',\n * etc.\n * If domainId is true, then id could be a domain reference and if it is, the\n * ' domain' part is kept at the end of the axis ID string.\n */\nexports.cleanId = function cleanId(id, axLetter, domainId) {\n    var domainTest = /( domain)$/.test(id);\n    if(typeof id !== 'string' || !id.match(constants.AX_ID_PATTERN)) return;\n    if(axLetter && id.charAt(0) !== axLetter) return;\n    if(domainTest && (!domainId)) return;\n    var axNum = id.split(' ')[0].substr(1).replace(/^0+/, '');\n    if(axNum === '1') axNum = '';\n    return id.charAt(0) + axNum + (domainTest && domainId ? ' domain' : '');\n};\n\n// get all axis objects, as restricted in listNames\nexports.list = function(gd, axLetter, only2d) {\n    var fullLayout = gd._fullLayout;\n    if(!fullLayout) return [];\n\n    var idList = exports.listIds(gd, axLetter);\n    var out = new Array(idList.length);\n    var i;\n\n    for(i = 0; i < idList.length; i++) {\n        var idi = idList[i];\n        out[i] = fullLayout[idi.charAt(0) + 'axis' + idi.substr(1)];\n    }\n\n    if(!only2d) {\n        var sceneIds3D = fullLayout._subplots.gl3d || [];\n\n        for(i = 0; i < sceneIds3D.length; i++) {\n            var scene = fullLayout[sceneIds3D[i]];\n\n            if(axLetter) out.push(scene[axLetter + 'axis']);\n            else out.push(scene.xaxis, scene.yaxis, scene.zaxis);\n        }\n    }\n\n    return out;\n};\n\n// get all axis ids, optionally restricted by letter\n// this only makes sense for 2d axes\nexports.listIds = function(gd, axLetter) {\n    var fullLayout = gd._fullLayout;\n    if(!fullLayout) return [];\n\n    var subplotLists = fullLayout._subplots;\n    if(axLetter) return subplotLists[axLetter + 'axis'];\n    return subplotLists.xaxis.concat(subplotLists.yaxis);\n};\n\n// get an axis object from its id 'x','x2' etc\n// optionally, id can be a subplot (ie 'x2y3') and type gets x or y from it\nexports.getFromId = function(gd, id, type) {\n    var fullLayout = gd._fullLayout;\n    // remove \"domain\" suffix\n    id = ((id === undefined) || (typeof(id) !== 'string')) ? id : id.replace(' domain', '');\n\n    if(type === 'x') id = id.replace(/y[0-9]*/, '');\n    else if(type === 'y') id = id.replace(/x[0-9]*/, '');\n\n    return fullLayout[exports.id2name(id)];\n};\n\n// get an axis object of specified type from the containing trace\nexports.getFromTrace = function(gd, fullTrace, type) {\n    var fullLayout = gd._fullLayout;\n    var ax = null;\n\n    if(Registry.traceIs(fullTrace, 'gl3d')) {\n        var scene = fullTrace.scene;\n        if(scene.substr(0, 5) === 'scene') {\n            ax = fullLayout[scene][type + 'axis'];\n        }\n    } else {\n        ax = exports.getFromId(gd, fullTrace[type + 'axis'] || type);\n    }\n\n    return ax;\n};\n\n// sort x, x2, x10, y, y2, y10...\nexports.idSort = function(id1, id2) {\n    var letter1 = id1.charAt(0);\n    var letter2 = id2.charAt(0);\n    if(letter1 !== letter2) return letter1 > letter2 ? 1 : -1;\n    return +(id1.substr(1) || 1) - +(id2.substr(1) || 1);\n};\n\n/*\n * An axis reference (e.g., the contents at the 'xref' key of an object) might\n * have extra information appended. Extract the axis ID only.\n *\n * ar: the axis reference string\n *\n */\nexports.ref2id = function(ar) {\n    // This assumes ar has been coerced via coerceRef, and uses the shortcut of\n    // checking if the first letter matches [xyz] to determine if it should\n    // return the axis ID. Otherwise it returns false.\n    return (/^[xyz]/.test(ar)) ? ar.split(' ')[0] : false;\n};\n\nfunction isFound(axId, list) {\n    if(list && list.length) {\n        for(var i = 0; i < list.length; i++) {\n            if(list[i][axId]) return true;\n        }\n    }\n    return false;\n}\n\nexports.isLinked = function(fullLayout, axId) {\n    return (\n        isFound(axId, fullLayout._axisMatchGroups) ||\n        isFound(axId, fullLayout._axisConstraintGroups)\n    );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}