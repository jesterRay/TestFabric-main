{"ast":null,"code":"export function concatUrlPath(url,name,id){// Clean up the product name and limit it to the first four words\nconst formattedName=name.toLowerCase().replace(/[^\\w\\s-]/g,'')// Remove invalid characters except spaces and hyphens\n.split(/\\s+/)// Split the name into words\n.slice(0,4)// Take the first four words\n.join('-');// Join the words with hyphens\n// Concatenate the name and id\nconst fullPath=\"\".concat(formattedName,\"-\").concat(id);return\"/\".concat(url,\"/\").concat(fullPath);}export function extractIdFromUrlPath(path){// Match the last number in the URL after a hyphen or standalone\nconst segments=path.split('-');// Split the string by '-'\nconst lastSegment=segments.pop();// Get the last segment\nif(!isNaN(lastSegment)){return lastSegment;}return null;}","map":{"version":3,"names":["concatUrlPath","url","name","id","formattedName","toLowerCase","replace","split","slice","join","fullPath","concat","extractIdFromUrlPath","path","segments","lastSegment","pop","isNaN"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/src/helpers/concatUrlPath.js"],"sourcesContent":["export function concatUrlPath(url, name, id) {\r\n  // Clean up the product name and limit it to the first four words\r\n  const formattedName = name\r\n      .toLowerCase()\r\n      .replace(/[^\\w\\s-]/g, '') // Remove invalid characters except spaces and hyphens\r\n      .split(/\\s+/) // Split the name into words\r\n      .slice(0, 4) // Take the first four words\r\n      .join('-'); // Join the words with hyphens\r\n\r\n  // Concatenate the name and id\r\n  const fullPath = `${formattedName}-${id}`;\r\n  return `/${url}/${fullPath}`;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function extractIdFromUrlPath(path) {\r\n  // Match the last number in the URL after a hyphen or standalone\r\n  const segments = path.split('-'); // Split the string by '-'\r\n  const lastSegment = segments.pop(); // Get the last segment\r\n\r\n  if (!isNaN(lastSegment)) {\r\n    return lastSegment;\r\n  }\r\n  return null;\r\n}\r\n\r\n\r\n"],"mappings":"AAAA,MAAO,SAAS,CAAAA,aAAaA,CAACC,GAAG,CAAEC,IAAI,CAAEC,EAAE,CAAE,CAC3C;AACA,KAAM,CAAAC,aAAa,CAAGF,IAAI,CACrBG,WAAW,CAAC,CAAC,CACbC,OAAO,CAAC,WAAW,CAAE,EAAE,CAAE;AAAA,CACzBC,KAAK,CAAC,KAAK,CAAE;AAAA,CACbC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAE;AAAA,CACZC,IAAI,CAAC,GAAG,CAAC,CAAE;AAEhB;AACA,KAAM,CAAAC,QAAQ,IAAAC,MAAA,CAAMP,aAAa,MAAAO,MAAA,CAAIR,EAAE,CAAE,CACzC,UAAAQ,MAAA,CAAWV,GAAG,MAAAU,MAAA,CAAID,QAAQ,EAC5B,CAMA,MAAO,SAAS,CAAAE,oBAAoBA,CAACC,IAAI,CAAE,CACzC;AACA,KAAM,CAAAC,QAAQ,CAAGD,IAAI,CAACN,KAAK,CAAC,GAAG,CAAC,CAAE;AAClC,KAAM,CAAAQ,WAAW,CAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC,CAAE;AAEpC,GAAI,CAACC,KAAK,CAACF,WAAW,CAAC,CAAE,CACvB,MAAO,CAAAA,WAAW,CACpB,CACA,MAAO,KAAI,CACb","ignoreList":[]},"metadata":{},"sourceType":"module"}