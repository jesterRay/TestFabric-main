{"ast":null,"code":"/*\n * @copyright 2016 Sean Connelly (@voidqk), http://syntheti.cc\n * @license MIT\n * @preserve Project Home: https://github.com/voidqk/polybooljs\n */\n\nvar BuildLog = require('./lib/build-log');\nvar Epsilon = require('./lib/epsilon');\nvar Intersecter = require('./lib/intersecter');\nvar SegmentChainer = require('./lib/segment-chainer');\nvar SegmentSelector = require('./lib/segment-selector');\nvar GeoJSON = require('./lib/geojson');\nvar buildLog = false;\nvar epsilon = Epsilon();\nvar PolyBool;\nPolyBool = {\n  // getter/setter for buildLog\n  buildLog: function (bl) {\n    if (bl === true) buildLog = BuildLog();else if (bl === false) buildLog = false;\n    return buildLog === false ? false : buildLog.list;\n  },\n  // getter/setter for epsilon\n  epsilon: function (v) {\n    return epsilon.epsilon(v);\n  },\n  // core API\n  segments: function (poly) {\n    var i = Intersecter(true, epsilon, buildLog);\n    poly.regions.forEach(i.addRegion);\n    return {\n      segments: i.calculate(poly.inverted),\n      inverted: poly.inverted\n    };\n  },\n  combine: function (segments1, segments2) {\n    var i3 = Intersecter(false, epsilon, buildLog);\n    return {\n      combined: i3.calculate(segments1.segments, segments1.inverted, segments2.segments, segments2.inverted),\n      inverted1: segments1.inverted,\n      inverted2: segments2.inverted\n    };\n  },\n  selectUnion: function (combined) {\n    return {\n      segments: SegmentSelector.union(combined.combined, buildLog),\n      inverted: combined.inverted1 || combined.inverted2\n    };\n  },\n  selectIntersect: function (combined) {\n    return {\n      segments: SegmentSelector.intersect(combined.combined, buildLog),\n      inverted: combined.inverted1 && combined.inverted2\n    };\n  },\n  selectDifference: function (combined) {\n    return {\n      segments: SegmentSelector.difference(combined.combined, buildLog),\n      inverted: combined.inverted1 && !combined.inverted2\n    };\n  },\n  selectDifferenceRev: function (combined) {\n    return {\n      segments: SegmentSelector.differenceRev(combined.combined, buildLog),\n      inverted: !combined.inverted1 && combined.inverted2\n    };\n  },\n  selectXor: function (combined) {\n    return {\n      segments: SegmentSelector.xor(combined.combined, buildLog),\n      inverted: combined.inverted1 !== combined.inverted2\n    };\n  },\n  polygon: function (segments) {\n    return {\n      regions: SegmentChainer(segments.segments, epsilon, buildLog),\n      inverted: segments.inverted\n    };\n  },\n  // GeoJSON converters\n  polygonFromGeoJSON: function (geojson) {\n    return GeoJSON.toPolygon(PolyBool, geojson);\n  },\n  polygonToGeoJSON: function (poly) {\n    return GeoJSON.fromPolygon(PolyBool, epsilon, poly);\n  },\n  // helper functions for common operations\n  union: function (poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectUnion);\n  },\n  intersect: function (poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectIntersect);\n  },\n  difference: function (poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectDifference);\n  },\n  differenceRev: function (poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectDifferenceRev);\n  },\n  xor: function (poly1, poly2) {\n    return operate(poly1, poly2, PolyBool.selectXor);\n  }\n};\nfunction operate(poly1, poly2, selector) {\n  var seg1 = PolyBool.segments(poly1);\n  var seg2 = PolyBool.segments(poly2);\n  var comb = PolyBool.combine(seg1, seg2);\n  var seg3 = selector(comb);\n  return PolyBool.polygon(seg3);\n}\nif (typeof window === 'object') window.PolyBool = PolyBool;\nmodule.exports = PolyBool;","map":{"version":3,"names":["BuildLog","require","Epsilon","Intersecter","SegmentChainer","SegmentSelector","GeoJSON","buildLog","epsilon","PolyBool","bl","list","v","segments","poly","i","regions","forEach","addRegion","calculate","inverted","combine","segments1","segments2","i3","combined","inverted1","inverted2","selectUnion","union","selectIntersect","intersect","selectDifference","difference","selectDifferenceRev","differenceRev","selectXor","xor","polygon","polygonFromGeoJSON","geojson","toPolygon","polygonToGeoJSON","fromPolygon","poly1","poly2","operate","selector","seg1","seg2","comb","seg3","window","module","exports"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/polybooljs/index.js"],"sourcesContent":["/*\n * @copyright 2016 Sean Connelly (@voidqk), http://syntheti.cc\n * @license MIT\n * @preserve Project Home: https://github.com/voidqk/polybooljs\n */\n\nvar BuildLog = require('./lib/build-log');\nvar Epsilon = require('./lib/epsilon');\nvar Intersecter = require('./lib/intersecter');\nvar SegmentChainer = require('./lib/segment-chainer');\nvar SegmentSelector = require('./lib/segment-selector');\nvar GeoJSON = require('./lib/geojson');\n\nvar buildLog = false;\nvar epsilon = Epsilon();\n\nvar PolyBool;\nPolyBool = {\n\t// getter/setter for buildLog\n\tbuildLog: function(bl){\n\t\tif (bl === true)\n\t\t\tbuildLog = BuildLog();\n\t\telse if (bl === false)\n\t\t\tbuildLog = false;\n\t\treturn buildLog === false ? false : buildLog.list;\n\t},\n\t// getter/setter for epsilon\n\tepsilon: function(v){\n\t\treturn epsilon.epsilon(v);\n\t},\n\n\t// core API\n\tsegments: function(poly){\n\t\tvar i = Intersecter(true, epsilon, buildLog);\n\t\tpoly.regions.forEach(i.addRegion);\n\t\treturn {\n\t\t\tsegments: i.calculate(poly.inverted),\n\t\t\tinverted: poly.inverted\n\t\t};\n\t},\n\tcombine: function(segments1, segments2){\n\t\tvar i3 = Intersecter(false, epsilon, buildLog);\n\t\treturn {\n\t\t\tcombined: i3.calculate(\n\t\t\t\tsegments1.segments, segments1.inverted,\n\t\t\t\tsegments2.segments, segments2.inverted\n\t\t\t),\n\t\t\tinverted1: segments1.inverted,\n\t\t\tinverted2: segments2.inverted\n\t\t};\n\t},\n\tselectUnion: function(combined){\n\t\treturn {\n\t\t\tsegments: SegmentSelector.union(combined.combined, buildLog),\n\t\t\tinverted: combined.inverted1 || combined.inverted2\n\t\t}\n\t},\n\tselectIntersect: function(combined){\n\t\treturn {\n\t\t\tsegments: SegmentSelector.intersect(combined.combined, buildLog),\n\t\t\tinverted: combined.inverted1 && combined.inverted2\n\t\t}\n\t},\n\tselectDifference: function(combined){\n\t\treturn {\n\t\t\tsegments: SegmentSelector.difference(combined.combined, buildLog),\n\t\t\tinverted: combined.inverted1 && !combined.inverted2\n\t\t}\n\t},\n\tselectDifferenceRev: function(combined){\n\t\treturn {\n\t\t\tsegments: SegmentSelector.differenceRev(combined.combined, buildLog),\n\t\t\tinverted: !combined.inverted1 && combined.inverted2\n\t\t}\n\t},\n\tselectXor: function(combined){\n\t\treturn {\n\t\t\tsegments: SegmentSelector.xor(combined.combined, buildLog),\n\t\t\tinverted: combined.inverted1 !== combined.inverted2\n\t\t}\n\t},\n\tpolygon: function(segments){\n\t\treturn {\n\t\t\tregions: SegmentChainer(segments.segments, epsilon, buildLog),\n\t\t\tinverted: segments.inverted\n\t\t};\n\t},\n\n\t// GeoJSON converters\n\tpolygonFromGeoJSON: function(geojson){\n\t\treturn GeoJSON.toPolygon(PolyBool, geojson);\n\t},\n\tpolygonToGeoJSON: function(poly){\n\t\treturn GeoJSON.fromPolygon(PolyBool, epsilon, poly);\n\t},\n\n\t// helper functions for common operations\n\tunion: function(poly1, poly2){\n\t\treturn operate(poly1, poly2, PolyBool.selectUnion);\n\t},\n\tintersect: function(poly1, poly2){\n\t\treturn operate(poly1, poly2, PolyBool.selectIntersect);\n\t},\n\tdifference: function(poly1, poly2){\n\t\treturn operate(poly1, poly2, PolyBool.selectDifference);\n\t},\n\tdifferenceRev: function(poly1, poly2){\n\t\treturn operate(poly1, poly2, PolyBool.selectDifferenceRev);\n\t},\n\txor: function(poly1, poly2){\n\t\treturn operate(poly1, poly2, PolyBool.selectXor);\n\t}\n};\n\nfunction operate(poly1, poly2, selector){\n\tvar seg1 = PolyBool.segments(poly1);\n\tvar seg2 = PolyBool.segments(poly2);\n\tvar comb = PolyBool.combine(seg1, seg2);\n\tvar seg3 = selector(comb);\n\treturn PolyBool.polygon(seg3);\n}\n\nif (typeof window === 'object')\n\twindow.PolyBool = PolyBool;\n\nmodule.exports = PolyBool;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}