{"ast":null,"code":"'use strict';\n\nvar timeFormat = require('d3-time-format').timeFormat;\nvar isNumeric = require('fast-isnumeric');\nvar Loggers = require('./loggers');\nvar mod = require('./mod').mod;\nvar constants = require('../constants/numerical');\nvar BADNUM = constants.BADNUM;\nvar ONEDAY = constants.ONEDAY;\nvar ONEHOUR = constants.ONEHOUR;\nvar ONEMIN = constants.ONEMIN;\nvar ONESEC = constants.ONESEC;\nvar EPOCHJD = constants.EPOCHJD;\nvar Registry = require('../registry');\nvar utcFormat = require('d3-time-format').utcFormat;\nvar DATETIME_REGEXP = /^\\s*(-?\\d\\d\\d\\d|\\d\\d)(-(\\d?\\d)(-(\\d?\\d)([ Tt]([01]?\\d|2[0-3])(:([0-5]\\d)(:([0-5]\\d(\\.\\d+)?))?(Z|z|[+\\-]\\d\\d(:?\\d\\d)?)?)?)?)?)?\\s*$/m;\n// special regex for chinese calendars to support yyyy-mmi-dd etc for intercalary months\nvar DATETIME_REGEXP_CN = /^\\s*(-?\\d\\d\\d\\d|\\d\\d)(-(\\d?\\di?)(-(\\d?\\d)([ Tt]([01]?\\d|2[0-3])(:([0-5]\\d)(:([0-5]\\d(\\.\\d+)?))?(Z|z|[+\\-]\\d\\d(:?\\d\\d)?)?)?)?)?)?\\s*$/m;\n\n// for 2-digit years, the first year we map them onto\nvar YFIRST = new Date().getFullYear() - 70;\nfunction isWorldCalendar(calendar) {\n  return calendar && Registry.componentsRegistry.calendars && typeof calendar === 'string' && calendar !== 'gregorian';\n}\n\n/*\n * dateTick0: get the canonical tick for this calendar\n *\n * integer weekdays : Saturday: 0, Sunday: 1, Monday: 2, etc.\n */\nexports.dateTick0 = function (calendar, dayOfWeek) {\n  var tick0 = _dateTick0(calendar, !!dayOfWeek);\n  if (dayOfWeek < 2) return tick0;\n  var v = exports.dateTime2ms(tick0, calendar);\n  v += ONEDAY * (dayOfWeek - 1); // shift Sunday to Monday, etc.\n  return exports.ms2DateTime(v, 0, calendar);\n};\n\n/*\n * _dateTick0: get the canonical tick for this calendar\n *\n * bool sunday is for week ticks, shift it to a Sunday.\n */\nfunction _dateTick0(calendar, sunday) {\n  if (isWorldCalendar(calendar)) {\n    return sunday ? Registry.getComponentMethod('calendars', 'CANONICAL_SUNDAY')[calendar] : Registry.getComponentMethod('calendars', 'CANONICAL_TICK')[calendar];\n  } else {\n    return sunday ? '2000-01-02' : '2000-01-01';\n  }\n}\n\n/*\n * dfltRange: for each calendar, give a valid default range\n */\nexports.dfltRange = function (calendar) {\n  if (isWorldCalendar(calendar)) {\n    return Registry.getComponentMethod('calendars', 'DFLTRANGE')[calendar];\n  } else {\n    return ['2000-01-01', '2001-01-01'];\n  }\n};\n\n// is an object a javascript date?\nexports.isJSDate = function (v) {\n  return typeof v === 'object' && v !== null && typeof v.getTime === 'function';\n};\n\n// The absolute limits of our date-time system\n// This is a little weird: we use MIN_MS and MAX_MS in dateTime2ms\n// but we use dateTime2ms to calculate them (after defining it!)\nvar MIN_MS, MAX_MS;\n\n/**\n * dateTime2ms - turn a date object or string s into milliseconds\n * (relative to 1970-01-01, per javascript standard)\n * optional calendar (string) to use a non-gregorian calendar\n *\n * Returns BADNUM if it doesn't find a date\n *\n * strings should have the form:\n *\n *    -?YYYY-mm-dd<sep>HH:MM:SS.sss<tzInfo>?\n *\n * <sep>: space (our normal standard) or T or t (ISO-8601)\n * <tzInfo>: Z, z, [+\\-]HH:?MM or [+\\-]HH and we THROW IT AWAY\n * this format comes from https://tools.ietf.org/html/rfc3339#section-5.6\n * and 4.2.5.1 Difference between local time and UTC of day (ISO-8601)\n * but we allow it even with a space as the separator\n *\n * May truncate after any full field, and sss can be any length\n * even >3 digits, though javascript dates truncate to milliseconds,\n * we keep as much as javascript numeric precision can hold, but we only\n * report back up to 100 microsecond precision, because most dates support\n * this precision (close to 1970 support more, very far away support less)\n *\n * Expanded to support negative years to -9999 but you must always\n * give 4 digits, except for 2-digit positive years which we assume are\n * near the present time.\n * Note that we follow ISO 8601:2004: there *is* a year 0, which\n * is 1BC/BCE, and -1===2BC etc.\n *\n * World calendars: not all of these *have* agreed extensions to this full range,\n * if you have another calendar system but want a date range outside its validity,\n * you can use a gregorian date string prefixed with 'G' or 'g'.\n *\n * Where to cut off 2-digit years between 1900s and 2000s?\n * from https://docs.microsoft.com/en-us/office/troubleshoot/excel/two-digit-year-numbers#the-2029-rule:\n *   1930-2029 (the most retro of all...)\n * but in my mac chrome from eg. d=new Date(Date.parse('8/19/50')):\n *   1950-2049\n * by Java, from http://stackoverflow.com/questions/2024273/:\n *   now-80 - now+19\n * or FileMaker Pro, from\n *      https://fmhelp.filemaker.com/help/18/fmp/en/index.html#page/FMP_Help/dates-with-two-digit-years.html:\n *   now-70 - now+29\n * but python strptime etc, via\n *      http://docs.python.org/py3k/library/time.html:\n *   1969-2068 (super forward-looking, but static, not sliding!)\n *\n * lets go with now-70 to now+29, and if anyone runs into this problem\n * they can learn the hard way not to use 2-digit years, as no choice we\n * make now will cover all possibilities. mostly this will all be taken\n * care of in initial parsing, should only be an issue for hand-entered data\n * currently (2016) this range is:\n *   1946-2045\n */\nexports.dateTime2ms = function (s, calendar) {\n  // first check if s is a date object\n  if (exports.isJSDate(s)) {\n    // Convert to the UTC milliseconds that give the same\n    // hours as this date has in the local timezone\n    var tzOffset = s.getTimezoneOffset() * ONEMIN;\n    var offsetTweak = (s.getUTCMinutes() - s.getMinutes()) * ONEMIN + (s.getUTCSeconds() - s.getSeconds()) * ONESEC + (s.getUTCMilliseconds() - s.getMilliseconds());\n    if (offsetTweak) {\n      var comb = 3 * ONEMIN;\n      tzOffset = tzOffset - comb / 2 + mod(offsetTweak - tzOffset + comb / 2, comb);\n    }\n    s = Number(s) - tzOffset;\n    if (s >= MIN_MS && s <= MAX_MS) return s;\n    return BADNUM;\n  }\n  // otherwise only accept strings and numbers\n  if (typeof s !== 'string' && typeof s !== 'number') return BADNUM;\n  s = String(s);\n  var isWorld = isWorldCalendar(calendar);\n\n  // to handle out-of-range dates in international calendars, accept\n  // 'G' as a prefix to force the built-in gregorian calendar.\n  var s0 = s.charAt(0);\n  if (isWorld && (s0 === 'G' || s0 === 'g')) {\n    s = s.substr(1);\n    calendar = '';\n  }\n  var isChinese = isWorld && calendar.substr(0, 7) === 'chinese';\n  var match = s.match(isChinese ? DATETIME_REGEXP_CN : DATETIME_REGEXP);\n  if (!match) return BADNUM;\n  var y = match[1];\n  var m = match[3] || '1';\n  var d = Number(match[5] || 1);\n  var H = Number(match[7] || 0);\n  var M = Number(match[9] || 0);\n  var S = Number(match[11] || 0);\n  if (isWorld) {\n    // disallow 2-digit years for world calendars\n    if (y.length === 2) return BADNUM;\n    y = Number(y);\n    var cDate;\n    try {\n      var calInstance = Registry.getComponentMethod('calendars', 'getCal')(calendar);\n      if (isChinese) {\n        var isIntercalary = m.charAt(m.length - 1) === 'i';\n        m = parseInt(m, 10);\n        cDate = calInstance.newDate(y, calInstance.toMonthIndex(y, m, isIntercalary), d);\n      } else {\n        cDate = calInstance.newDate(y, Number(m), d);\n      }\n    } catch (e) {\n      return BADNUM;\n    } // Invalid ... date\n\n    if (!cDate) return BADNUM;\n    return (cDate.toJD() - EPOCHJD) * ONEDAY + H * ONEHOUR + M * ONEMIN + S * ONESEC;\n  }\n  if (y.length === 2) {\n    y = (Number(y) + 2000 - YFIRST) % 100 + YFIRST;\n  } else y = Number(y);\n\n  // new Date uses months from 0; subtract 1 here just so we\n  // don't have to do it again during the validity test below\n  m -= 1;\n\n  // javascript takes new Date(0..99,m,d) to mean 1900-1999, so\n  // to support years 0-99 we need to use setFullYear explicitly\n  // Note that 2000 is a leap year.\n  var date = new Date(Date.UTC(2000, m, d, H, M));\n  date.setUTCFullYear(y);\n  if (date.getUTCMonth() !== m) return BADNUM;\n  if (date.getUTCDate() !== d) return BADNUM;\n  return date.getTime() + S * ONESEC;\n};\nMIN_MS = exports.MIN_MS = exports.dateTime2ms('-9999');\nMAX_MS = exports.MAX_MS = exports.dateTime2ms('9999-12-31 23:59:59.9999');\n\n// is string s a date? (see above)\nexports.isDateTime = function (s, calendar) {\n  return exports.dateTime2ms(s, calendar) !== BADNUM;\n};\n\n// pad a number with zeroes, to given # of digits before the decimal point\nfunction lpad(val, digits) {\n  return String(val + Math.pow(10, digits)).substr(1);\n}\n\n/**\n * Turn ms into string of the form YYYY-mm-dd HH:MM:SS.ssss\n * Crop any trailing zeros in time, except never stop right after hours\n * (we could choose to crop '-01' from date too but for now we always\n * show the whole date)\n * Optional range r is the data range that applies, also in ms.\n * If rng is big, the later parts of time will be omitted\n */\nvar NINETYDAYS = 90 * ONEDAY;\nvar THREEHOURS = 3 * ONEHOUR;\nvar FIVEMIN = 5 * ONEMIN;\nexports.ms2DateTime = function (ms, r, calendar) {\n  if (typeof ms !== 'number' || !(ms >= MIN_MS && ms <= MAX_MS)) return BADNUM;\n  if (!r) r = 0;\n  var msecTenths = Math.floor(mod(ms + 0.05, 1) * 10);\n  var msRounded = Math.round(ms - msecTenths / 10);\n  var dateStr, h, m, s, msec10, d;\n  if (isWorldCalendar(calendar)) {\n    var dateJD = Math.floor(msRounded / ONEDAY) + EPOCHJD;\n    var timeMs = Math.floor(mod(ms, ONEDAY));\n    try {\n      dateStr = Registry.getComponentMethod('calendars', 'getCal')(calendar).fromJD(dateJD).formatDate('yyyy-mm-dd');\n    } catch (e) {\n      // invalid date in this calendar - fall back to Gyyyy-mm-dd\n      dateStr = utcFormat('G%Y-%m-%d')(new Date(msRounded));\n    }\n\n    // yyyy does NOT guarantee 4-digit years. YYYY mostly does, but does\n    // other things for a few calendars, so we can't trust it. Just pad\n    // it manually (after the '-' if there is one)\n    if (dateStr.charAt(0) === '-') {\n      while (dateStr.length < 11) dateStr = '-0' + dateStr.substr(1);\n    } else {\n      while (dateStr.length < 10) dateStr = '0' + dateStr;\n    }\n\n    // TODO: if this is faster, we could use this block for extracting\n    // the time components of regular gregorian too\n    h = r < NINETYDAYS ? Math.floor(timeMs / ONEHOUR) : 0;\n    m = r < NINETYDAYS ? Math.floor(timeMs % ONEHOUR / ONEMIN) : 0;\n    s = r < THREEHOURS ? Math.floor(timeMs % ONEMIN / ONESEC) : 0;\n    msec10 = r < FIVEMIN ? timeMs % ONESEC * 10 + msecTenths : 0;\n  } else {\n    d = new Date(msRounded);\n    dateStr = utcFormat('%Y-%m-%d')(d);\n\n    // <90 days: add hours and minutes - never *only* add hours\n    h = r < NINETYDAYS ? d.getUTCHours() : 0;\n    m = r < NINETYDAYS ? d.getUTCMinutes() : 0;\n    // <3 hours: add seconds\n    s = r < THREEHOURS ? d.getUTCSeconds() : 0;\n    // <5 minutes: add ms (plus one extra digit, this is msec*10)\n    msec10 = r < FIVEMIN ? d.getUTCMilliseconds() * 10 + msecTenths : 0;\n  }\n  return includeTime(dateStr, h, m, s, msec10);\n};\n\n// For converting old-style milliseconds to date strings,\n// we use the local timezone rather than UTC like we use\n// everywhere else, both for backward compatibility and\n// because that's how people mostly use javasript date objects.\n// Clip one extra day off our date range though so we can't get\n// thrown beyond the range by the timezone shift.\nexports.ms2DateTimeLocal = function (ms) {\n  if (!(ms >= MIN_MS + ONEDAY && ms <= MAX_MS - ONEDAY)) return BADNUM;\n  var msecTenths = Math.floor(mod(ms + 0.05, 1) * 10);\n  var d = new Date(Math.round(ms - msecTenths / 10));\n  var dateStr = timeFormat('%Y-%m-%d')(d);\n  var h = d.getHours();\n  var m = d.getMinutes();\n  var s = d.getSeconds();\n  var msec10 = d.getUTCMilliseconds() * 10 + msecTenths;\n  return includeTime(dateStr, h, m, s, msec10);\n};\nfunction includeTime(dateStr, h, m, s, msec10) {\n  // include each part that has nonzero data in or after it\n  if (h || m || s || msec10) {\n    dateStr += ' ' + lpad(h, 2) + ':' + lpad(m, 2);\n    if (s || msec10) {\n      dateStr += ':' + lpad(s, 2);\n      if (msec10) {\n        var digits = 4;\n        while (msec10 % 10 === 0) {\n          digits -= 1;\n          msec10 /= 10;\n        }\n        dateStr += '.' + lpad(msec10, digits);\n      }\n    }\n  }\n  return dateStr;\n}\n\n// normalize date format to date string, in case it starts as\n// a Date object or milliseconds\n// optional dflt is the return value if cleaning fails\nexports.cleanDate = function (v, dflt, calendar) {\n  // let us use cleanDate to provide a missing default without an error\n  if (v === BADNUM) return dflt;\n  if (exports.isJSDate(v) || typeof v === 'number' && isFinite(v)) {\n    // do not allow milliseconds (old) or jsdate objects (inherently\n    // described as gregorian dates) with world calendars\n    if (isWorldCalendar(calendar)) {\n      Loggers.error('JS Dates and milliseconds are incompatible with world calendars', v);\n      return dflt;\n    }\n\n    // NOTE: if someone puts in a year as a number rather than a string,\n    // this will mistakenly convert it thinking it's milliseconds from 1970\n    // that is: '2012' -> Jan. 1, 2012, but 2012 -> 2012 epoch milliseconds\n    v = exports.ms2DateTimeLocal(+v);\n    if (!v && dflt !== undefined) return dflt;\n  } else if (!exports.isDateTime(v, calendar)) {\n    Loggers.error('unrecognized date', v);\n    return dflt;\n  }\n  return v;\n};\n\n/*\n *  Date formatting for ticks and hovertext\n */\n\n/*\n * modDateFormat: Support world calendars, and add two items to\n * d3's vocabulary:\n * %{n}f where n is the max number of digits of fractional seconds\n * %h formats: half of the year as a decimal number [1,2]\n */\nvar fracMatch = /%\\d?f/g;\nvar halfYearMatch = /%h/g;\nvar quarterToHalfYear = {\n  1: '1',\n  2: '1',\n  3: '2',\n  4: '2'\n};\nfunction modDateFormat(fmt, x, formatter, calendar) {\n  fmt = fmt.replace(fracMatch, function (match) {\n    var digits = Math.min(+match.charAt(1) || 6, 6);\n    var fracSecs = (x / 1000 % 1 + 2).toFixed(digits).substr(2).replace(/0+$/, '') || '0';\n    return fracSecs;\n  });\n  var d = new Date(Math.floor(x + 0.05));\n  fmt = fmt.replace(halfYearMatch, function () {\n    return quarterToHalfYear[formatter('%q')(d)];\n  });\n  if (isWorldCalendar(calendar)) {\n    try {\n      fmt = Registry.getComponentMethod('calendars', 'worldCalFmt')(fmt, x, calendar);\n    } catch (e) {\n      return 'Invalid';\n    }\n  }\n  return formatter(fmt)(d);\n}\n\n/*\n * formatTime: create a time string from:\n *   x: milliseconds\n *   tr: tickround ('M', 'S', or # digits)\n * only supports UTC times (where every day is 24 hours and 0 is at midnight)\n */\nvar MAXSECONDS = [59, 59.9, 59.99, 59.999, 59.9999];\nfunction formatTime(x, tr) {\n  var timePart = mod(x + 0.05, ONEDAY);\n  var timeStr = lpad(Math.floor(timePart / ONEHOUR), 2) + ':' + lpad(mod(Math.floor(timePart / ONEMIN), 60), 2);\n  if (tr !== 'M') {\n    if (!isNumeric(tr)) tr = 0; // should only be 'S'\n\n    /*\n     * this is a weird one - and shouldn't come up unless people\n     * monkey with tick0 in weird ways, but we need to do something!\n     * IN PARTICULAR we had better not display garbage (see below)\n     * for numbers we always round to the nearest increment of the\n     * precision we're showing, and this seems like the right way to\n     * handle seconds and milliseconds, as they have a decimal point\n     * and people will interpret that to mean rounding like numbers.\n     * but for larger increments we floor the value: it's always\n     * 2013 until the ball drops on the new year. We could argue about\n     * which field it is where we start rounding (should 12:08:59\n     * round to 12:09 if we're stopping at minutes?) but for now I'll\n     * say we round seconds but floor everything else. BUT that means\n     * we need to never round up to 60 seconds, ie 23:59:60\n     */\n    var sec = Math.min(mod(x / ONESEC, 60), MAXSECONDS[tr]);\n    var secStr = (100 + sec).toFixed(tr).substr(1);\n    if (tr > 0) {\n      secStr = secStr.replace(/0+$/, '').replace(/[\\.]$/, '');\n    }\n    timeStr += ':' + secStr;\n  }\n  return timeStr;\n}\n\n/*\n * formatDate: turn a date into tick or hover label text.\n *\n *   x: milliseconds, the value to convert\n *   fmt: optional, an explicit format string (d3 format, even for world calendars)\n *   tr: tickround ('y', 'm', 'd', 'M', 'S', or # digits)\n *      used if no explicit fmt is provided\n *   formatter: locale-aware d3 date formatter for standard gregorian calendars\n *      should be the result of exports.getD3DateFormat(gd)\n *   calendar: optional string, the world calendar system to use\n *\n * returns the date/time as a string, potentially with the leading portion\n * on a separate line (after '\\n')\n * Note that this means if you provide an explicit format which includes '\\n'\n * the axis may choose to strip things after it when they don't change from\n * one tick to the next (as it does with automatic formatting)\n */\nexports.formatDate = function (x, fmt, tr, formatter, calendar, extraFormat) {\n  calendar = isWorldCalendar(calendar) && calendar;\n  if (!fmt) {\n    if (tr === 'y') fmt = extraFormat.year;else if (tr === 'm') fmt = extraFormat.month;else if (tr === 'd') {\n      fmt = extraFormat.dayMonth + '\\n' + extraFormat.year;\n    } else {\n      return formatTime(x, tr) + '\\n' + modDateFormat(extraFormat.dayMonthYear, x, formatter, calendar);\n    }\n  }\n  return modDateFormat(fmt, x, formatter, calendar);\n};\n\n/*\n * incrementMonth: make a new milliseconds value from the given one,\n * having changed the month\n *\n * special case for world calendars: multiples of 12 are treated as years,\n * even for calendar systems that don't have (always or ever) 12 months/year\n * TODO: perhaps we need a different code for year increments to support this?\n *\n * ms (number): the initial millisecond value\n * dMonth (int): the (signed) number of months to shift\n * calendar (string): the calendar system to use\n *\n * changing month does not (and CANNOT) always preserve day, since\n * months have different lengths. The worst example of this is:\n *   d = new Date(1970,0,31); d.setMonth(1) -> Feb 31 turns into Mar 3\n *\n * But we want to be able to iterate over the last day of each month,\n * regardless of what its number is.\n * So shift 3 days forward, THEN set the new month, then unshift:\n *   1/31 -> 2/28 (or 29) -> 3/31 -> 4/30 -> ...\n *\n * Note that odd behavior still exists if you start from the 26th-28th:\n *   1/28 -> 2/28 -> 3/31\n * but at least you can't shift any dates into the wrong month,\n * and ticks on these days incrementing by month would be very unusual\n */\nvar THREEDAYS = 3 * ONEDAY;\nexports.incrementMonth = function (ms, dMonth, calendar) {\n  calendar = isWorldCalendar(calendar) && calendar;\n\n  // pull time out and operate on pure dates, then add time back at the end\n  // this gives maximum precision - not that we *normally* care if we're\n  // incrementing by month, but better to be safe!\n  var timeMs = mod(ms, ONEDAY);\n  ms = Math.round(ms - timeMs);\n  if (calendar) {\n    try {\n      var dateJD = Math.round(ms / ONEDAY) + EPOCHJD;\n      var calInstance = Registry.getComponentMethod('calendars', 'getCal')(calendar);\n      var cDate = calInstance.fromJD(dateJD);\n      if (dMonth % 12) calInstance.add(cDate, dMonth, 'm');else calInstance.add(cDate, dMonth / 12, 'y');\n      return (cDate.toJD() - EPOCHJD) * ONEDAY + timeMs;\n    } catch (e) {\n      Loggers.error('invalid ms ' + ms + ' in calendar ' + calendar);\n      // then keep going in gregorian even though the result will be 'Invalid'\n    }\n  }\n  var y = new Date(ms + THREEDAYS);\n  return y.setUTCMonth(y.getUTCMonth() + dMonth) + timeMs - THREEDAYS;\n};\n\n/*\n * findExactDates: what fraction of data is exact days, months, or years?\n *\n * data: array of millisecond values\n * calendar (string) the calendar to test against\n */\nexports.findExactDates = function (data, calendar) {\n  var exactYears = 0;\n  var exactMonths = 0;\n  var exactDays = 0;\n  var blankCount = 0;\n  var d;\n  var di;\n  var calInstance = isWorldCalendar(calendar) && Registry.getComponentMethod('calendars', 'getCal')(calendar);\n  for (var i = 0; i < data.length; i++) {\n    di = data[i];\n\n    // not date data at all\n    if (!isNumeric(di)) {\n      blankCount++;\n      continue;\n    }\n\n    // not an exact date\n    if (di % ONEDAY) continue;\n    if (calInstance) {\n      try {\n        d = calInstance.fromJD(di / ONEDAY + EPOCHJD);\n        if (d.day() === 1) {\n          if (d.month() === 1) exactYears++;else exactMonths++;\n        } else exactDays++;\n      } catch (e) {\n        // invalid date in this calendar - ignore it here.\n      }\n    } else {\n      d = new Date(di);\n      if (d.getUTCDate() === 1) {\n        if (d.getUTCMonth() === 0) exactYears++;else exactMonths++;\n      } else exactDays++;\n    }\n  }\n  exactMonths += exactYears;\n  exactDays += exactMonths;\n  var dataCount = data.length - blankCount;\n  return {\n    exactYears: exactYears / dataCount,\n    exactMonths: exactMonths / dataCount,\n    exactDays: exactDays / dataCount\n  };\n};","map":{"version":3,"names":["timeFormat","require","isNumeric","Loggers","mod","constants","BADNUM","ONEDAY","ONEHOUR","ONEMIN","ONESEC","EPOCHJD","Registry","utcFormat","DATETIME_REGEXP","DATETIME_REGEXP_CN","YFIRST","Date","getFullYear","isWorldCalendar","calendar","componentsRegistry","calendars","exports","dateTick0","dayOfWeek","tick0","_dateTick0","v","dateTime2ms","ms2DateTime","sunday","getComponentMethod","dfltRange","isJSDate","getTime","MIN_MS","MAX_MS","s","tzOffset","getTimezoneOffset","offsetTweak","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","comb","Number","String","isWorld","s0","charAt","substr","isChinese","match","y","m","d","H","M","S","length","cDate","calInstance","isIntercalary","parseInt","newDate","toMonthIndex","e","toJD","date","UTC","setUTCFullYear","getUTCMonth","getUTCDate","isDateTime","lpad","val","digits","Math","pow","NINETYDAYS","THREEHOURS","FIVEMIN","ms","r","msecTenths","floor","msRounded","round","dateStr","h","msec10","dateJD","timeMs","fromJD","formatDate","getUTCHours","includeTime","ms2DateTimeLocal","getHours","cleanDate","dflt","isFinite","error","undefined","fracMatch","halfYearMatch","quarterToHalfYear","modDateFormat","fmt","x","formatter","replace","min","fracSecs","toFixed","MAXSECONDS","formatTime","tr","timePart","timeStr","sec","secStr","extraFormat","year","month","dayMonth","dayMonthYear","THREEDAYS","incrementMonth","dMonth","add","setUTCMonth","findExactDates","data","exactYears","exactMonths","exactDays","blankCount","di","i","day","dataCount"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/lib/dates.js"],"sourcesContent":["'use strict';\n\nvar timeFormat = require('d3-time-format').timeFormat;\nvar isNumeric = require('fast-isnumeric');\n\nvar Loggers = require('./loggers');\nvar mod = require('./mod').mod;\n\nvar constants = require('../constants/numerical');\nvar BADNUM = constants.BADNUM;\nvar ONEDAY = constants.ONEDAY;\nvar ONEHOUR = constants.ONEHOUR;\nvar ONEMIN = constants.ONEMIN;\nvar ONESEC = constants.ONESEC;\nvar EPOCHJD = constants.EPOCHJD;\n\nvar Registry = require('../registry');\n\nvar utcFormat = require('d3-time-format').utcFormat;\n\nvar DATETIME_REGEXP = /^\\s*(-?\\d\\d\\d\\d|\\d\\d)(-(\\d?\\d)(-(\\d?\\d)([ Tt]([01]?\\d|2[0-3])(:([0-5]\\d)(:([0-5]\\d(\\.\\d+)?))?(Z|z|[+\\-]\\d\\d(:?\\d\\d)?)?)?)?)?)?\\s*$/m;\n// special regex for chinese calendars to support yyyy-mmi-dd etc for intercalary months\nvar DATETIME_REGEXP_CN = /^\\s*(-?\\d\\d\\d\\d|\\d\\d)(-(\\d?\\di?)(-(\\d?\\d)([ Tt]([01]?\\d|2[0-3])(:([0-5]\\d)(:([0-5]\\d(\\.\\d+)?))?(Z|z|[+\\-]\\d\\d(:?\\d\\d)?)?)?)?)?)?\\s*$/m;\n\n// for 2-digit years, the first year we map them onto\nvar YFIRST = new Date().getFullYear() - 70;\n\nfunction isWorldCalendar(calendar) {\n    return (\n        calendar &&\n        Registry.componentsRegistry.calendars &&\n        typeof calendar === 'string' && calendar !== 'gregorian'\n    );\n}\n\n/*\n * dateTick0: get the canonical tick for this calendar\n *\n * integer weekdays : Saturday: 0, Sunday: 1, Monday: 2, etc.\n */\nexports.dateTick0 = function(calendar, dayOfWeek) {\n    var tick0 = _dateTick0(calendar, !!dayOfWeek);\n    if(dayOfWeek < 2) return tick0;\n\n    var v = exports.dateTime2ms(tick0, calendar);\n    v += ONEDAY * (dayOfWeek - 1); // shift Sunday to Monday, etc.\n    return exports.ms2DateTime(v, 0, calendar);\n};\n\n/*\n * _dateTick0: get the canonical tick for this calendar\n *\n * bool sunday is for week ticks, shift it to a Sunday.\n */\nfunction _dateTick0(calendar, sunday) {\n    if(isWorldCalendar(calendar)) {\n        return sunday ?\n            Registry.getComponentMethod('calendars', 'CANONICAL_SUNDAY')[calendar] :\n            Registry.getComponentMethod('calendars', 'CANONICAL_TICK')[calendar];\n    } else {\n        return sunday ? '2000-01-02' : '2000-01-01';\n    }\n}\n\n/*\n * dfltRange: for each calendar, give a valid default range\n */\nexports.dfltRange = function(calendar) {\n    if(isWorldCalendar(calendar)) {\n        return Registry.getComponentMethod('calendars', 'DFLTRANGE')[calendar];\n    } else {\n        return ['2000-01-01', '2001-01-01'];\n    }\n};\n\n// is an object a javascript date?\nexports.isJSDate = function(v) {\n    return typeof v === 'object' && v !== null && typeof v.getTime === 'function';\n};\n\n// The absolute limits of our date-time system\n// This is a little weird: we use MIN_MS and MAX_MS in dateTime2ms\n// but we use dateTime2ms to calculate them (after defining it!)\nvar MIN_MS, MAX_MS;\n\n/**\n * dateTime2ms - turn a date object or string s into milliseconds\n * (relative to 1970-01-01, per javascript standard)\n * optional calendar (string) to use a non-gregorian calendar\n *\n * Returns BADNUM if it doesn't find a date\n *\n * strings should have the form:\n *\n *    -?YYYY-mm-dd<sep>HH:MM:SS.sss<tzInfo>?\n *\n * <sep>: space (our normal standard) or T or t (ISO-8601)\n * <tzInfo>: Z, z, [+\\-]HH:?MM or [+\\-]HH and we THROW IT AWAY\n * this format comes from https://tools.ietf.org/html/rfc3339#section-5.6\n * and 4.2.5.1 Difference between local time and UTC of day (ISO-8601)\n * but we allow it even with a space as the separator\n *\n * May truncate after any full field, and sss can be any length\n * even >3 digits, though javascript dates truncate to milliseconds,\n * we keep as much as javascript numeric precision can hold, but we only\n * report back up to 100 microsecond precision, because most dates support\n * this precision (close to 1970 support more, very far away support less)\n *\n * Expanded to support negative years to -9999 but you must always\n * give 4 digits, except for 2-digit positive years which we assume are\n * near the present time.\n * Note that we follow ISO 8601:2004: there *is* a year 0, which\n * is 1BC/BCE, and -1===2BC etc.\n *\n * World calendars: not all of these *have* agreed extensions to this full range,\n * if you have another calendar system but want a date range outside its validity,\n * you can use a gregorian date string prefixed with 'G' or 'g'.\n *\n * Where to cut off 2-digit years between 1900s and 2000s?\n * from https://docs.microsoft.com/en-us/office/troubleshoot/excel/two-digit-year-numbers#the-2029-rule:\n *   1930-2029 (the most retro of all...)\n * but in my mac chrome from eg. d=new Date(Date.parse('8/19/50')):\n *   1950-2049\n * by Java, from http://stackoverflow.com/questions/2024273/:\n *   now-80 - now+19\n * or FileMaker Pro, from\n *      https://fmhelp.filemaker.com/help/18/fmp/en/index.html#page/FMP_Help/dates-with-two-digit-years.html:\n *   now-70 - now+29\n * but python strptime etc, via\n *      http://docs.python.org/py3k/library/time.html:\n *   1969-2068 (super forward-looking, but static, not sliding!)\n *\n * lets go with now-70 to now+29, and if anyone runs into this problem\n * they can learn the hard way not to use 2-digit years, as no choice we\n * make now will cover all possibilities. mostly this will all be taken\n * care of in initial parsing, should only be an issue for hand-entered data\n * currently (2016) this range is:\n *   1946-2045\n */\nexports.dateTime2ms = function(s, calendar) {\n    // first check if s is a date object\n    if(exports.isJSDate(s)) {\n        // Convert to the UTC milliseconds that give the same\n        // hours as this date has in the local timezone\n        var tzOffset = s.getTimezoneOffset() * ONEMIN;\n        var offsetTweak = (s.getUTCMinutes() - s.getMinutes()) * ONEMIN +\n            (s.getUTCSeconds() - s.getSeconds()) * ONESEC +\n            (s.getUTCMilliseconds() - s.getMilliseconds());\n\n        if(offsetTweak) {\n            var comb = 3 * ONEMIN;\n            tzOffset = tzOffset - comb / 2 + mod(offsetTweak - tzOffset + comb / 2, comb);\n        }\n        s = Number(s) - tzOffset;\n        if(s >= MIN_MS && s <= MAX_MS) return s;\n        return BADNUM;\n    }\n    // otherwise only accept strings and numbers\n    if(typeof s !== 'string' && typeof s !== 'number') return BADNUM;\n\n    s = String(s);\n\n    var isWorld = isWorldCalendar(calendar);\n\n    // to handle out-of-range dates in international calendars, accept\n    // 'G' as a prefix to force the built-in gregorian calendar.\n    var s0 = s.charAt(0);\n    if(isWorld && (s0 === 'G' || s0 === 'g')) {\n        s = s.substr(1);\n        calendar = '';\n    }\n\n    var isChinese = isWorld && calendar.substr(0, 7) === 'chinese';\n\n    var match = s.match(isChinese ? DATETIME_REGEXP_CN : DATETIME_REGEXP);\n    if(!match) return BADNUM;\n    var y = match[1];\n    var m = match[3] || '1';\n    var d = Number(match[5] || 1);\n    var H = Number(match[7] || 0);\n    var M = Number(match[9] || 0);\n    var S = Number(match[11] || 0);\n\n    if(isWorld) {\n        // disallow 2-digit years for world calendars\n        if(y.length === 2) return BADNUM;\n        y = Number(y);\n\n        var cDate;\n        try {\n            var calInstance = Registry.getComponentMethod('calendars', 'getCal')(calendar);\n            if(isChinese) {\n                var isIntercalary = m.charAt(m.length - 1) === 'i';\n                m = parseInt(m, 10);\n                cDate = calInstance.newDate(y, calInstance.toMonthIndex(y, m, isIntercalary), d);\n            } else {\n                cDate = calInstance.newDate(y, Number(m), d);\n            }\n        } catch(e) { return BADNUM; } // Invalid ... date\n\n        if(!cDate) return BADNUM;\n\n        return ((cDate.toJD() - EPOCHJD) * ONEDAY) +\n            (H * ONEHOUR) + (M * ONEMIN) + (S * ONESEC);\n    }\n\n    if(y.length === 2) {\n        y = (Number(y) + 2000 - YFIRST) % 100 + YFIRST;\n    } else y = Number(y);\n\n    // new Date uses months from 0; subtract 1 here just so we\n    // don't have to do it again during the validity test below\n    m -= 1;\n\n    // javascript takes new Date(0..99,m,d) to mean 1900-1999, so\n    // to support years 0-99 we need to use setFullYear explicitly\n    // Note that 2000 is a leap year.\n    var date = new Date(Date.UTC(2000, m, d, H, M));\n    date.setUTCFullYear(y);\n\n    if(date.getUTCMonth() !== m) return BADNUM;\n    if(date.getUTCDate() !== d) return BADNUM;\n\n    return date.getTime() + S * ONESEC;\n};\n\nMIN_MS = exports.MIN_MS = exports.dateTime2ms('-9999');\nMAX_MS = exports.MAX_MS = exports.dateTime2ms('9999-12-31 23:59:59.9999');\n\n// is string s a date? (see above)\nexports.isDateTime = function(s, calendar) {\n    return (exports.dateTime2ms(s, calendar) !== BADNUM);\n};\n\n// pad a number with zeroes, to given # of digits before the decimal point\nfunction lpad(val, digits) {\n    return String(val + Math.pow(10, digits)).substr(1);\n}\n\n/**\n * Turn ms into string of the form YYYY-mm-dd HH:MM:SS.ssss\n * Crop any trailing zeros in time, except never stop right after hours\n * (we could choose to crop '-01' from date too but for now we always\n * show the whole date)\n * Optional range r is the data range that applies, also in ms.\n * If rng is big, the later parts of time will be omitted\n */\nvar NINETYDAYS = 90 * ONEDAY;\nvar THREEHOURS = 3 * ONEHOUR;\nvar FIVEMIN = 5 * ONEMIN;\nexports.ms2DateTime = function(ms, r, calendar) {\n    if(typeof ms !== 'number' || !(ms >= MIN_MS && ms <= MAX_MS)) return BADNUM;\n\n    if(!r) r = 0;\n\n    var msecTenths = Math.floor(mod(ms + 0.05, 1) * 10);\n    var msRounded = Math.round(ms - msecTenths / 10);\n    var dateStr, h, m, s, msec10, d;\n\n    if(isWorldCalendar(calendar)) {\n        var dateJD = Math.floor(msRounded / ONEDAY) + EPOCHJD;\n        var timeMs = Math.floor(mod(ms, ONEDAY));\n        try {\n            dateStr = Registry.getComponentMethod('calendars', 'getCal')(calendar)\n                .fromJD(dateJD).formatDate('yyyy-mm-dd');\n        } catch(e) {\n            // invalid date in this calendar - fall back to Gyyyy-mm-dd\n            dateStr = utcFormat('G%Y-%m-%d')(new Date(msRounded));\n        }\n\n        // yyyy does NOT guarantee 4-digit years. YYYY mostly does, but does\n        // other things for a few calendars, so we can't trust it. Just pad\n        // it manually (after the '-' if there is one)\n        if(dateStr.charAt(0) === '-') {\n            while(dateStr.length < 11) dateStr = '-0' + dateStr.substr(1);\n        } else {\n            while(dateStr.length < 10) dateStr = '0' + dateStr;\n        }\n\n        // TODO: if this is faster, we could use this block for extracting\n        // the time components of regular gregorian too\n        h = (r < NINETYDAYS) ? Math.floor(timeMs / ONEHOUR) : 0;\n        m = (r < NINETYDAYS) ? Math.floor((timeMs % ONEHOUR) / ONEMIN) : 0;\n        s = (r < THREEHOURS) ? Math.floor((timeMs % ONEMIN) / ONESEC) : 0;\n        msec10 = (r < FIVEMIN) ? (timeMs % ONESEC) * 10 + msecTenths : 0;\n    } else {\n        d = new Date(msRounded);\n\n        dateStr = utcFormat('%Y-%m-%d')(d);\n\n        // <90 days: add hours and minutes - never *only* add hours\n        h = (r < NINETYDAYS) ? d.getUTCHours() : 0;\n        m = (r < NINETYDAYS) ? d.getUTCMinutes() : 0;\n        // <3 hours: add seconds\n        s = (r < THREEHOURS) ? d.getUTCSeconds() : 0;\n        // <5 minutes: add ms (plus one extra digit, this is msec*10)\n        msec10 = (r < FIVEMIN) ? d.getUTCMilliseconds() * 10 + msecTenths : 0;\n    }\n\n    return includeTime(dateStr, h, m, s, msec10);\n};\n\n// For converting old-style milliseconds to date strings,\n// we use the local timezone rather than UTC like we use\n// everywhere else, both for backward compatibility and\n// because that's how people mostly use javasript date objects.\n// Clip one extra day off our date range though so we can't get\n// thrown beyond the range by the timezone shift.\nexports.ms2DateTimeLocal = function(ms) {\n    if(!(ms >= MIN_MS + ONEDAY && ms <= MAX_MS - ONEDAY)) return BADNUM;\n\n    var msecTenths = Math.floor(mod(ms + 0.05, 1) * 10);\n    var d = new Date(Math.round(ms - msecTenths / 10));\n    var dateStr = timeFormat('%Y-%m-%d')(d);\n    var h = d.getHours();\n    var m = d.getMinutes();\n    var s = d.getSeconds();\n    var msec10 = d.getUTCMilliseconds() * 10 + msecTenths;\n\n    return includeTime(dateStr, h, m, s, msec10);\n};\n\nfunction includeTime(dateStr, h, m, s, msec10) {\n    // include each part that has nonzero data in or after it\n    if(h || m || s || msec10) {\n        dateStr += ' ' + lpad(h, 2) + ':' + lpad(m, 2);\n        if(s || msec10) {\n            dateStr += ':' + lpad(s, 2);\n            if(msec10) {\n                var digits = 4;\n                while(msec10 % 10 === 0) {\n                    digits -= 1;\n                    msec10 /= 10;\n                }\n                dateStr += '.' + lpad(msec10, digits);\n            }\n        }\n    }\n    return dateStr;\n}\n\n// normalize date format to date string, in case it starts as\n// a Date object or milliseconds\n// optional dflt is the return value if cleaning fails\nexports.cleanDate = function(v, dflt, calendar) {\n    // let us use cleanDate to provide a missing default without an error\n    if(v === BADNUM) return dflt;\n    if(exports.isJSDate(v) || (typeof v === 'number' && isFinite(v))) {\n        // do not allow milliseconds (old) or jsdate objects (inherently\n        // described as gregorian dates) with world calendars\n        if(isWorldCalendar(calendar)) {\n            Loggers.error('JS Dates and milliseconds are incompatible with world calendars', v);\n            return dflt;\n        }\n\n        // NOTE: if someone puts in a year as a number rather than a string,\n        // this will mistakenly convert it thinking it's milliseconds from 1970\n        // that is: '2012' -> Jan. 1, 2012, but 2012 -> 2012 epoch milliseconds\n        v = exports.ms2DateTimeLocal(+v);\n        if(!v && dflt !== undefined) return dflt;\n    } else if(!exports.isDateTime(v, calendar)) {\n        Loggers.error('unrecognized date', v);\n        return dflt;\n    }\n    return v;\n};\n\n/*\n *  Date formatting for ticks and hovertext\n */\n\n/*\n * modDateFormat: Support world calendars, and add two items to\n * d3's vocabulary:\n * %{n}f where n is the max number of digits of fractional seconds\n * %h formats: half of the year as a decimal number [1,2]\n */\nvar fracMatch = /%\\d?f/g;\nvar halfYearMatch = /%h/g;\nvar quarterToHalfYear = {\n    1: '1',\n    2: '1',\n    3: '2',\n    4: '2',\n};\nfunction modDateFormat(fmt, x, formatter, calendar) {\n    fmt = fmt.replace(fracMatch, function(match) {\n        var digits = Math.min(+(match.charAt(1)) || 6, 6);\n        var fracSecs = ((x / 1000 % 1) + 2)\n            .toFixed(digits)\n            .substr(2).replace(/0+$/, '') || '0';\n        return fracSecs;\n    });\n\n    var d = new Date(Math.floor(x + 0.05));\n\n    fmt = fmt.replace(halfYearMatch, function() {\n        return quarterToHalfYear[formatter('%q')(d)];\n    });\n\n    if(isWorldCalendar(calendar)) {\n        try {\n            fmt = Registry.getComponentMethod('calendars', 'worldCalFmt')(fmt, x, calendar);\n        } catch(e) {\n            return 'Invalid';\n        }\n    }\n    return formatter(fmt)(d);\n}\n\n/*\n * formatTime: create a time string from:\n *   x: milliseconds\n *   tr: tickround ('M', 'S', or # digits)\n * only supports UTC times (where every day is 24 hours and 0 is at midnight)\n */\nvar MAXSECONDS = [59, 59.9, 59.99, 59.999, 59.9999];\nfunction formatTime(x, tr) {\n    var timePart = mod(x + 0.05, ONEDAY);\n\n    var timeStr = lpad(Math.floor(timePart / ONEHOUR), 2) + ':' +\n        lpad(mod(Math.floor(timePart / ONEMIN), 60), 2);\n\n    if(tr !== 'M') {\n        if(!isNumeric(tr)) tr = 0; // should only be 'S'\n\n        /*\n         * this is a weird one - and shouldn't come up unless people\n         * monkey with tick0 in weird ways, but we need to do something!\n         * IN PARTICULAR we had better not display garbage (see below)\n         * for numbers we always round to the nearest increment of the\n         * precision we're showing, and this seems like the right way to\n         * handle seconds and milliseconds, as they have a decimal point\n         * and people will interpret that to mean rounding like numbers.\n         * but for larger increments we floor the value: it's always\n         * 2013 until the ball drops on the new year. We could argue about\n         * which field it is where we start rounding (should 12:08:59\n         * round to 12:09 if we're stopping at minutes?) but for now I'll\n         * say we round seconds but floor everything else. BUT that means\n         * we need to never round up to 60 seconds, ie 23:59:60\n         */\n        var sec = Math.min(mod(x / ONESEC, 60), MAXSECONDS[tr]);\n\n        var secStr = (100 + sec).toFixed(tr).substr(1);\n        if(tr > 0) {\n            secStr = secStr.replace(/0+$/, '').replace(/[\\.]$/, '');\n        }\n\n        timeStr += ':' + secStr;\n    }\n    return timeStr;\n}\n\n/*\n * formatDate: turn a date into tick or hover label text.\n *\n *   x: milliseconds, the value to convert\n *   fmt: optional, an explicit format string (d3 format, even for world calendars)\n *   tr: tickround ('y', 'm', 'd', 'M', 'S', or # digits)\n *      used if no explicit fmt is provided\n *   formatter: locale-aware d3 date formatter for standard gregorian calendars\n *      should be the result of exports.getD3DateFormat(gd)\n *   calendar: optional string, the world calendar system to use\n *\n * returns the date/time as a string, potentially with the leading portion\n * on a separate line (after '\\n')\n * Note that this means if you provide an explicit format which includes '\\n'\n * the axis may choose to strip things after it when they don't change from\n * one tick to the next (as it does with automatic formatting)\n */\nexports.formatDate = function(x, fmt, tr, formatter, calendar, extraFormat) {\n    calendar = isWorldCalendar(calendar) && calendar;\n\n    if(!fmt) {\n        if(tr === 'y') fmt = extraFormat.year;\n        else if(tr === 'm') fmt = extraFormat.month;\n        else if(tr === 'd') {\n            fmt = extraFormat.dayMonth + '\\n' + extraFormat.year;\n        } else {\n            return formatTime(x, tr) + '\\n' + modDateFormat(extraFormat.dayMonthYear, x, formatter, calendar);\n        }\n    }\n\n    return modDateFormat(fmt, x, formatter, calendar);\n};\n\n/*\n * incrementMonth: make a new milliseconds value from the given one,\n * having changed the month\n *\n * special case for world calendars: multiples of 12 are treated as years,\n * even for calendar systems that don't have (always or ever) 12 months/year\n * TODO: perhaps we need a different code for year increments to support this?\n *\n * ms (number): the initial millisecond value\n * dMonth (int): the (signed) number of months to shift\n * calendar (string): the calendar system to use\n *\n * changing month does not (and CANNOT) always preserve day, since\n * months have different lengths. The worst example of this is:\n *   d = new Date(1970,0,31); d.setMonth(1) -> Feb 31 turns into Mar 3\n *\n * But we want to be able to iterate over the last day of each month,\n * regardless of what its number is.\n * So shift 3 days forward, THEN set the new month, then unshift:\n *   1/31 -> 2/28 (or 29) -> 3/31 -> 4/30 -> ...\n *\n * Note that odd behavior still exists if you start from the 26th-28th:\n *   1/28 -> 2/28 -> 3/31\n * but at least you can't shift any dates into the wrong month,\n * and ticks on these days incrementing by month would be very unusual\n */\nvar THREEDAYS = 3 * ONEDAY;\nexports.incrementMonth = function(ms, dMonth, calendar) {\n    calendar = isWorldCalendar(calendar) && calendar;\n\n    // pull time out and operate on pure dates, then add time back at the end\n    // this gives maximum precision - not that we *normally* care if we're\n    // incrementing by month, but better to be safe!\n    var timeMs = mod(ms, ONEDAY);\n    ms = Math.round(ms - timeMs);\n\n    if(calendar) {\n        try {\n            var dateJD = Math.round(ms / ONEDAY) + EPOCHJD;\n            var calInstance = Registry.getComponentMethod('calendars', 'getCal')(calendar);\n            var cDate = calInstance.fromJD(dateJD);\n\n            if(dMonth % 12) calInstance.add(cDate, dMonth, 'm');\n            else calInstance.add(cDate, dMonth / 12, 'y');\n\n            return (cDate.toJD() - EPOCHJD) * ONEDAY + timeMs;\n        } catch(e) {\n            Loggers.error('invalid ms ' + ms + ' in calendar ' + calendar);\n            // then keep going in gregorian even though the result will be 'Invalid'\n        }\n    }\n\n    var y = new Date(ms + THREEDAYS);\n    return y.setUTCMonth(y.getUTCMonth() + dMonth) + timeMs - THREEDAYS;\n};\n\n/*\n * findExactDates: what fraction of data is exact days, months, or years?\n *\n * data: array of millisecond values\n * calendar (string) the calendar to test against\n */\nexports.findExactDates = function(data, calendar) {\n    var exactYears = 0;\n    var exactMonths = 0;\n    var exactDays = 0;\n    var blankCount = 0;\n    var d;\n    var di;\n\n    var calInstance = (\n        isWorldCalendar(calendar) &&\n        Registry.getComponentMethod('calendars', 'getCal')(calendar)\n    );\n\n    for(var i = 0; i < data.length; i++) {\n        di = data[i];\n\n        // not date data at all\n        if(!isNumeric(di)) {\n            blankCount ++;\n            continue;\n        }\n\n        // not an exact date\n        if(di % ONEDAY) continue;\n\n        if(calInstance) {\n            try {\n                d = calInstance.fromJD(di / ONEDAY + EPOCHJD);\n                if(d.day() === 1) {\n                    if(d.month() === 1) exactYears++;\n                    else exactMonths++;\n                } else exactDays++;\n            } catch(e) {\n                // invalid date in this calendar - ignore it here.\n            }\n        } else {\n            d = new Date(di);\n            if(d.getUTCDate() === 1) {\n                if(d.getUTCMonth() === 0) exactYears++;\n                else exactMonths++;\n            } else exactDays++;\n        }\n    }\n    exactMonths += exactYears;\n    exactDays += exactMonths;\n\n    var dataCount = data.length - blankCount;\n\n    return {\n        exactYears: exactYears / dataCount,\n        exactMonths: exactMonths / dataCount,\n        exactDays: exactDays / dataCount\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}