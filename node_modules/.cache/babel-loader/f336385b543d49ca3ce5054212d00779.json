{"ast":null,"code":"'use strict';\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar Scene2D = require('./scene2d');\nvar layoutGlobalAttrs = require('../layout_attributes');\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\nvar constants = require('../cartesian/constants');\nvar Cartesian = require('../cartesian');\nvar fxAttrs = require('../../components/fx/layout_attributes');\nvar getSubplotData = require('../get_data').getSubplotData;\nexports.name = 'gl2d';\nexports.attr = ['xaxis', 'yaxis'];\nexports.idRoot = ['x', 'y'];\nexports.idRegex = constants.idRegex;\nexports.attrRegex = constants.attrRegex;\nexports.attributes = require('../cartesian/attributes');\nexports.supplyLayoutDefaults = function (layoutIn, layoutOut, fullData) {\n  if (!layoutOut._has('cartesian')) {\n    Cartesian.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n  }\n};\n\n// gl2d uses svg axis attributes verbatim, but overrides editType\n// this could potentially be just `layoutAttributes` but it would\n// still need special handling somewhere to give it precedence over\n// the svg version when both are in use on one plot\nexports.layoutAttrOverrides = overrideAll(Cartesian.layoutAttributes, 'plot', 'from-root');\n\n// similar overrides for base plot attributes (and those added by components)\nexports.baseLayoutAttrOverrides = overrideAll({\n  plot_bgcolor: layoutGlobalAttrs.plot_bgcolor,\n  hoverlabel: fxAttrs.hoverlabel\n  // dragmode needs calc but only when transitioning TO lasso or select\n  // so for now it's left inside _relayout\n  // dragmode: fxAttrs.dragmode\n}, 'plot', 'nested');\nexports.plot = function plot(gd) {\n  var fullLayout = gd._fullLayout;\n  var fullData = gd._fullData;\n  var subplotIds = fullLayout._subplots.gl2d;\n  for (var i = 0; i < subplotIds.length; i++) {\n    var subplotId = subplotIds[i];\n    var subplotObj = fullLayout._plots[subplotId];\n    var fullSubplotData = getSubplotData(fullData, 'gl2d', subplotId);\n\n    // ref. to corresp. Scene instance\n    var scene = subplotObj._scene2d;\n\n    // If Scene is not instantiated, create one!\n    if (scene === undefined) {\n      scene = new Scene2D({\n        id: subplotId,\n        graphDiv: gd,\n        container: gd.querySelector('.gl-container'),\n        staticPlot: gd._context.staticPlot,\n        plotGlPixelRatio: gd._context.plotGlPixelRatio\n      }, fullLayout);\n\n      // set ref to Scene instance\n      subplotObj._scene2d = scene;\n    }\n    scene.plot(fullSubplotData, gd.calcdata, fullLayout, gd.layout);\n  }\n};\nexports.clean = function (newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var oldSceneKeys = oldFullLayout._subplots.gl2d || [];\n  for (var i = 0; i < oldSceneKeys.length; i++) {\n    var id = oldSceneKeys[i];\n    var oldSubplot = oldFullLayout._plots[id];\n\n    // old subplot wasn't gl2d; nothing to do\n    if (!oldSubplot._scene2d) continue;\n\n    // if no traces are present, delete gl2d subplot\n    var subplotData = getSubplotData(newFullData, 'gl2d', id);\n    if (subplotData.length === 0) {\n      oldSubplot._scene2d.destroy();\n      delete oldFullLayout._plots[id];\n    }\n  }\n\n  // since we use cartesian interactions, do cartesian clean\n  Cartesian.clean.apply(this, arguments);\n};\nexports.drawFramework = function (gd) {\n  if (!gd._context.staticPlot) {\n    Cartesian.drawFramework(gd);\n  }\n};\nexports.toSVG = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots.gl2d;\n  for (var i = 0; i < subplotIds.length; i++) {\n    var subplot = fullLayout._plots[subplotIds[i]];\n    var scene = subplot._scene2d;\n    var imageData = scene.toImage('png');\n    var image = fullLayout._glimages.append('svg:image');\n    image.attr({\n      xmlns: xmlnsNamespaces.svg,\n      'xlink:href': imageData,\n      x: 0,\n      y: 0,\n      width: '100%',\n      height: '100%',\n      preserveAspectRatio: 'none'\n    });\n    scene.destroy();\n  }\n};\nexports.updateFx = function (gd) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots.gl2d;\n  for (var i = 0; i < subplotIds.length; i++) {\n    var subplotObj = fullLayout._plots[subplotIds[i]]._scene2d;\n    subplotObj.updateFx(fullLayout.dragmode);\n  }\n};","map":{"version":3,"names":["overrideAll","require","Scene2D","layoutGlobalAttrs","xmlnsNamespaces","constants","Cartesian","fxAttrs","getSubplotData","exports","name","attr","idRoot","idRegex","attrRegex","attributes","supplyLayoutDefaults","layoutIn","layoutOut","fullData","_has","layoutAttrOverrides","layoutAttributes","baseLayoutAttrOverrides","plot_bgcolor","hoverlabel","plot","gd","fullLayout","_fullLayout","_fullData","subplotIds","_subplots","gl2d","i","length","subplotId","subplotObj","_plots","fullSubplotData","scene","_scene2d","undefined","id","graphDiv","container","querySelector","staticPlot","_context","plotGlPixelRatio","calcdata","layout","clean","newFullData","newFullLayout","oldFullData","oldFullLayout","oldSceneKeys","oldSubplot","subplotData","destroy","apply","arguments","drawFramework","toSVG","subplot","imageData","toImage","image","_glimages","append","xmlns","svg","x","y","width","height","preserveAspectRatio","updateFx","dragmode"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/plots/gl2d/index.js"],"sourcesContent":["'use strict';\n\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar Scene2D = require('./scene2d');\nvar layoutGlobalAttrs = require('../layout_attributes');\nvar xmlnsNamespaces = require('../../constants/xmlns_namespaces');\nvar constants = require('../cartesian/constants');\nvar Cartesian = require('../cartesian');\nvar fxAttrs = require('../../components/fx/layout_attributes');\nvar getSubplotData = require('../get_data').getSubplotData;\n\nexports.name = 'gl2d';\n\nexports.attr = ['xaxis', 'yaxis'];\n\nexports.idRoot = ['x', 'y'];\n\nexports.idRegex = constants.idRegex;\n\nexports.attrRegex = constants.attrRegex;\n\nexports.attributes = require('../cartesian/attributes');\n\nexports.supplyLayoutDefaults = function(layoutIn, layoutOut, fullData) {\n    if(!layoutOut._has('cartesian')) {\n        Cartesian.supplyLayoutDefaults(layoutIn, layoutOut, fullData);\n    }\n};\n\n// gl2d uses svg axis attributes verbatim, but overrides editType\n// this could potentially be just `layoutAttributes` but it would\n// still need special handling somewhere to give it precedence over\n// the svg version when both are in use on one plot\nexports.layoutAttrOverrides = overrideAll(Cartesian.layoutAttributes, 'plot', 'from-root');\n\n// similar overrides for base plot attributes (and those added by components)\nexports.baseLayoutAttrOverrides = overrideAll({\n    plot_bgcolor: layoutGlobalAttrs.plot_bgcolor,\n    hoverlabel: fxAttrs.hoverlabel\n    // dragmode needs calc but only when transitioning TO lasso or select\n    // so for now it's left inside _relayout\n    // dragmode: fxAttrs.dragmode\n}, 'plot', 'nested');\n\nexports.plot = function plot(gd) {\n    var fullLayout = gd._fullLayout;\n    var fullData = gd._fullData;\n    var subplotIds = fullLayout._subplots.gl2d;\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var subplotId = subplotIds[i];\n        var subplotObj = fullLayout._plots[subplotId];\n        var fullSubplotData = getSubplotData(fullData, 'gl2d', subplotId);\n\n        // ref. to corresp. Scene instance\n        var scene = subplotObj._scene2d;\n\n        // If Scene is not instantiated, create one!\n        if(scene === undefined) {\n            scene = new Scene2D({\n                id: subplotId,\n                graphDiv: gd,\n                container: gd.querySelector('.gl-container'),\n                staticPlot: gd._context.staticPlot,\n                plotGlPixelRatio: gd._context.plotGlPixelRatio\n            },\n                fullLayout\n            );\n\n            // set ref to Scene instance\n            subplotObj._scene2d = scene;\n        }\n\n        scene.plot(fullSubplotData, gd.calcdata, fullLayout, gd.layout);\n    }\n};\n\nexports.clean = function(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var oldSceneKeys = oldFullLayout._subplots.gl2d || [];\n\n    for(var i = 0; i < oldSceneKeys.length; i++) {\n        var id = oldSceneKeys[i];\n        var oldSubplot = oldFullLayout._plots[id];\n\n        // old subplot wasn't gl2d; nothing to do\n        if(!oldSubplot._scene2d) continue;\n\n        // if no traces are present, delete gl2d subplot\n        var subplotData = getSubplotData(newFullData, 'gl2d', id);\n        if(subplotData.length === 0) {\n            oldSubplot._scene2d.destroy();\n            delete oldFullLayout._plots[id];\n        }\n    }\n\n    // since we use cartesian interactions, do cartesian clean\n    Cartesian.clean.apply(this, arguments);\n};\n\nexports.drawFramework = function(gd) {\n    if(!gd._context.staticPlot) {\n        Cartesian.drawFramework(gd);\n    }\n};\n\nexports.toSVG = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var subplotIds = fullLayout._subplots.gl2d;\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var subplot = fullLayout._plots[subplotIds[i]];\n        var scene = subplot._scene2d;\n\n        var imageData = scene.toImage('png');\n        var image = fullLayout._glimages.append('svg:image');\n\n        image.attr({\n            xmlns: xmlnsNamespaces.svg,\n            'xlink:href': imageData,\n            x: 0,\n            y: 0,\n            width: '100%',\n            height: '100%',\n            preserveAspectRatio: 'none'\n        });\n\n        scene.destroy();\n    }\n};\n\nexports.updateFx = function(gd) {\n    var fullLayout = gd._fullLayout;\n    var subplotIds = fullLayout._subplots.gl2d;\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var subplotObj = fullLayout._plots[subplotIds[i]]._scene2d;\n        subplotObj.updateFx(fullLayout.dragmode);\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}