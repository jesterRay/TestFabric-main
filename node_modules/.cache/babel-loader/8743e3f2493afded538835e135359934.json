{"ast":null,"code":"'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar extendDeep = require('../../lib/extend').extendDeep;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorAttrs = require('../../components/color/attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\nvar delta = require('../../constants/delta.js');\nvar descriptionOnlyNumbers = require('../../plots/cartesian/axis_format_attributes').descriptionOnlyNumbers;\nvar textFontAttrs = fontAttrs({\n  editType: 'plot',\n  colorEditType: 'plot'\n});\nvar gaugeBarAttrs = {\n  color: {\n    valType: 'color',\n    editType: 'plot',\n    description: ['Sets the background color of the arc.'].join(' ')\n  },\n  line: {\n    color: {\n      valType: 'color',\n      dflt: colorAttrs.defaultLine,\n      editType: 'plot',\n      description: ['Sets the color of the line enclosing each sector.'].join(' ')\n    },\n    width: {\n      valType: 'number',\n      min: 0,\n      dflt: 0,\n      editType: 'plot',\n      description: ['Sets the width (in px) of the line enclosing each sector.'].join(' ')\n    },\n    editType: 'calc'\n  },\n  thickness: {\n    valType: 'number',\n    min: 0,\n    max: 1,\n    dflt: 1,\n    editType: 'plot',\n    description: ['Sets the thickness of the bar as a fraction of the total thickness of the gauge.'].join(' ')\n  },\n  editType: 'calc'\n};\nvar rangeAttr = {\n  valType: 'info_array',\n  items: [{\n    valType: 'number',\n    editType: 'plot'\n  }, {\n    valType: 'number',\n    editType: 'plot'\n  }],\n  editType: 'plot',\n  description: ['Sets the range of this axis.'\n  // TODO: add support for other axis type\n  // 'If the axis `type` is *log*, then you must take the log of your',\n  // 'desired range (e.g. to set the range from 1 to 100,',\n  // 'set the range from 0 to 2).',\n  // 'If the axis `type` is *date*, it should be date strings,',\n  // 'like date data, though Date objects and unix milliseconds',\n  // 'will be accepted and converted to strings.',\n  // 'If the axis `type` is *category*, it should be numbers,',\n  // 'using the scale where each category is assigned a serial',\n  // 'number from zero in the order it appears.'\n  ].join(' ')\n};\nvar stepsAttrs = templatedArray('step', extendDeep({}, gaugeBarAttrs, {\n  range: rangeAttr\n}));\nmodule.exports = {\n  mode: {\n    valType: 'flaglist',\n    editType: 'calc',\n    flags: ['number', 'delta', 'gauge'],\n    dflt: 'number',\n    description: ['Determines how the value is displayed on the graph.', '`number` displays the value numerically in text.', '`delta` displays the difference to a reference value in text.', 'Finally, `gauge` displays the value graphically on an axis.'].join(' ')\n  },\n  value: {\n    valType: 'number',\n    editType: 'calc',\n    anim: true,\n    description: ['Sets the number to be displayed.'].join(' ')\n  },\n  align: {\n    valType: 'enumerated',\n    values: ['left', 'center', 'right'],\n    editType: 'plot',\n    description: ['Sets the horizontal alignment of the `text` within the box.', 'Note that this attribute has no effect if an angular gauge is displayed:', 'in this case, it is always centered'].join(' ')\n  },\n  // position\n  domain: domainAttrs({\n    name: 'indicator',\n    trace: true,\n    editType: 'calc'\n  }),\n  title: {\n    text: {\n      valType: 'string',\n      editType: 'plot',\n      description: ['Sets the title of this indicator.'].join(' ')\n    },\n    align: {\n      valType: 'enumerated',\n      values: ['left', 'center', 'right'],\n      editType: 'plot',\n      description: ['Sets the horizontal alignment of the title.', 'It defaults to `center` except for bullet charts', 'for which it defaults to right.'].join(' ')\n    },\n    font: extendFlat({}, textFontAttrs, {\n      description: ['Set the font used to display the title'].join(' ')\n    }),\n    editType: 'plot'\n  },\n  number: {\n    valueformat: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: descriptionOnlyNumbers('value')\n    },\n    font: extendFlat({}, textFontAttrs, {\n      description: ['Set the font used to display main number'].join(' ')\n    }),\n    prefix: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: ['Sets a prefix appearing before the number.'].join(' ')\n    },\n    suffix: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: ['Sets a suffix appearing next to the number.'].join(' ')\n    },\n    editType: 'plot'\n  },\n  delta: {\n    reference: {\n      valType: 'number',\n      editType: 'calc',\n      description: ['Sets the reference value to compute the delta.', 'By default, it is set to the current value.'].join(' ')\n    },\n    position: {\n      valType: 'enumerated',\n      values: ['top', 'bottom', 'left', 'right'],\n      dflt: 'bottom',\n      editType: 'plot',\n      description: ['Sets the position of delta with respect to the number.'].join(' ')\n    },\n    relative: {\n      valType: 'boolean',\n      editType: 'plot',\n      dflt: false,\n      description: ['Show relative change'].join(' ')\n    },\n    valueformat: {\n      valType: 'string',\n      editType: 'plot',\n      description: descriptionOnlyNumbers('value')\n    },\n    increasing: {\n      symbol: {\n        valType: 'string',\n        dflt: delta.INCREASING.SYMBOL,\n        editType: 'plot',\n        description: ['Sets the symbol to display for increasing value'].join(' ')\n      },\n      color: {\n        valType: 'color',\n        dflt: delta.INCREASING.COLOR,\n        editType: 'plot',\n        description: ['Sets the color for increasing value.'].join(' ')\n      },\n      // TODO: add attribute to show sign\n      editType: 'plot'\n    },\n    decreasing: {\n      symbol: {\n        valType: 'string',\n        dflt: delta.DECREASING.SYMBOL,\n        editType: 'plot',\n        description: ['Sets the symbol to display for increasing value'].join(' ')\n      },\n      color: {\n        valType: 'color',\n        dflt: delta.DECREASING.COLOR,\n        editType: 'plot',\n        description: ['Sets the color for increasing value.'].join(' ')\n      },\n      // TODO: add attribute to hide sign\n      editType: 'plot'\n    },\n    font: extendFlat({}, textFontAttrs, {\n      description: ['Set the font used to display the delta'].join(' ')\n    }),\n    prefix: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: ['Sets a prefix appearing before the delta.'].join(' ')\n    },\n    suffix: {\n      valType: 'string',\n      dflt: '',\n      editType: 'plot',\n      description: ['Sets a suffix appearing next to the delta.'].join(' ')\n    },\n    editType: 'calc'\n  },\n  gauge: {\n    shape: {\n      valType: 'enumerated',\n      editType: 'plot',\n      dflt: 'angular',\n      values: ['angular', 'bullet'],\n      description: ['Set the shape of the gauge'].join(' ')\n    },\n    bar: extendDeep({}, gaugeBarAttrs, {\n      color: {\n        dflt: 'green'\n      },\n      description: ['Set the appearance of the gauge\\'s value'].join(' ')\n    }),\n    // Background of the gauge\n    bgcolor: {\n      valType: 'color',\n      editType: 'plot',\n      description: 'Sets the gauge background color.'\n    },\n    bordercolor: {\n      valType: 'color',\n      dflt: colorAttrs.defaultLine,\n      editType: 'plot',\n      description: 'Sets the color of the border enclosing the gauge.'\n    },\n    borderwidth: {\n      valType: 'number',\n      min: 0,\n      dflt: 1,\n      editType: 'plot',\n      description: 'Sets the width (in px) of the border enclosing the gauge.'\n    },\n    axis: overrideAll({\n      range: rangeAttr,\n      visible: extendFlat({}, axesAttrs.visible, {\n        dflt: true\n      }),\n      // tick and title properties named and function exactly as in axes\n      tickmode: axesAttrs.minor.tickmode,\n      nticks: axesAttrs.nticks,\n      tick0: axesAttrs.tick0,\n      dtick: axesAttrs.dtick,\n      tickvals: axesAttrs.tickvals,\n      ticktext: axesAttrs.ticktext,\n      ticks: extendFlat({}, axesAttrs.ticks, {\n        dflt: 'outside'\n      }),\n      ticklen: axesAttrs.ticklen,\n      tickwidth: axesAttrs.tickwidth,\n      tickcolor: axesAttrs.tickcolor,\n      ticklabelstep: axesAttrs.ticklabelstep,\n      showticklabels: axesAttrs.showticklabels,\n      labelalias: axesAttrs.labelalias,\n      tickfont: fontAttrs({\n        description: 'Sets the color bar\\'s tick label font'\n      }),\n      tickangle: axesAttrs.tickangle,\n      tickformat: axesAttrs.tickformat,\n      tickformatstops: axesAttrs.tickformatstops,\n      tickprefix: axesAttrs.tickprefix,\n      showtickprefix: axesAttrs.showtickprefix,\n      ticksuffix: axesAttrs.ticksuffix,\n      showticksuffix: axesAttrs.showticksuffix,\n      separatethousands: axesAttrs.separatethousands,\n      exponentformat: axesAttrs.exponentformat,\n      minexponent: axesAttrs.minexponent,\n      showexponent: axesAttrs.showexponent,\n      editType: 'plot'\n    }, 'plot'),\n    // Steps (or ranges) and thresholds\n    steps: stepsAttrs,\n    threshold: {\n      line: {\n        color: extendFlat({}, gaugeBarAttrs.line.color, {\n          description: ['Sets the color of the threshold line.'].join(' ')\n        }),\n        width: extendFlat({}, gaugeBarAttrs.line.width, {\n          dflt: 1,\n          description: ['Sets the width (in px) of the threshold line.'].join(' ')\n        }),\n        editType: 'plot'\n      },\n      thickness: extendFlat({}, gaugeBarAttrs.thickness, {\n        dflt: 0.85,\n        description: ['Sets the thickness of the threshold line as a fraction of the thickness of the gauge.'].join(' ')\n      }),\n      value: {\n        valType: 'number',\n        editType: 'calc',\n        dflt: false,\n        description: ['Sets a treshold value drawn as a line.'].join(' ')\n      },\n      editType: 'plot'\n    },\n    description: 'The gauge of the Indicator plot.',\n    editType: 'plot'\n    // TODO: in future version, add marker: (bar|needle)\n  }\n};","map":{"version":3,"names":["extendFlat","require","extendDeep","overrideAll","fontAttrs","colorAttrs","domainAttrs","attributes","axesAttrs","templatedArray","delta","descriptionOnlyNumbers","textFontAttrs","editType","colorEditType","gaugeBarAttrs","color","valType","description","join","line","dflt","defaultLine","width","min","thickness","max","rangeAttr","items","stepsAttrs","range","module","exports","mode","flags","value","anim","align","values","domain","name","trace","title","text","font","number","valueformat","prefix","suffix","reference","position","relative","increasing","symbol","INCREASING","SYMBOL","COLOR","decreasing","DECREASING","gauge","shape","bar","bgcolor","bordercolor","borderwidth","axis","visible","tickmode","minor","nticks","tick0","dtick","tickvals","ticktext","ticks","ticklen","tickwidth","tickcolor","ticklabelstep","showticklabels","labelalias","tickfont","tickangle","tickformat","tickformatstops","tickprefix","showtickprefix","ticksuffix","showticksuffix","separatethousands","exponentformat","minexponent","showexponent","steps","threshold"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/indicator/attributes.js"],"sourcesContent":["'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar extendDeep = require('../../lib/extend').extendDeep;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorAttrs = require('../../components/color/attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\nvar delta = require('../../constants/delta.js');\nvar descriptionOnlyNumbers = require('../../plots/cartesian/axis_format_attributes').descriptionOnlyNumbers;\n\nvar textFontAttrs = fontAttrs({\n    editType: 'plot',\n    colorEditType: 'plot'\n});\n\nvar gaugeBarAttrs = {\n    color: {\n        valType: 'color',\n        editType: 'plot',\n        description: [\n            'Sets the background color of the arc.'\n        ].join(' ')\n    },\n    line: {\n        color: {\n            valType: 'color',\n            dflt: colorAttrs.defaultLine,\n            editType: 'plot',\n            description: [\n                'Sets the color of the line enclosing each sector.'\n            ].join(' ')\n        },\n        width: {\n            valType: 'number',\n            min: 0,\n            dflt: 0,\n            editType: 'plot',\n            description: [\n                'Sets the width (in px) of the line enclosing each sector.'\n            ].join(' ')\n        },\n        editType: 'calc'\n    },\n    thickness: {\n        valType: 'number',\n        min: 0,\n        max: 1,\n        dflt: 1,\n        editType: 'plot',\n        description: [\n            'Sets the thickness of the bar as a fraction of the total thickness of the gauge.'\n        ].join(' ')\n    },\n    editType: 'calc'\n};\n\nvar rangeAttr = {\n    valType: 'info_array',\n    items: [\n            {valType: 'number', editType: 'plot'},\n            {valType: 'number', editType: 'plot'}\n    ],\n    editType: 'plot',\n    description: [\n        'Sets the range of this axis.'\n        // TODO: add support for other axis type\n        // 'If the axis `type` is *log*, then you must take the log of your',\n        // 'desired range (e.g. to set the range from 1 to 100,',\n        // 'set the range from 0 to 2).',\n        // 'If the axis `type` is *date*, it should be date strings,',\n        // 'like date data, though Date objects and unix milliseconds',\n        // 'will be accepted and converted to strings.',\n        // 'If the axis `type` is *category*, it should be numbers,',\n        // 'using the scale where each category is assigned a serial',\n        // 'number from zero in the order it appears.'\n    ].join(' ')\n};\n\nvar stepsAttrs = templatedArray('step', extendDeep({}, gaugeBarAttrs, {\n    range: rangeAttr\n}));\n\nmodule.exports = {\n    mode: {\n        valType: 'flaglist',\n        editType: 'calc',\n        flags: ['number', 'delta', 'gauge'],\n        dflt: 'number',\n        description: [\n            'Determines how the value is displayed on the graph.',\n            '`number` displays the value numerically in text.',\n            '`delta` displays the difference to a reference value in text.',\n            'Finally, `gauge` displays the value graphically on an axis.',\n        ].join(' ')\n    },\n    value: {\n        valType: 'number',\n        editType: 'calc',\n        anim: true,\n        description: [\n            'Sets the number to be displayed.'\n        ].join(' ')\n    },\n    align: {\n        valType: 'enumerated',\n        values: ['left', 'center', 'right'],\n        editType: 'plot',\n        description: [\n            'Sets the horizontal alignment of the `text` within the box.',\n            'Note that this attribute has no effect if an angular gauge is displayed:',\n            'in this case, it is always centered'\n        ].join(' ')\n    },\n    // position\n    domain: domainAttrs({name: 'indicator', trace: true, editType: 'calc'}),\n\n    title: {\n        text: {\n            valType: 'string',\n            editType: 'plot',\n            description: [\n                'Sets the title of this indicator.'\n            ].join(' ')\n        },\n        align: {\n            valType: 'enumerated',\n            values: ['left', 'center', 'right'],\n            editType: 'plot',\n            description: [\n                'Sets the horizontal alignment of the title.',\n                'It defaults to `center` except for bullet charts',\n                'for which it defaults to right.'\n            ].join(' ')\n        },\n        font: extendFlat({}, textFontAttrs, {\n            description: [\n                'Set the font used to display the title'\n            ].join(' ')\n        }),\n        editType: 'plot'\n    },\n    number: {\n        valueformat: {\n            valType: 'string',\n            dflt: '',\n            editType: 'plot',\n            description: descriptionOnlyNumbers('value')\n        },\n        font: extendFlat({}, textFontAttrs, {\n            description: [\n                'Set the font used to display main number'\n            ].join(' ')\n        }),\n        prefix: {\n            valType: 'string',\n            dflt: '',\n            editType: 'plot',\n            description: [\n                'Sets a prefix appearing before the number.'\n            ].join(' ')\n        },\n        suffix: {\n            valType: 'string',\n            dflt: '',\n            editType: 'plot',\n            description: [\n                'Sets a suffix appearing next to the number.'\n            ].join(' ')\n        },\n        editType: 'plot'\n    },\n    delta: {\n        reference: {\n            valType: 'number',\n            editType: 'calc',\n            description: [\n                'Sets the reference value to compute the delta.',\n                'By default, it is set to the current value.'\n            ].join(' ')\n        },\n        position: {\n            valType: 'enumerated',\n            values: ['top', 'bottom', 'left', 'right'],\n            dflt: 'bottom',\n            editType: 'plot',\n            description: [\n                'Sets the position of delta with respect to the number.'\n            ].join(' ')\n        },\n        relative: {\n            valType: 'boolean',\n            editType: 'plot',\n            dflt: false,\n            description: [\n                'Show relative change'\n            ].join(' ')\n        },\n        valueformat: {\n            valType: 'string',\n            editType: 'plot',\n            description: descriptionOnlyNumbers('value')\n        },\n        increasing: {\n            symbol: {\n                valType: 'string',\n                dflt: delta.INCREASING.SYMBOL,\n                editType: 'plot',\n                description: [\n                    'Sets the symbol to display for increasing value'\n                ].join(' ')\n            },\n            color: {\n                valType: 'color',\n                dflt: delta.INCREASING.COLOR,\n                editType: 'plot',\n                description: [\n                    'Sets the color for increasing value.'\n                ].join(' ')\n            },\n            // TODO: add attribute to show sign\n            editType: 'plot'\n        },\n        decreasing: {\n            symbol: {\n                valType: 'string',\n                dflt: delta.DECREASING.SYMBOL,\n                editType: 'plot',\n                description: [\n                    'Sets the symbol to display for increasing value'\n                ].join(' ')\n            },\n            color: {\n                valType: 'color',\n                dflt: delta.DECREASING.COLOR,\n                editType: 'plot',\n                description: [\n                    'Sets the color for increasing value.'\n                ].join(' ')\n            },\n            // TODO: add attribute to hide sign\n            editType: 'plot'\n        },\n        font: extendFlat({}, textFontAttrs, {\n            description: [\n                'Set the font used to display the delta'\n            ].join(' ')\n        }),\n        prefix: {\n            valType: 'string',\n            dflt: '',\n            editType: 'plot',\n            description: [\n                'Sets a prefix appearing before the delta.'\n            ].join(' ')\n        },\n        suffix: {\n            valType: 'string',\n            dflt: '',\n            editType: 'plot',\n            description: [\n                'Sets a suffix appearing next to the delta.'\n            ].join(' ')\n        },\n        editType: 'calc'\n    },\n    gauge: {\n        shape: {\n            valType: 'enumerated',\n            editType: 'plot',\n            dflt: 'angular',\n            values: ['angular', 'bullet'],\n            description: [\n                'Set the shape of the gauge'\n            ].join(' ')\n        },\n        bar: extendDeep({}, gaugeBarAttrs, {\n            color: {dflt: 'green'},\n            description: [\n                'Set the appearance of the gauge\\'s value'\n            ].join(' ')\n        }),\n        // Background of the gauge\n        bgcolor: {\n            valType: 'color',\n            editType: 'plot',\n            description: 'Sets the gauge background color.'\n        },\n        bordercolor: {\n            valType: 'color',\n            dflt: colorAttrs.defaultLine,\n            editType: 'plot',\n            description: 'Sets the color of the border enclosing the gauge.'\n        },\n        borderwidth: {\n            valType: 'number',\n            min: 0,\n            dflt: 1,\n            editType: 'plot',\n            description: 'Sets the width (in px) of the border enclosing the gauge.'\n        },\n        axis: overrideAll({\n            range: rangeAttr,\n            visible: extendFlat({}, axesAttrs.visible, {\n                dflt: true\n            }),\n            // tick and title properties named and function exactly as in axes\n            tickmode: axesAttrs.minor.tickmode,\n            nticks: axesAttrs.nticks,\n            tick0: axesAttrs.tick0,\n            dtick: axesAttrs.dtick,\n            tickvals: axesAttrs.tickvals,\n            ticktext: axesAttrs.ticktext,\n            ticks: extendFlat({}, axesAttrs.ticks, {dflt: 'outside'}),\n            ticklen: axesAttrs.ticklen,\n            tickwidth: axesAttrs.tickwidth,\n            tickcolor: axesAttrs.tickcolor,\n            ticklabelstep: axesAttrs.ticklabelstep,\n            showticklabels: axesAttrs.showticklabels,\n            labelalias: axesAttrs.labelalias,\n            tickfont: fontAttrs({\n                description: 'Sets the color bar\\'s tick label font'\n            }),\n            tickangle: axesAttrs.tickangle,\n            tickformat: axesAttrs.tickformat,\n            tickformatstops: axesAttrs.tickformatstops,\n            tickprefix: axesAttrs.tickprefix,\n            showtickprefix: axesAttrs.showtickprefix,\n            ticksuffix: axesAttrs.ticksuffix,\n            showticksuffix: axesAttrs.showticksuffix,\n            separatethousands: axesAttrs.separatethousands,\n            exponentformat: axesAttrs.exponentformat,\n            minexponent: axesAttrs.minexponent,\n            showexponent: axesAttrs.showexponent,\n            editType: 'plot'\n        }, 'plot'),\n        // Steps (or ranges) and thresholds\n        steps: stepsAttrs,\n        threshold: {\n            line: {\n                color: extendFlat({}, gaugeBarAttrs.line.color, {\n                    description: [\n                        'Sets the color of the threshold line.'\n                    ].join(' ')\n                }),\n                width: extendFlat({}, gaugeBarAttrs.line.width, {\n                    dflt: 1,\n                    description: [\n                        'Sets the width (in px) of the threshold line.'\n                    ].join(' ')\n                }),\n                editType: 'plot'\n            },\n            thickness: extendFlat({}, gaugeBarAttrs.thickness, {\n                dflt: 0.85,\n                description: [\n                    'Sets the thickness of the threshold line as a fraction of the thickness of the gauge.'\n                ].join(' ')\n            }),\n            value: {\n                valType: 'number',\n                editType: 'calc',\n                dflt: false,\n                description: [\n                    'Sets a treshold value drawn as a line.'\n                ].join(' ')\n            },\n            editType: 'plot'\n        },\n        description: 'The gauge of the Indicator plot.',\n        editType: 'plot'\n        // TODO: in future version, add marker: (bar|needle)\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}