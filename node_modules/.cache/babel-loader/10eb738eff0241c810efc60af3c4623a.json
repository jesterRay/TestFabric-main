{"ast":null,"code":"'use strict';\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar pushUnique = Lib.pushUnique;\nvar SHOWISOLATETIP = true;\nmodule.exports = function handleClick(g, gd, numClicks) {\n  var fullLayout = gd._fullLayout;\n  if (gd._dragged || gd._editing) return;\n  var itemClick = fullLayout.legend.itemclick;\n  var itemDoubleClick = fullLayout.legend.itemdoubleclick;\n  var groupClick = fullLayout.legend.groupclick;\n  if (numClicks === 1 && itemClick === 'toggle' && itemDoubleClick === 'toggleothers' && SHOWISOLATETIP && gd.data && gd._context.showTips) {\n    Lib.notifier(Lib._(gd, 'Double-click on legend to isolate one trace'), 'long');\n    SHOWISOLATETIP = false;\n  } else {\n    SHOWISOLATETIP = false;\n  }\n  var mode;\n  if (numClicks === 1) mode = itemClick;else if (numClicks === 2) mode = itemDoubleClick;\n  if (!mode) return;\n  var toggleGroup = groupClick === 'togglegroup';\n  var hiddenSlices = fullLayout.hiddenlabels ? fullLayout.hiddenlabels.slice() : [];\n  var legendItem = g.data()[0][0];\n  if (legendItem.groupTitle && legendItem.noClick) return;\n  var fullData = gd._fullData;\n  var shapesWithLegend = (fullLayout.shapes || []).filter(function (d) {\n    return d.showlegend;\n  });\n  var allLegendItems = fullData.concat(shapesWithLegend);\n  var fullTrace = legendItem.trace;\n  if (fullTrace._isShape) {\n    fullTrace = fullTrace._fullInput;\n  }\n  var legendgroup = fullTrace.legendgroup;\n  var i, j, kcont, key, keys, val;\n  var dataUpdate = {};\n  var dataIndices = [];\n  var carrs = [];\n  var carrIdx = [];\n  function insertDataUpdate(traceIndex, value) {\n    var attrIndex = dataIndices.indexOf(traceIndex);\n    var valueArray = dataUpdate.visible;\n    if (!valueArray) {\n      valueArray = dataUpdate.visible = [];\n    }\n    if (dataIndices.indexOf(traceIndex) === -1) {\n      dataIndices.push(traceIndex);\n      attrIndex = dataIndices.length - 1;\n    }\n    valueArray[attrIndex] = value;\n    return attrIndex;\n  }\n  var updatedShapes = (fullLayout.shapes || []).map(function (d) {\n    return d._input;\n  });\n  var shapesUpdated = false;\n  function insertShapesUpdate(shapeIndex, value) {\n    updatedShapes[shapeIndex].visible = value;\n    shapesUpdated = true;\n  }\n  function setVisibility(fullTrace, visibility) {\n    if (legendItem.groupTitle && !toggleGroup) return;\n    var fullInput = fullTrace._fullInput || fullTrace;\n    var isShape = fullInput._isShape;\n    var index = fullInput.index;\n    if (index === undefined) index = fullInput._index;\n    if (Registry.hasTransform(fullInput, 'groupby')) {\n      var kcont = carrs[index];\n      if (!kcont) {\n        var groupbyIndices = Registry.getTransformIndices(fullInput, 'groupby');\n        var lastGroupbyIndex = groupbyIndices[groupbyIndices.length - 1];\n        kcont = Lib.keyedContainer(fullInput, 'transforms[' + lastGroupbyIndex + '].styles', 'target', 'value.visible');\n        carrs[index] = kcont;\n      }\n      var curState = kcont.get(fullTrace._group);\n\n      // If not specified, assume visible. This happens if there are other style\n      // properties set for a group but not the visibility. There are many similar\n      // ways to do this (e.g. why not just `curState = fullTrace.visible`??? The\n      // answer is: because it breaks other things like groupby trace names in\n      // subtle ways.)\n      if (curState === undefined) {\n        curState = true;\n      }\n      if (curState !== false) {\n        // true -> legendonly. All others toggle to true:\n        kcont.set(fullTrace._group, visibility);\n      }\n      carrIdx[index] = insertDataUpdate(index, fullInput.visible === false ? false : true);\n    } else {\n      // false -> false (not possible since will not be visible in legend)\n      // true -> legendonly\n      // legendonly -> true\n      var nextVisibility = fullInput.visible === false ? false : visibility;\n      if (isShape) {\n        insertShapesUpdate(index, nextVisibility);\n      } else {\n        insertDataUpdate(index, nextVisibility);\n      }\n    }\n  }\n  var thisLegend = fullTrace.legend;\n  var fullInput = fullTrace._fullInput;\n  var isShape = fullInput && fullInput._isShape;\n  if (!isShape && Registry.traceIs(fullTrace, 'pie-like')) {\n    var thisLabel = legendItem.label;\n    var thisLabelIndex = hiddenSlices.indexOf(thisLabel);\n    if (mode === 'toggle') {\n      if (thisLabelIndex === -1) hiddenSlices.push(thisLabel);else hiddenSlices.splice(thisLabelIndex, 1);\n    } else if (mode === 'toggleothers') {\n      var changed = thisLabelIndex !== -1;\n      var unhideList = [];\n      for (i = 0; i < gd.calcdata.length; i++) {\n        var cdi = gd.calcdata[i];\n        for (j = 0; j < cdi.length; j++) {\n          var d = cdi[j];\n          var dLabel = d.label;\n\n          // ensure we toggle slices that are in this legend)\n          if (thisLegend === cdi[0].trace.legend) {\n            if (thisLabel !== dLabel) {\n              if (hiddenSlices.indexOf(dLabel) === -1) changed = true;\n              pushUnique(hiddenSlices, dLabel);\n              unhideList.push(dLabel);\n            }\n          }\n        }\n      }\n      if (!changed) {\n        for (var q = 0; q < unhideList.length; q++) {\n          var pos = hiddenSlices.indexOf(unhideList[q]);\n          if (pos !== -1) {\n            hiddenSlices.splice(pos, 1);\n          }\n        }\n      }\n    }\n    Registry.call('_guiRelayout', gd, 'hiddenlabels', hiddenSlices);\n  } else {\n    var hasLegendgroup = legendgroup && legendgroup.length;\n    var traceIndicesInGroup = [];\n    var tracei;\n    if (hasLegendgroup) {\n      for (i = 0; i < allLegendItems.length; i++) {\n        tracei = allLegendItems[i];\n        if (!tracei.visible) continue;\n        if (tracei.legendgroup === legendgroup) {\n          traceIndicesInGroup.push(i);\n        }\n      }\n    }\n    if (mode === 'toggle') {\n      var nextVisibility;\n      switch (fullTrace.visible) {\n        case true:\n          nextVisibility = 'legendonly';\n          break;\n        case false:\n          nextVisibility = false;\n          break;\n        case 'legendonly':\n          nextVisibility = true;\n          break;\n      }\n      if (hasLegendgroup) {\n        if (toggleGroup) {\n          for (i = 0; i < allLegendItems.length; i++) {\n            var item = allLegendItems[i];\n            if (item.visible !== false && item.legendgroup === legendgroup) {\n              setVisibility(item, nextVisibility);\n            }\n          }\n        } else {\n          setVisibility(fullTrace, nextVisibility);\n        }\n      } else {\n        setVisibility(fullTrace, nextVisibility);\n      }\n    } else if (mode === 'toggleothers') {\n      // Compute the clicked index. expandedIndex does what we want for expanded traces\n      // but also culls hidden traces. That means we have some work to do.\n      var isClicked, isInGroup, notInLegend, otherState, _item;\n      var isIsolated = true;\n      for (i = 0; i < allLegendItems.length; i++) {\n        _item = allLegendItems[i];\n        isClicked = _item === fullTrace;\n        notInLegend = _item.showlegend !== true;\n        if (isClicked || notInLegend) continue;\n        isInGroup = hasLegendgroup && _item.legendgroup === legendgroup;\n        if (!isInGroup && _item.legend === thisLegend && _item.visible === true && !Registry.traceIs(_item, 'notLegendIsolatable')) {\n          isIsolated = false;\n          break;\n        }\n      }\n      for (i = 0; i < allLegendItems.length; i++) {\n        _item = allLegendItems[i];\n\n        // False is sticky; we don't change it. Also ensure we don't change states of itmes in other legend\n        if (_item.visible === false || _item.legend !== thisLegend) continue;\n        if (Registry.traceIs(_item, 'notLegendIsolatable')) {\n          continue;\n        }\n        switch (fullTrace.visible) {\n          case 'legendonly':\n            setVisibility(_item, true);\n            break;\n          case true:\n            otherState = isIsolated ? true : 'legendonly';\n            isClicked = _item === fullTrace;\n            // N.B. consider traces that have a set legendgroup as toggleable\n            notInLegend = _item.showlegend !== true && !_item.legendgroup;\n            isInGroup = isClicked || hasLegendgroup && _item.legendgroup === legendgroup;\n            setVisibility(_item, isInGroup || notInLegend ? true : otherState);\n            break;\n        }\n      }\n    }\n    for (i = 0; i < carrs.length; i++) {\n      kcont = carrs[i];\n      if (!kcont) continue;\n      var update = kcont.constructUpdate();\n      var updateKeys = Object.keys(update);\n      for (j = 0; j < updateKeys.length; j++) {\n        key = updateKeys[j];\n        val = dataUpdate[key] = dataUpdate[key] || [];\n        val[carrIdx[i]] = update[key];\n      }\n    }\n\n    // The length of the value arrays should be equal and any unspecified\n    // values should be explicitly undefined for them to get properly culled\n    // as updates and not accidentally reset to the default value. This fills\n    // out sparse arrays with the required number of undefined values:\n    keys = Object.keys(dataUpdate);\n    for (i = 0; i < keys.length; i++) {\n      key = keys[i];\n      for (j = 0; j < dataIndices.length; j++) {\n        // Use hasOwnProperty to protect against falsy values:\n        if (!dataUpdate[key].hasOwnProperty(j)) {\n          dataUpdate[key][j] = undefined;\n        }\n      }\n    }\n    if (shapesUpdated) {\n      Registry.call('_guiUpdate', gd, dataUpdate, {\n        shapes: updatedShapes\n      }, dataIndices);\n    } else {\n      Registry.call('_guiRestyle', gd, dataUpdate, dataIndices);\n    }\n  }\n};","map":{"version":3,"names":["Registry","require","Lib","pushUnique","SHOWISOLATETIP","module","exports","handleClick","g","gd","numClicks","fullLayout","_fullLayout","_dragged","_editing","itemClick","legend","itemclick","itemDoubleClick","itemdoubleclick","groupClick","groupclick","data","_context","showTips","notifier","_","mode","toggleGroup","hiddenSlices","hiddenlabels","slice","legendItem","groupTitle","noClick","fullData","_fullData","shapesWithLegend","shapes","filter","d","showlegend","allLegendItems","concat","fullTrace","trace","_isShape","_fullInput","legendgroup","i","j","kcont","key","keys","val","dataUpdate","dataIndices","carrs","carrIdx","insertDataUpdate","traceIndex","value","attrIndex","indexOf","valueArray","visible","push","length","updatedShapes","map","_input","shapesUpdated","insertShapesUpdate","shapeIndex","setVisibility","visibility","fullInput","isShape","index","undefined","_index","hasTransform","groupbyIndices","getTransformIndices","lastGroupbyIndex","keyedContainer","curState","get","_group","set","nextVisibility","thisLegend","traceIs","thisLabel","label","thisLabelIndex","splice","changed","unhideList","calcdata","cdi","dLabel","q","pos","call","hasLegendgroup","traceIndicesInGroup","tracei","item","isClicked","isInGroup","notInLegend","otherState","_item","isIsolated","update","constructUpdate","updateKeys","Object","hasOwnProperty"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/components/legend/handle_click.js"],"sourcesContent":["'use strict';\n\nvar Registry = require('../../registry');\nvar Lib = require('../../lib');\nvar pushUnique = Lib.pushUnique;\n\nvar SHOWISOLATETIP = true;\n\nmodule.exports = function handleClick(g, gd, numClicks) {\n    var fullLayout = gd._fullLayout;\n\n    if(gd._dragged || gd._editing) return;\n\n    var itemClick = fullLayout.legend.itemclick;\n    var itemDoubleClick = fullLayout.legend.itemdoubleclick;\n    var groupClick = fullLayout.legend.groupclick;\n\n    if(numClicks === 1 && itemClick === 'toggle' && itemDoubleClick === 'toggleothers' &&\n        SHOWISOLATETIP && gd.data && gd._context.showTips\n    ) {\n        Lib.notifier(Lib._(gd, 'Double-click on legend to isolate one trace'), 'long');\n        SHOWISOLATETIP = false;\n    } else {\n        SHOWISOLATETIP = false;\n    }\n\n    var mode;\n    if(numClicks === 1) mode = itemClick;\n    else if(numClicks === 2) mode = itemDoubleClick;\n    if(!mode) return;\n\n    var toggleGroup = groupClick === 'togglegroup';\n\n    var hiddenSlices = fullLayout.hiddenlabels ?\n        fullLayout.hiddenlabels.slice() :\n        [];\n\n    var legendItem = g.data()[0][0];\n    if(legendItem.groupTitle && legendItem.noClick) return;\n\n    var fullData = gd._fullData;\n    var shapesWithLegend = (fullLayout.shapes || []).filter(function(d) { return d.showlegend; });\n    var allLegendItems = fullData.concat(shapesWithLegend);\n\n    var fullTrace = legendItem.trace;\n    if(fullTrace._isShape) {\n        fullTrace = fullTrace._fullInput;\n    }\n\n    var legendgroup = fullTrace.legendgroup;\n\n    var i, j, kcont, key, keys, val;\n    var dataUpdate = {};\n    var dataIndices = [];\n    var carrs = [];\n    var carrIdx = [];\n\n    function insertDataUpdate(traceIndex, value) {\n        var attrIndex = dataIndices.indexOf(traceIndex);\n        var valueArray = dataUpdate.visible;\n        if(!valueArray) {\n            valueArray = dataUpdate.visible = [];\n        }\n\n        if(dataIndices.indexOf(traceIndex) === -1) {\n            dataIndices.push(traceIndex);\n            attrIndex = dataIndices.length - 1;\n        }\n\n        valueArray[attrIndex] = value;\n\n        return attrIndex;\n    }\n\n    var updatedShapes = (fullLayout.shapes || []).map(function(d) {\n        return d._input;\n    });\n\n    var shapesUpdated = false;\n\n    function insertShapesUpdate(shapeIndex, value) {\n        updatedShapes[shapeIndex].visible = value;\n        shapesUpdated = true;\n    }\n\n    function setVisibility(fullTrace, visibility) {\n        if(legendItem.groupTitle && !toggleGroup) return;\n\n        var fullInput = fullTrace._fullInput || fullTrace;\n        var isShape = fullInput._isShape;\n        var index = fullInput.index;\n        if(index === undefined) index = fullInput._index;\n\n        if(Registry.hasTransform(fullInput, 'groupby')) {\n            var kcont = carrs[index];\n            if(!kcont) {\n                var groupbyIndices = Registry.getTransformIndices(fullInput, 'groupby');\n                var lastGroupbyIndex = groupbyIndices[groupbyIndices.length - 1];\n                kcont = Lib.keyedContainer(fullInput, 'transforms[' + lastGroupbyIndex + '].styles', 'target', 'value.visible');\n                carrs[index] = kcont;\n            }\n\n            var curState = kcont.get(fullTrace._group);\n\n            // If not specified, assume visible. This happens if there are other style\n            // properties set for a group but not the visibility. There are many similar\n            // ways to do this (e.g. why not just `curState = fullTrace.visible`??? The\n            // answer is: because it breaks other things like groupby trace names in\n            // subtle ways.)\n            if(curState === undefined) {\n                curState = true;\n            }\n\n            if(curState !== false) {\n                // true -> legendonly. All others toggle to true:\n                kcont.set(fullTrace._group, visibility);\n            }\n            carrIdx[index] = insertDataUpdate(index, fullInput.visible === false ? false : true);\n        } else {\n            // false -> false (not possible since will not be visible in legend)\n            // true -> legendonly\n            // legendonly -> true\n            var nextVisibility = fullInput.visible === false ? false : visibility;\n\n            if(isShape) {\n                insertShapesUpdate(index, nextVisibility);\n            } else {\n                insertDataUpdate(index, nextVisibility);\n            }\n        }\n    }\n\n    var thisLegend = fullTrace.legend;\n\n    var fullInput = fullTrace._fullInput;\n    var isShape = fullInput && fullInput._isShape;\n\n    if(!isShape && Registry.traceIs(fullTrace, 'pie-like')) {\n        var thisLabel = legendItem.label;\n        var thisLabelIndex = hiddenSlices.indexOf(thisLabel);\n\n        if(mode === 'toggle') {\n            if(thisLabelIndex === -1) hiddenSlices.push(thisLabel);\n            else hiddenSlices.splice(thisLabelIndex, 1);\n        } else if(mode === 'toggleothers') {\n            var changed = thisLabelIndex !== -1;\n            var unhideList = [];\n            for(i = 0; i < gd.calcdata.length; i++) {\n                var cdi = gd.calcdata[i];\n                for(j = 0; j < cdi.length; j++) {\n                    var d = cdi[j];\n                    var dLabel = d.label;\n\n                    // ensure we toggle slices that are in this legend)\n                    if(thisLegend === cdi[0].trace.legend) {\n                        if(thisLabel !== dLabel) {\n                            if(hiddenSlices.indexOf(dLabel) === -1) changed = true;\n                            pushUnique(hiddenSlices, dLabel);\n                            unhideList.push(dLabel);\n                        }\n                    }\n                }\n            }\n\n            if(!changed) {\n                for(var q = 0; q < unhideList.length; q++) {\n                    var pos = hiddenSlices.indexOf(unhideList[q]);\n                    if(pos !== -1) {\n                        hiddenSlices.splice(pos, 1);\n                    }\n                }\n            }\n        }\n\n        Registry.call('_guiRelayout', gd, 'hiddenlabels', hiddenSlices);\n    } else {\n        var hasLegendgroup = legendgroup && legendgroup.length;\n        var traceIndicesInGroup = [];\n        var tracei;\n        if(hasLegendgroup) {\n            for(i = 0; i < allLegendItems.length; i++) {\n                tracei = allLegendItems[i];\n                if(!tracei.visible) continue;\n                if(tracei.legendgroup === legendgroup) {\n                    traceIndicesInGroup.push(i);\n                }\n            }\n        }\n\n        if(mode === 'toggle') {\n            var nextVisibility;\n\n            switch(fullTrace.visible) {\n                case true:\n                    nextVisibility = 'legendonly';\n                    break;\n                case false:\n                    nextVisibility = false;\n                    break;\n                case 'legendonly':\n                    nextVisibility = true;\n                    break;\n            }\n\n            if(hasLegendgroup) {\n                if(toggleGroup) {\n                    for(i = 0; i < allLegendItems.length; i++) {\n                        var item = allLegendItems[i];\n                        if(item.visible !== false && item.legendgroup === legendgroup) {\n                            setVisibility(item, nextVisibility);\n                        }\n                    }\n                } else {\n                    setVisibility(fullTrace, nextVisibility);\n                }\n            } else {\n                setVisibility(fullTrace, nextVisibility);\n            }\n        } else if(mode === 'toggleothers') {\n            // Compute the clicked index. expandedIndex does what we want for expanded traces\n            // but also culls hidden traces. That means we have some work to do.\n            var isClicked, isInGroup, notInLegend, otherState, _item;\n            var isIsolated = true;\n            for(i = 0; i < allLegendItems.length; i++) {\n                _item = allLegendItems[i];\n                isClicked = _item === fullTrace;\n                notInLegend = _item.showlegend !== true;\n                if(isClicked || notInLegend) continue;\n\n                isInGroup = (hasLegendgroup && _item.legendgroup === legendgroup);\n\n                if(!isInGroup && _item.legend === thisLegend && _item.visible === true && !Registry.traceIs(_item, 'notLegendIsolatable')) {\n                    isIsolated = false;\n                    break;\n                }\n            }\n\n            for(i = 0; i < allLegendItems.length; i++) {\n                _item = allLegendItems[i];\n\n                // False is sticky; we don't change it. Also ensure we don't change states of itmes in other legend\n                if(_item.visible === false || _item.legend !== thisLegend) continue;\n\n                if(Registry.traceIs(_item, 'notLegendIsolatable')) {\n                    continue;\n                }\n\n                switch(fullTrace.visible) {\n                    case 'legendonly':\n                        setVisibility(_item, true);\n                        break;\n                    case true:\n                        otherState = isIsolated ? true : 'legendonly';\n                        isClicked = _item === fullTrace;\n                        // N.B. consider traces that have a set legendgroup as toggleable\n                        notInLegend = (_item.showlegend !== true && !_item.legendgroup);\n                        isInGroup = isClicked || (hasLegendgroup && _item.legendgroup === legendgroup);\n                        setVisibility(_item, (isInGroup || notInLegend) ? true : otherState);\n                        break;\n                }\n            }\n        }\n\n        for(i = 0; i < carrs.length; i++) {\n            kcont = carrs[i];\n            if(!kcont) continue;\n            var update = kcont.constructUpdate();\n\n            var updateKeys = Object.keys(update);\n            for(j = 0; j < updateKeys.length; j++) {\n                key = updateKeys[j];\n                val = dataUpdate[key] = dataUpdate[key] || [];\n                val[carrIdx[i]] = update[key];\n            }\n        }\n\n        // The length of the value arrays should be equal and any unspecified\n        // values should be explicitly undefined for them to get properly culled\n        // as updates and not accidentally reset to the default value. This fills\n        // out sparse arrays with the required number of undefined values:\n        keys = Object.keys(dataUpdate);\n        for(i = 0; i < keys.length; i++) {\n            key = keys[i];\n            for(j = 0; j < dataIndices.length; j++) {\n                // Use hasOwnProperty to protect against falsy values:\n                if(!dataUpdate[key].hasOwnProperty(j)) {\n                    dataUpdate[key][j] = undefined;\n                }\n            }\n        }\n\n        if(shapesUpdated) {\n            Registry.call('_guiUpdate', gd, dataUpdate, {shapes: updatedShapes}, dataIndices);\n        } else {\n            Registry.call('_guiRestyle', gd, dataUpdate, dataIndices);\n        }\n    }\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACxC,IAAIC,GAAG,GAAGD,OAAO,CAAC,WAAW,CAAC;AAC9B,IAAIE,UAAU,GAAGD,GAAG,CAACC,UAAU;AAE/B,IAAIC,cAAc,GAAG,IAAI;AAEzBC,MAAM,CAACC,OAAO,GAAG,SAASC,WAAWA,CAACC,CAAC,EAAEC,EAAE,EAAEC,SAAS,EAAE;EACpD,IAAIC,UAAU,GAAGF,EAAE,CAACG,WAAW;EAE/B,IAAGH,EAAE,CAACI,QAAQ,IAAIJ,EAAE,CAACK,QAAQ,EAAE;EAE/B,IAAIC,SAAS,GAAGJ,UAAU,CAACK,MAAM,CAACC,SAAS;EAC3C,IAAIC,eAAe,GAAGP,UAAU,CAACK,MAAM,CAACG,eAAe;EACvD,IAAIC,UAAU,GAAGT,UAAU,CAACK,MAAM,CAACK,UAAU;EAE7C,IAAGX,SAAS,KAAK,CAAC,IAAIK,SAAS,KAAK,QAAQ,IAAIG,eAAe,KAAK,cAAc,IAC9Ed,cAAc,IAAIK,EAAE,CAACa,IAAI,IAAIb,EAAE,CAACc,QAAQ,CAACC,QAAQ,EACnD;IACEtB,GAAG,CAACuB,QAAQ,CAACvB,GAAG,CAACwB,CAAC,CAACjB,EAAE,EAAE,6CAA6C,CAAC,EAAE,MAAM,CAAC;IAC9EL,cAAc,GAAG,KAAK;EAC1B,CAAC,MAAM;IACHA,cAAc,GAAG,KAAK;EAC1B;EAEA,IAAIuB,IAAI;EACR,IAAGjB,SAAS,KAAK,CAAC,EAAEiB,IAAI,GAAGZ,SAAS,CAAC,KAChC,IAAGL,SAAS,KAAK,CAAC,EAAEiB,IAAI,GAAGT,eAAe;EAC/C,IAAG,CAACS,IAAI,EAAE;EAEV,IAAIC,WAAW,GAAGR,UAAU,KAAK,aAAa;EAE9C,IAAIS,YAAY,GAAGlB,UAAU,CAACmB,YAAY,GACtCnB,UAAU,CAACmB,YAAY,CAACC,KAAK,CAAC,CAAC,GAC/B,EAAE;EAEN,IAAIC,UAAU,GAAGxB,CAAC,CAACc,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/B,IAAGU,UAAU,CAACC,UAAU,IAAID,UAAU,CAACE,OAAO,EAAE;EAEhD,IAAIC,QAAQ,GAAG1B,EAAE,CAAC2B,SAAS;EAC3B,IAAIC,gBAAgB,GAAG,CAAC1B,UAAU,CAAC2B,MAAM,IAAI,EAAE,EAAEC,MAAM,CAAC,UAASC,CAAC,EAAE;IAAE,OAAOA,CAAC,CAACC,UAAU;EAAE,CAAC,CAAC;EAC7F,IAAIC,cAAc,GAAGP,QAAQ,CAACQ,MAAM,CAACN,gBAAgB,CAAC;EAEtD,IAAIO,SAAS,GAAGZ,UAAU,CAACa,KAAK;EAChC,IAAGD,SAAS,CAACE,QAAQ,EAAE;IACnBF,SAAS,GAAGA,SAAS,CAACG,UAAU;EACpC;EAEA,IAAIC,WAAW,GAAGJ,SAAS,CAACI,WAAW;EAEvC,IAAIC,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG;EAC/B,IAAIC,UAAU,GAAG,CAAC,CAAC;EACnB,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAIC,KAAK,GAAG,EAAE;EACd,IAAIC,OAAO,GAAG,EAAE;EAEhB,SAASC,gBAAgBA,CAACC,UAAU,EAAEC,KAAK,EAAE;IACzC,IAAIC,SAAS,GAAGN,WAAW,CAACO,OAAO,CAACH,UAAU,CAAC;IAC/C,IAAII,UAAU,GAAGT,UAAU,CAACU,OAAO;IACnC,IAAG,CAACD,UAAU,EAAE;MACZA,UAAU,GAAGT,UAAU,CAACU,OAAO,GAAG,EAAE;IACxC;IAEA,IAAGT,WAAW,CAACO,OAAO,CAACH,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE;MACvCJ,WAAW,CAACU,IAAI,CAACN,UAAU,CAAC;MAC5BE,SAAS,GAAGN,WAAW,CAACW,MAAM,GAAG,CAAC;IACtC;IAEAH,UAAU,CAACF,SAAS,CAAC,GAAGD,KAAK;IAE7B,OAAOC,SAAS;EACpB;EAEA,IAAIM,aAAa,GAAG,CAACzD,UAAU,CAAC2B,MAAM,IAAI,EAAE,EAAE+B,GAAG,CAAC,UAAS7B,CAAC,EAAE;IAC1D,OAAOA,CAAC,CAAC8B,MAAM;EACnB,CAAC,CAAC;EAEF,IAAIC,aAAa,GAAG,KAAK;EAEzB,SAASC,kBAAkBA,CAACC,UAAU,EAAEZ,KAAK,EAAE;IAC3CO,aAAa,CAACK,UAAU,CAAC,CAACR,OAAO,GAAGJ,KAAK;IACzCU,aAAa,GAAG,IAAI;EACxB;EAEA,SAASG,aAAaA,CAAC9B,SAAS,EAAE+B,UAAU,EAAE;IAC1C,IAAG3C,UAAU,CAACC,UAAU,IAAI,CAACL,WAAW,EAAE;IAE1C,IAAIgD,SAAS,GAAGhC,SAAS,CAACG,UAAU,IAAIH,SAAS;IACjD,IAAIiC,OAAO,GAAGD,SAAS,CAAC9B,QAAQ;IAChC,IAAIgC,KAAK,GAAGF,SAAS,CAACE,KAAK;IAC3B,IAAGA,KAAK,KAAKC,SAAS,EAAED,KAAK,GAAGF,SAAS,CAACI,MAAM;IAEhD,IAAGhF,QAAQ,CAACiF,YAAY,CAACL,SAAS,EAAE,SAAS,CAAC,EAAE;MAC5C,IAAIzB,KAAK,GAAGM,KAAK,CAACqB,KAAK,CAAC;MACxB,IAAG,CAAC3B,KAAK,EAAE;QACP,IAAI+B,cAAc,GAAGlF,QAAQ,CAACmF,mBAAmB,CAACP,SAAS,EAAE,SAAS,CAAC;QACvE,IAAIQ,gBAAgB,GAAGF,cAAc,CAACA,cAAc,CAACf,MAAM,GAAG,CAAC,CAAC;QAChEhB,KAAK,GAAGjD,GAAG,CAACmF,cAAc,CAACT,SAAS,EAAE,aAAa,GAAGQ,gBAAgB,GAAG,UAAU,EAAE,QAAQ,EAAE,eAAe,CAAC;QAC/G3B,KAAK,CAACqB,KAAK,CAAC,GAAG3B,KAAK;MACxB;MAEA,IAAImC,QAAQ,GAAGnC,KAAK,CAACoC,GAAG,CAAC3C,SAAS,CAAC4C,MAAM,CAAC;;MAE1C;MACA;MACA;MACA;MACA;MACA,IAAGF,QAAQ,KAAKP,SAAS,EAAE;QACvBO,QAAQ,GAAG,IAAI;MACnB;MAEA,IAAGA,QAAQ,KAAK,KAAK,EAAE;QACnB;QACAnC,KAAK,CAACsC,GAAG,CAAC7C,SAAS,CAAC4C,MAAM,EAAEb,UAAU,CAAC;MAC3C;MACAjB,OAAO,CAACoB,KAAK,CAAC,GAAGnB,gBAAgB,CAACmB,KAAK,EAAEF,SAAS,CAACX,OAAO,KAAK,KAAK,GAAG,KAAK,GAAG,IAAI,CAAC;IACxF,CAAC,MAAM;MACH;MACA;MACA;MACA,IAAIyB,cAAc,GAAGd,SAAS,CAACX,OAAO,KAAK,KAAK,GAAG,KAAK,GAAGU,UAAU;MAErE,IAAGE,OAAO,EAAE;QACRL,kBAAkB,CAACM,KAAK,EAAEY,cAAc,CAAC;MAC7C,CAAC,MAAM;QACH/B,gBAAgB,CAACmB,KAAK,EAAEY,cAAc,CAAC;MAC3C;IACJ;EACJ;EAEA,IAAIC,UAAU,GAAG/C,SAAS,CAAC5B,MAAM;EAEjC,IAAI4D,SAAS,GAAGhC,SAAS,CAACG,UAAU;EACpC,IAAI8B,OAAO,GAAGD,SAAS,IAAIA,SAAS,CAAC9B,QAAQ;EAE7C,IAAG,CAAC+B,OAAO,IAAI7E,QAAQ,CAAC4F,OAAO,CAAChD,SAAS,EAAE,UAAU,CAAC,EAAE;IACpD,IAAIiD,SAAS,GAAG7D,UAAU,CAAC8D,KAAK;IAChC,IAAIC,cAAc,GAAGlE,YAAY,CAACkC,OAAO,CAAC8B,SAAS,CAAC;IAEpD,IAAGlE,IAAI,KAAK,QAAQ,EAAE;MAClB,IAAGoE,cAAc,KAAK,CAAC,CAAC,EAAElE,YAAY,CAACqC,IAAI,CAAC2B,SAAS,CAAC,CAAC,KAClDhE,YAAY,CAACmE,MAAM,CAACD,cAAc,EAAE,CAAC,CAAC;IAC/C,CAAC,MAAM,IAAGpE,IAAI,KAAK,cAAc,EAAE;MAC/B,IAAIsE,OAAO,GAAGF,cAAc,KAAK,CAAC,CAAC;MACnC,IAAIG,UAAU,GAAG,EAAE;MACnB,KAAIjD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxC,EAAE,CAAC0F,QAAQ,CAAChC,MAAM,EAAElB,CAAC,EAAE,EAAE;QACpC,IAAImD,GAAG,GAAG3F,EAAE,CAAC0F,QAAQ,CAAClD,CAAC,CAAC;QACxB,KAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkD,GAAG,CAACjC,MAAM,EAAEjB,CAAC,EAAE,EAAE;UAC5B,IAAIV,CAAC,GAAG4D,GAAG,CAAClD,CAAC,CAAC;UACd,IAAImD,MAAM,GAAG7D,CAAC,CAACsD,KAAK;;UAEpB;UACA,IAAGH,UAAU,KAAKS,GAAG,CAAC,CAAC,CAAC,CAACvD,KAAK,CAAC7B,MAAM,EAAE;YACnC,IAAG6E,SAAS,KAAKQ,MAAM,EAAE;cACrB,IAAGxE,YAAY,CAACkC,OAAO,CAACsC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAEJ,OAAO,GAAG,IAAI;cACtD9F,UAAU,CAAC0B,YAAY,EAAEwE,MAAM,CAAC;cAChCH,UAAU,CAAChC,IAAI,CAACmC,MAAM,CAAC;YAC3B;UACJ;QACJ;MACJ;MAEA,IAAG,CAACJ,OAAO,EAAE;QACT,KAAI,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,CAAC/B,MAAM,EAAEmC,CAAC,EAAE,EAAE;UACvC,IAAIC,GAAG,GAAG1E,YAAY,CAACkC,OAAO,CAACmC,UAAU,CAACI,CAAC,CAAC,CAAC;UAC7C,IAAGC,GAAG,KAAK,CAAC,CAAC,EAAE;YACX1E,YAAY,CAACmE,MAAM,CAACO,GAAG,EAAE,CAAC,CAAC;UAC/B;QACJ;MACJ;IACJ;IAEAvG,QAAQ,CAACwG,IAAI,CAAC,cAAc,EAAE/F,EAAE,EAAE,cAAc,EAAEoB,YAAY,CAAC;EACnE,CAAC,MAAM;IACH,IAAI4E,cAAc,GAAGzD,WAAW,IAAIA,WAAW,CAACmB,MAAM;IACtD,IAAIuC,mBAAmB,GAAG,EAAE;IAC5B,IAAIC,MAAM;IACV,IAAGF,cAAc,EAAE;MACf,KAAIxD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,cAAc,CAACyB,MAAM,EAAElB,CAAC,EAAE,EAAE;QACvC0D,MAAM,GAAGjE,cAAc,CAACO,CAAC,CAAC;QAC1B,IAAG,CAAC0D,MAAM,CAAC1C,OAAO,EAAE;QACpB,IAAG0C,MAAM,CAAC3D,WAAW,KAAKA,WAAW,EAAE;UACnC0D,mBAAmB,CAACxC,IAAI,CAACjB,CAAC,CAAC;QAC/B;MACJ;IACJ;IAEA,IAAGtB,IAAI,KAAK,QAAQ,EAAE;MAClB,IAAI+D,cAAc;MAElB,QAAO9C,SAAS,CAACqB,OAAO;QACpB,KAAK,IAAI;UACLyB,cAAc,GAAG,YAAY;UAC7B;QACJ,KAAK,KAAK;UACNA,cAAc,GAAG,KAAK;UACtB;QACJ,KAAK,YAAY;UACbA,cAAc,GAAG,IAAI;UACrB;MACR;MAEA,IAAGe,cAAc,EAAE;QACf,IAAG7E,WAAW,EAAE;UACZ,KAAIqB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,cAAc,CAACyB,MAAM,EAAElB,CAAC,EAAE,EAAE;YACvC,IAAI2D,IAAI,GAAGlE,cAAc,CAACO,CAAC,CAAC;YAC5B,IAAG2D,IAAI,CAAC3C,OAAO,KAAK,KAAK,IAAI2C,IAAI,CAAC5D,WAAW,KAAKA,WAAW,EAAE;cAC3D0B,aAAa,CAACkC,IAAI,EAAElB,cAAc,CAAC;YACvC;UACJ;QACJ,CAAC,MAAM;UACHhB,aAAa,CAAC9B,SAAS,EAAE8C,cAAc,CAAC;QAC5C;MACJ,CAAC,MAAM;QACHhB,aAAa,CAAC9B,SAAS,EAAE8C,cAAc,CAAC;MAC5C;IACJ,CAAC,MAAM,IAAG/D,IAAI,KAAK,cAAc,EAAE;MAC/B;MACA;MACA,IAAIkF,SAAS,EAAEC,SAAS,EAAEC,WAAW,EAAEC,UAAU,EAAEC,KAAK;MACxD,IAAIC,UAAU,GAAG,IAAI;MACrB,KAAIjE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,cAAc,CAACyB,MAAM,EAAElB,CAAC,EAAE,EAAE;QACvCgE,KAAK,GAAGvE,cAAc,CAACO,CAAC,CAAC;QACzB4D,SAAS,GAAGI,KAAK,KAAKrE,SAAS;QAC/BmE,WAAW,GAAGE,KAAK,CAACxE,UAAU,KAAK,IAAI;QACvC,IAAGoE,SAAS,IAAIE,WAAW,EAAE;QAE7BD,SAAS,GAAIL,cAAc,IAAIQ,KAAK,CAACjE,WAAW,KAAKA,WAAY;QAEjE,IAAG,CAAC8D,SAAS,IAAIG,KAAK,CAACjG,MAAM,KAAK2E,UAAU,IAAIsB,KAAK,CAAChD,OAAO,KAAK,IAAI,IAAI,CAACjE,QAAQ,CAAC4F,OAAO,CAACqB,KAAK,EAAE,qBAAqB,CAAC,EAAE;UACvHC,UAAU,GAAG,KAAK;UAClB;QACJ;MACJ;MAEA,KAAIjE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,cAAc,CAACyB,MAAM,EAAElB,CAAC,EAAE,EAAE;QACvCgE,KAAK,GAAGvE,cAAc,CAACO,CAAC,CAAC;;QAEzB;QACA,IAAGgE,KAAK,CAAChD,OAAO,KAAK,KAAK,IAAIgD,KAAK,CAACjG,MAAM,KAAK2E,UAAU,EAAE;QAE3D,IAAG3F,QAAQ,CAAC4F,OAAO,CAACqB,KAAK,EAAE,qBAAqB,CAAC,EAAE;UAC/C;QACJ;QAEA,QAAOrE,SAAS,CAACqB,OAAO;UACpB,KAAK,YAAY;YACbS,aAAa,CAACuC,KAAK,EAAE,IAAI,CAAC;YAC1B;UACJ,KAAK,IAAI;YACLD,UAAU,GAAGE,UAAU,GAAG,IAAI,GAAG,YAAY;YAC7CL,SAAS,GAAGI,KAAK,KAAKrE,SAAS;YAC/B;YACAmE,WAAW,GAAIE,KAAK,CAACxE,UAAU,KAAK,IAAI,IAAI,CAACwE,KAAK,CAACjE,WAAY;YAC/D8D,SAAS,GAAGD,SAAS,IAAKJ,cAAc,IAAIQ,KAAK,CAACjE,WAAW,KAAKA,WAAY;YAC9E0B,aAAa,CAACuC,KAAK,EAAGH,SAAS,IAAIC,WAAW,GAAI,IAAI,GAAGC,UAAU,CAAC;YACpE;QACR;MACJ;IACJ;IAEA,KAAI/D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,KAAK,CAACU,MAAM,EAAElB,CAAC,EAAE,EAAE;MAC9BE,KAAK,GAAGM,KAAK,CAACR,CAAC,CAAC;MAChB,IAAG,CAACE,KAAK,EAAE;MACX,IAAIgE,MAAM,GAAGhE,KAAK,CAACiE,eAAe,CAAC,CAAC;MAEpC,IAAIC,UAAU,GAAGC,MAAM,CAACjE,IAAI,CAAC8D,MAAM,CAAC;MACpC,KAAIjE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmE,UAAU,CAAClD,MAAM,EAAEjB,CAAC,EAAE,EAAE;QACnCE,GAAG,GAAGiE,UAAU,CAACnE,CAAC,CAAC;QACnBI,GAAG,GAAGC,UAAU,CAACH,GAAG,CAAC,GAAGG,UAAU,CAACH,GAAG,CAAC,IAAI,EAAE;QAC7CE,GAAG,CAACI,OAAO,CAACT,CAAC,CAAC,CAAC,GAAGkE,MAAM,CAAC/D,GAAG,CAAC;MACjC;IACJ;;IAEA;IACA;IACA;IACA;IACAC,IAAI,GAAGiE,MAAM,CAACjE,IAAI,CAACE,UAAU,CAAC;IAC9B,KAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,IAAI,CAACc,MAAM,EAAElB,CAAC,EAAE,EAAE;MAC7BG,GAAG,GAAGC,IAAI,CAACJ,CAAC,CAAC;MACb,KAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,WAAW,CAACW,MAAM,EAAEjB,CAAC,EAAE,EAAE;QACpC;QACA,IAAG,CAACK,UAAU,CAACH,GAAG,CAAC,CAACmE,cAAc,CAACrE,CAAC,CAAC,EAAE;UACnCK,UAAU,CAACH,GAAG,CAAC,CAACF,CAAC,CAAC,GAAG6B,SAAS;QAClC;MACJ;IACJ;IAEA,IAAGR,aAAa,EAAE;MACdvE,QAAQ,CAACwG,IAAI,CAAC,YAAY,EAAE/F,EAAE,EAAE8C,UAAU,EAAE;QAACjB,MAAM,EAAE8B;MAAa,CAAC,EAAEZ,WAAW,CAAC;IACrF,CAAC,MAAM;MACHxD,QAAQ,CAACwG,IAAI,CAAC,aAAa,EAAE/F,EAAE,EAAE8C,UAAU,EAAEC,WAAW,CAAC;IAC7D;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}