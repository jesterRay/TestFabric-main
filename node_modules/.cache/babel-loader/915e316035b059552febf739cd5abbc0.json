{"ast":null,"code":"export function concatUrlPath(url, name, id) {\n  // Clean up the product name and limit it to the first four words\n  const formattedName = name.toLowerCase().replace(/[^\\w\\s-]/g, '') // Remove invalid characters except spaces and hyphens\n  .split(/\\s+/) // Split the name into words\n  .slice(0, 4) // Take the first four words\n  .join('-'); // Join the words with hyphens\n\n  // Concatenate the name and id\n  const fullPath = `${formattedName}-${id}`;\n  return `/${url}/${fullPath}`;\n}\nexport function extractIdFromUrlPath(path) {\n  // Match the last number in the URL after a hyphen or standalone\n  const segments = path.split('-'); // Split the string by '-'\n  const lastSegment = segments.pop(); // Get the last segment\n\n  if (!isNaN(lastSegment)) {\n    return lastSegment;\n  }\n  return null;\n}","map":{"version":3,"names":["concatUrlPath","url","name","id","formattedName","toLowerCase","replace","split","slice","join","fullPath","extractIdFromUrlPath","path","segments","lastSegment","pop","isNaN"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/src/helpers/concatUrlPath.js"],"sourcesContent":["export function concatUrlPath(url, name, id) {\r\n  // Clean up the product name and limit it to the first four words\r\n  const formattedName = name\r\n      .toLowerCase()\r\n      .replace(/[^\\w\\s-]/g, '') // Remove invalid characters except spaces and hyphens\r\n      .split(/\\s+/) // Split the name into words\r\n      .slice(0, 4) // Take the first four words\r\n      .join('-'); // Join the words with hyphens\r\n\r\n  // Concatenate the name and id\r\n  const fullPath = `${formattedName}-${id}`;\r\n  return `/${url}/${fullPath}`;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport function extractIdFromUrlPath(path) {\r\n  // Match the last number in the URL after a hyphen or standalone\r\n  const segments = path.split('-'); // Split the string by '-'\r\n  const lastSegment = segments.pop(); // Get the last segment\r\n\r\n  if (!isNaN(lastSegment)) {\r\n    return lastSegment;\r\n  }\r\n  return null;\r\n}\r\n\r\n\r\n"],"mappings":"AAAA,OAAO,SAASA,aAAaA,CAACC,GAAG,EAAEC,IAAI,EAAEC,EAAE,EAAE;EAC3C;EACA,MAAMC,aAAa,GAAGF,IAAI,CACrBG,WAAW,CAAC,CAAC,CACbC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;EAAA,CACzBC,KAAK,CAAC,KAAK,CAAC,CAAC;EAAA,CACbC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAAA,CACZC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;;EAEhB;EACA,MAAMC,QAAQ,GAAG,GAAGN,aAAa,IAAID,EAAE,EAAE;EACzC,OAAO,IAAIF,GAAG,IAAIS,QAAQ,EAAE;AAC9B;AAMA,OAAO,SAASC,oBAAoBA,CAACC,IAAI,EAAE;EACzC;EACA,MAAMC,QAAQ,GAAGD,IAAI,CAACL,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;EAClC,MAAMO,WAAW,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEpC,IAAI,CAACC,KAAK,CAACF,WAAW,CAAC,EAAE;IACvB,OAAOA,WAAW;EACpB;EACA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module"}