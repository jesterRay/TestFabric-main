{"ast":null,"code":"'use strict';\n\nvar colorAttrs = require('../../components/color/attributes');\nvar domainAttrs = require('../domain').attributes;\nvar dash = require('../../components/drawing/attributes').dash;\nvar constants = require('./constants');\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar sortObjectKeys = require('../../lib/sort_object_keys');\nvar geoAxesAttrs = {\n  range: {\n    valType: 'info_array',\n    items: [{\n      valType: 'number'\n    }, {\n      valType: 'number'\n    }],\n    description: ['Sets the range of this axis (in degrees),', 'sets the map\\'s clipped coordinates.'].join(' ')\n  },\n  showgrid: {\n    valType: 'boolean',\n    dflt: false,\n    description: 'Sets whether or not graticule are shown on the map.'\n  },\n  tick0: {\n    valType: 'number',\n    dflt: 0,\n    description: ['Sets the graticule\\'s starting tick longitude/latitude.'].join(' ')\n  },\n  dtick: {\n    valType: 'number',\n    description: ['Sets the graticule\\'s longitude/latitude tick step.'].join(' ')\n  },\n  gridcolor: {\n    valType: 'color',\n    dflt: colorAttrs.lightLine,\n    description: ['Sets the graticule\\'s stroke color.'].join(' ')\n  },\n  gridwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: ['Sets the graticule\\'s stroke width (in px).'].join(' ')\n  },\n  griddash: dash\n};\nvar attrs = module.exports = overrideAll({\n  domain: domainAttrs({\n    name: 'geo'\n  }, {\n    description: ['Note that geo subplots are constrained by domain.', 'In general, when `projection.scale` is set to 1.', 'a map will fit either its x or y domain, but not both.'].join(' ')\n  }),\n  fitbounds: {\n    valType: 'enumerated',\n    values: [false, 'locations', 'geojson'],\n    dflt: false,\n    editType: 'plot',\n    description: ['Determines if this subplot\\'s view settings are auto-computed to fit trace data.', 'On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled.', 'On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`,', 'and `projection.rotation.lon` getting auto-filled.', 'On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`,', '`projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lonaxis.range`', 'getting auto-filled.',\n    // TODO we should auto-fill `projection.parallels` for maps\n    // with conic projection, but how?\n\n    'If *locations*, only the trace\\'s visible locations are considered in the `fitbounds` computations.', 'If *geojson*, the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations,', 'Defaults to *false*.'].join(' ')\n  },\n  resolution: {\n    valType: 'enumerated',\n    values: [110, 50],\n    dflt: 110,\n    coerceNumber: true,\n    description: ['Sets the resolution of the base layers.', 'The values have units of km/mm', 'e.g. 110 corresponds to a scale ratio of 1:110,000,000.'].join(' ')\n  },\n  scope: {\n    valType: 'enumerated',\n    values: sortObjectKeys(constants.scopeDefaults),\n    dflt: 'world',\n    description: 'Set the scope of the map.'\n  },\n  projection: {\n    type: {\n      valType: 'enumerated',\n      values: sortObjectKeys(constants.projNames),\n      description: 'Sets the projection type.'\n    },\n    rotation: {\n      lon: {\n        valType: 'number',\n        description: ['Rotates the map along parallels', '(in degrees East).', 'Defaults to the center of the `lonaxis.range` values.'].join(' ')\n      },\n      lat: {\n        valType: 'number',\n        description: ['Rotates the map along meridians', '(in degrees North).'].join(' ')\n      },\n      roll: {\n        valType: 'number',\n        description: ['Roll the map (in degrees)', 'For example, a roll of *180* makes the map appear upside down.'].join(' ')\n      }\n    },\n    tilt: {\n      valType: 'number',\n      dflt: 0,\n      description: ['For satellite projection type only.', 'Sets the tilt angle of perspective projection.'].join(' ')\n    },\n    distance: {\n      valType: 'number',\n      min: 1.001,\n      dflt: 2,\n      description: ['For satellite projection type only.', 'Sets the distance from the center of the sphere to the point of view', 'as a proportion of the sphereâ€™s radius.'].join(' ')\n    },\n    parallels: {\n      valType: 'info_array',\n      items: [{\n        valType: 'number'\n      }, {\n        valType: 'number'\n      }],\n      description: ['For conic projection types only.', 'Sets the parallels (tangent, secant)', 'where the cone intersects the sphere.'].join(' ')\n    },\n    scale: {\n      valType: 'number',\n      min: 0,\n      dflt: 1,\n      description: ['Zooms in or out on the map view.', 'A scale of *1* corresponds to the largest zoom level', 'that fits the map\\'s lon and lat ranges. '].join(' ')\n    }\n  },\n  center: {\n    lon: {\n      valType: 'number',\n      description: ['Sets the longitude of the map\\'s center.', 'By default, the map\\'s longitude center lies at the middle of the longitude range', 'for scoped projection and above `projection.rotation.lon` otherwise.'].join(' ')\n    },\n    lat: {\n      valType: 'number',\n      description: ['Sets the latitude of the map\\'s center.', 'For all projection types, the map\\'s latitude center lies', 'at the middle of the latitude range by default.'].join(' ')\n    }\n  },\n  visible: {\n    valType: 'boolean',\n    dflt: true,\n    description: 'Sets the default visibility of the base layers.'\n  },\n  showcoastlines: {\n    valType: 'boolean',\n    description: 'Sets whether or not the coastlines are drawn.'\n  },\n  coastlinecolor: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets the coastline color.'\n  },\n  coastlinewidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the coastline stroke width (in px).'\n  },\n  showland: {\n    valType: 'boolean',\n    dflt: false,\n    description: 'Sets whether or not land masses are filled in color.'\n  },\n  landcolor: {\n    valType: 'color',\n    dflt: constants.landColor,\n    description: 'Sets the land mass color.'\n  },\n  showocean: {\n    valType: 'boolean',\n    dflt: false,\n    description: 'Sets whether or not oceans are filled in color.'\n  },\n  oceancolor: {\n    valType: 'color',\n    dflt: constants.waterColor,\n    description: 'Sets the ocean color'\n  },\n  showlakes: {\n    valType: 'boolean',\n    dflt: false,\n    description: 'Sets whether or not lakes are drawn.'\n  },\n  lakecolor: {\n    valType: 'color',\n    dflt: constants.waterColor,\n    description: 'Sets the color of the lakes.'\n  },\n  showrivers: {\n    valType: 'boolean',\n    dflt: false,\n    description: 'Sets whether or not rivers are drawn.'\n  },\n  rivercolor: {\n    valType: 'color',\n    dflt: constants.waterColor,\n    description: 'Sets color of the rivers.'\n  },\n  riverwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the stroke width (in px) of the rivers.'\n  },\n  showcountries: {\n    valType: 'boolean',\n    description: 'Sets whether or not country boundaries are drawn.'\n  },\n  countrycolor: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets line color of the country boundaries.'\n  },\n  countrywidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: 'Sets line width (in px) of the country boundaries.'\n  },\n  showsubunits: {\n    valType: 'boolean',\n    description: ['Sets whether or not boundaries of subunits within countries', '(e.g. states, provinces) are drawn.'].join(' ')\n  },\n  subunitcolor: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets the color of the subunits boundaries.'\n  },\n  subunitwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the stroke width (in px) of the subunits boundaries.'\n  },\n  showframe: {\n    valType: 'boolean',\n    description: 'Sets whether or not a frame is drawn around the map.'\n  },\n  framecolor: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    description: 'Sets the color the frame.'\n  },\n  framewidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: 'Sets the stroke width (in px) of the frame.'\n  },\n  bgcolor: {\n    valType: 'color',\n    dflt: colorAttrs.background,\n    description: 'Set the background color of the map'\n  },\n  lonaxis: geoAxesAttrs,\n  lataxis: geoAxesAttrs\n}, 'plot', 'from-root');\n\n// set uirevision outside of overrideAll so it can be `editType: 'none'`\nattrs.uirevision = {\n  valType: 'any',\n  editType: 'none',\n  description: ['Controls persistence of user-driven changes in the view', '(projection and center). Defaults to `layout.uirevision`.'].join(' ')\n};","map":{"version":3,"names":["colorAttrs","require","domainAttrs","attributes","dash","constants","overrideAll","sortObjectKeys","geoAxesAttrs","range","valType","items","description","join","showgrid","dflt","tick0","dtick","gridcolor","lightLine","gridwidth","min","griddash","attrs","module","exports","domain","name","fitbounds","values","editType","resolution","coerceNumber","scope","scopeDefaults","projection","type","projNames","rotation","lon","lat","roll","tilt","distance","parallels","scale","center","visible","showcoastlines","coastlinecolor","defaultLine","coastlinewidth","showland","landcolor","landColor","showocean","oceancolor","waterColor","showlakes","lakecolor","showrivers","rivercolor","riverwidth","showcountries","countrycolor","countrywidth","showsubunits","subunitcolor","subunitwidth","showframe","framecolor","framewidth","bgcolor","background","lonaxis","lataxis","uirevision"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/plots/geo/layout_attributes.js"],"sourcesContent":["'use strict';\n\nvar colorAttrs = require('../../components/color/attributes');\nvar domainAttrs = require('../domain').attributes;\nvar dash = require('../../components/drawing/attributes').dash;\nvar constants = require('./constants');\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar sortObjectKeys = require('../../lib/sort_object_keys');\n\nvar geoAxesAttrs = {\n    range: {\n        valType: 'info_array',\n        items: [\n            {valType: 'number'},\n            {valType: 'number'}\n        ],\n        description: [\n            'Sets the range of this axis (in degrees),',\n            'sets the map\\'s clipped coordinates.'\n        ].join(' ')\n    },\n    showgrid: {\n        valType: 'boolean',\n        dflt: false,\n        description: 'Sets whether or not graticule are shown on the map.'\n    },\n    tick0: {\n        valType: 'number',\n        dflt: 0,\n        description: [\n            'Sets the graticule\\'s starting tick longitude/latitude.'\n        ].join(' ')\n    },\n    dtick: {\n        valType: 'number',\n        description: [\n            'Sets the graticule\\'s longitude/latitude tick step.'\n        ].join(' ')\n    },\n    gridcolor: {\n        valType: 'color',\n        dflt: colorAttrs.lightLine,\n        description: [\n            'Sets the graticule\\'s stroke color.'\n        ].join(' ')\n    },\n    gridwidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        description: [\n            'Sets the graticule\\'s stroke width (in px).'\n        ].join(' ')\n    },\n    griddash: dash\n};\n\nvar attrs = module.exports = overrideAll({\n    domain: domainAttrs({name: 'geo'}, {\n        description: [\n            'Note that geo subplots are constrained by domain.',\n            'In general, when `projection.scale` is set to 1.',\n            'a map will fit either its x or y domain, but not both.'\n        ].join(' ')\n    }),\n\n    fitbounds: {\n        valType: 'enumerated',\n        values: [false, 'locations', 'geojson'],\n        dflt: false,\n        editType: 'plot',\n        description: [\n            'Determines if this subplot\\'s view settings are auto-computed to fit trace data.',\n\n            'On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled.',\n\n            'On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`,',\n            'and `projection.rotation.lon` getting auto-filled.',\n\n            'On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`,',\n            '`projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lonaxis.range`',\n            'getting auto-filled.',\n\n            // TODO we should auto-fill `projection.parallels` for maps\n            // with conic projection, but how?\n\n            'If *locations*, only the trace\\'s visible locations are considered in the `fitbounds` computations.',\n            'If *geojson*, the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations,',\n            'Defaults to *false*.'\n        ].join(' ')\n    },\n\n    resolution: {\n        valType: 'enumerated',\n        values: [110, 50],\n        dflt: 110,\n        coerceNumber: true,\n        description: [\n            'Sets the resolution of the base layers.',\n            'The values have units of km/mm',\n            'e.g. 110 corresponds to a scale ratio of 1:110,000,000.'\n        ].join(' ')\n    },\n    scope: {\n        valType: 'enumerated',\n        values: sortObjectKeys(constants.scopeDefaults),\n        dflt: 'world',\n        description: 'Set the scope of the map.'\n    },\n    projection: {\n        type: {\n            valType: 'enumerated',\n            values: sortObjectKeys(constants.projNames),\n            description: 'Sets the projection type.'\n        },\n        rotation: {\n            lon: {\n                valType: 'number',\n                description: [\n                    'Rotates the map along parallels',\n                    '(in degrees East).',\n                    'Defaults to the center of the `lonaxis.range` values.'\n                ].join(' ')\n            },\n            lat: {\n                valType: 'number',\n                description: [\n                    'Rotates the map along meridians',\n                    '(in degrees North).'\n                ].join(' ')\n            },\n            roll: {\n                valType: 'number',\n                description: [\n                    'Roll the map (in degrees)',\n                    'For example, a roll of *180* makes the map appear upside down.'\n                ].join(' ')\n            }\n        },\n        tilt: {\n            valType: 'number',\n            dflt: 0,\n            description: [\n                'For satellite projection type only.',\n                'Sets the tilt angle of perspective projection.'\n            ].join(' ')\n        },\n        distance: {\n            valType: 'number',\n            min: 1.001,\n            dflt: 2,\n            description: [\n                'For satellite projection type only.',\n                'Sets the distance from the center of the sphere to the point of view',\n                'as a proportion of the sphereâ€™s radius.'\n            ].join(' ')\n        },\n        parallels: {\n            valType: 'info_array',\n            items: [\n                {valType: 'number'},\n                {valType: 'number'}\n            ],\n            description: [\n                'For conic projection types only.',\n                'Sets the parallels (tangent, secant)',\n                'where the cone intersects the sphere.'\n            ].join(' ')\n        },\n        scale: {\n            valType: 'number',\n            min: 0,\n            dflt: 1,\n            description: [\n                'Zooms in or out on the map view.',\n                'A scale of *1* corresponds to the largest zoom level',\n                'that fits the map\\'s lon and lat ranges. '\n            ].join(' ')\n        },\n    },\n    center: {\n        lon: {\n            valType: 'number',\n            description: [\n                'Sets the longitude of the map\\'s center.',\n                'By default, the map\\'s longitude center lies at the middle of the longitude range',\n                'for scoped projection and above `projection.rotation.lon` otherwise.'\n            ].join(' ')\n        },\n        lat: {\n            valType: 'number',\n            description: [\n                'Sets the latitude of the map\\'s center.',\n                'For all projection types, the map\\'s latitude center lies',\n                'at the middle of the latitude range by default.'\n            ].join(' ')\n        }\n    },\n    visible: {\n        valType: 'boolean',\n        dflt: true,\n        description: 'Sets the default visibility of the base layers.'\n    },\n    showcoastlines: {\n        valType: 'boolean',\n        description: 'Sets whether or not the coastlines are drawn.'\n    },\n    coastlinecolor: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        description: 'Sets the coastline color.'\n    },\n    coastlinewidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        description: 'Sets the coastline stroke width (in px).'\n    },\n    showland: {\n        valType: 'boolean',\n        dflt: false,\n        description: 'Sets whether or not land masses are filled in color.'\n    },\n    landcolor: {\n        valType: 'color',\n        dflt: constants.landColor,\n        description: 'Sets the land mass color.'\n    },\n    showocean: {\n        valType: 'boolean',\n        dflt: false,\n        description: 'Sets whether or not oceans are filled in color.'\n    },\n    oceancolor: {\n        valType: 'color',\n        dflt: constants.waterColor,\n        description: 'Sets the ocean color'\n    },\n    showlakes: {\n        valType: 'boolean',\n        dflt: false,\n        description: 'Sets whether or not lakes are drawn.'\n    },\n    lakecolor: {\n        valType: 'color',\n        dflt: constants.waterColor,\n        description: 'Sets the color of the lakes.'\n    },\n    showrivers: {\n        valType: 'boolean',\n        dflt: false,\n        description: 'Sets whether or not rivers are drawn.'\n    },\n    rivercolor: {\n        valType: 'color',\n        dflt: constants.waterColor,\n        description: 'Sets color of the rivers.'\n    },\n    riverwidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        description: 'Sets the stroke width (in px) of the rivers.'\n    },\n    showcountries: {\n        valType: 'boolean',\n        description: 'Sets whether or not country boundaries are drawn.'\n    },\n    countrycolor: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        description: 'Sets line color of the country boundaries.'\n    },\n    countrywidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        description: 'Sets line width (in px) of the country boundaries.'\n    },\n    showsubunits: {\n        valType: 'boolean',\n        description: [\n            'Sets whether or not boundaries of subunits within countries',\n            '(e.g. states, provinces) are drawn.'\n        ].join(' ')\n    },\n    subunitcolor: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        description: 'Sets the color of the subunits boundaries.'\n    },\n    subunitwidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        description: 'Sets the stroke width (in px) of the subunits boundaries.'\n    },\n    showframe: {\n        valType: 'boolean',\n        description: 'Sets whether or not a frame is drawn around the map.'\n    },\n    framecolor: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        description: 'Sets the color the frame.'\n    },\n    framewidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        description: 'Sets the stroke width (in px) of the frame.'\n    },\n    bgcolor: {\n        valType: 'color',\n        dflt: colorAttrs.background,\n        description: 'Set the background color of the map'\n    },\n    lonaxis: geoAxesAttrs,\n    lataxis: geoAxesAttrs\n}, 'plot', 'from-root');\n\n// set uirevision outside of overrideAll so it can be `editType: 'none'`\nattrs.uirevision = {\n    valType: 'any',\n    editType: 'none',\n    description: [\n        'Controls persistence of user-driven changes in the view',\n        '(projection and center). Defaults to `layout.uirevision`.'\n    ].join(' ')\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}