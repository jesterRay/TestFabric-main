{"ast":null,"code":"export function concatUrlPath(name, id) {\n  // Clean up the product name to make it URL-safe\n  const formattedName = name.toLowerCase().replace(/\\s+/g, '-').replace(/[^\\w-]/g, '');\n  // concat the name and id\n  const fullPath = `${formattedName}-${id}`;\n  return `/${url}/${fullPath}`;\n}\nexport function extractIdFromUrlPath(path) {\n  // Match the pattern \"/[category]/[name]-[id]\" where category can be product, service, etc.\n  const regex = /\\/([a-z]+)\\/[a-z0-9-]+-(\\d+)$/;\n  const match = path.match(regex);\n  if (match) {\n    return match[2]; // Return the extracted ID part (match[2] is the ID)\n  }\n  return null;\n}","map":{"version":3,"names":["concatUrlPath","name","id","formattedName","toLowerCase","replace","fullPath","url","extractIdFromUrlPath","path","regex","match"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/src/helpers/concatUrlPath.js"],"sourcesContent":["\r\n\r\nexport function concatUrlPath(name, id) {\r\n    // Clean up the product name to make it URL-safe\r\n    const formattedName = name.toLowerCase().replace(/\\s+/g, '-').replace(/[^\\w-]/g, ''); \r\n    // concat the name and id\r\n    const fullPath = `${formattedName}-${id}`;\r\n    return `/${url}/${fullPath}`;\r\n}\r\n\r\n\r\nexport function extractIdFromUrlPath(path) {\r\n    // Match the pattern \"/[category]/[name]-[id]\" where category can be product, service, etc.\r\n    const regex = /\\/([a-z]+)\\/[a-z0-9-]+-(\\d+)$/;\r\n    const match = path.match(regex);\r\n    \r\n    if (match) {\r\n      return match[2]; // Return the extracted ID part (match[2] is the ID)\r\n    }\r\n    \r\n    return null;\r\n}\r\n\r\n"],"mappings":"AAEA,OAAO,SAASA,aAAaA,CAACC,IAAI,EAAEC,EAAE,EAAE;EACpC;EACA,MAAMC,aAAa,GAAGF,IAAI,CAACG,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;EACpF;EACA,MAAMC,QAAQ,GAAG,GAAGH,aAAa,IAAID,EAAE,EAAE;EACzC,OAAO,IAAIK,GAAG,IAAID,QAAQ,EAAE;AAChC;AAGA,OAAO,SAASE,oBAAoBA,CAACC,IAAI,EAAE;EACvC;EACA,MAAMC,KAAK,GAAG,+BAA+B;EAC7C,MAAMC,KAAK,GAAGF,IAAI,CAACE,KAAK,CAACD,KAAK,CAAC;EAE/B,IAAIC,KAAK,EAAE;IACT,OAAOA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACnB;EAEA,OAAO,IAAI;AACf","ignoreList":[]},"metadata":{},"sourceType":"module"}