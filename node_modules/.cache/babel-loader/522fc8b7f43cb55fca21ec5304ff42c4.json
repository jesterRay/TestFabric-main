{"ast":null,"code":"'use strict';\n\n/* eslint-disable no-console */\nvar dfltConfig = require('../plot_api/plot_config').dfltConfig;\nvar notifier = require('./notifier');\nvar loggers = module.exports = {};\n\n/**\n * ------------------------------------------\n * debugging tools\n * ------------------------------------------\n */\n\nloggers.log = function () {\n  var i;\n  if (dfltConfig.logging > 1) {\n    var messages = ['LOG:'];\n    for (i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n    console.trace.apply(console, messages);\n  }\n  if (dfltConfig.notifyOnLogging > 1) {\n    var lines = [];\n    for (i = 0; i < arguments.length; i++) {\n      lines.push(arguments[i]);\n    }\n    notifier(lines.join('<br>'), 'long');\n  }\n};\nloggers.warn = function () {\n  var i;\n  if (dfltConfig.logging > 0) {\n    var messages = ['WARN:'];\n    for (i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n    console.trace.apply(console, messages);\n  }\n  if (dfltConfig.notifyOnLogging > 0) {\n    var lines = [];\n    for (i = 0; i < arguments.length; i++) {\n      lines.push(arguments[i]);\n    }\n    notifier(lines.join('<br>'), 'stick');\n  }\n};\nloggers.error = function () {\n  var i;\n  if (dfltConfig.logging > 0) {\n    var messages = ['ERROR:'];\n    for (i = 0; i < arguments.length; i++) {\n      messages.push(arguments[i]);\n    }\n    console.error.apply(console, messages);\n  }\n  if (dfltConfig.notifyOnLogging > 0) {\n    var lines = [];\n    for (i = 0; i < arguments.length; i++) {\n      lines.push(arguments[i]);\n    }\n    notifier(lines.join('<br>'), 'stick');\n  }\n};","map":{"version":3,"names":["dfltConfig","require","notifier","loggers","module","exports","log","i","logging","messages","arguments","length","push","console","trace","apply","notifyOnLogging","lines","join","warn","error"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/lib/loggers.js"],"sourcesContent":["'use strict';\n\n/* eslint-disable no-console */\n\nvar dfltConfig = require('../plot_api/plot_config').dfltConfig;\n\nvar notifier = require('./notifier');\n\nvar loggers = module.exports = {};\n\n/**\n * ------------------------------------------\n * debugging tools\n * ------------------------------------------\n */\n\nloggers.log = function() {\n    var i;\n\n    if(dfltConfig.logging > 1) {\n        var messages = ['LOG:'];\n        for(i = 0; i < arguments.length; i++) {\n            messages.push(arguments[i]);\n        }\n        console.trace.apply(console, messages);\n    }\n\n    if(dfltConfig.notifyOnLogging > 1) {\n        var lines = [];\n        for(i = 0; i < arguments.length; i++) {\n            lines.push(arguments[i]);\n        }\n        notifier(lines.join('<br>'), 'long');\n    }\n};\n\nloggers.warn = function() {\n    var i;\n\n    if(dfltConfig.logging > 0) {\n        var messages = ['WARN:'];\n        for(i = 0; i < arguments.length; i++) {\n            messages.push(arguments[i]);\n        }\n        console.trace.apply(console, messages);\n    }\n\n    if(dfltConfig.notifyOnLogging > 0) {\n        var lines = [];\n        for(i = 0; i < arguments.length; i++) {\n            lines.push(arguments[i]);\n        }\n        notifier(lines.join('<br>'), 'stick');\n    }\n};\n\nloggers.error = function() {\n    var i;\n\n    if(dfltConfig.logging > 0) {\n        var messages = ['ERROR:'];\n        for(i = 0; i < arguments.length; i++) {\n            messages.push(arguments[i]);\n        }\n        console.error.apply(console, messages);\n    }\n\n    if(dfltConfig.notifyOnLogging > 0) {\n        var lines = [];\n        for(i = 0; i < arguments.length; i++) {\n            lines.push(arguments[i]);\n        }\n        notifier(lines.join('<br>'), 'stick');\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}