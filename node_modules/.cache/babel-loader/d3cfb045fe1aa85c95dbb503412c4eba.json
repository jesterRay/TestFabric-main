{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\nvar helpers = require('../sunburst/helpers');\nvar uniformText = require('../bar/uniform_text');\nvar clearMinTextSize = uniformText.clearMinTextSize;\nvar resizeText = require('../bar/style').resizeText;\nvar plotOne = require('./plot_one');\nmodule.exports = function _plot(gd, cdmodule, transitionOpts, makeOnCompleteCallback, opts) {\n  var type = opts.type;\n  var drawDescendants = opts.drawDescendants;\n  var fullLayout = gd._fullLayout;\n  var layer = fullLayout['_' + type + 'layer'];\n  var join, onComplete;\n\n  // If transition config is provided, then it is only a partial replot and traces not\n  // updated are removed.\n  var isFullReplot = !transitionOpts;\n  clearMinTextSize(type, fullLayout);\n  join = layer.selectAll('g.trace.' + type).data(cdmodule, function (cd) {\n    return cd[0].trace.uid;\n  });\n  join.enter().append('g').classed('trace', true).classed(type, true);\n  join.order();\n  if (!fullLayout.uniformtext.mode && helpers.hasTransition(transitionOpts)) {\n    if (makeOnCompleteCallback) {\n      // If it was passed a callback to register completion, make a callback. If\n      // this is created, then it must be executed on completion, otherwise the\n      // pos-transition redraw will not execute:\n      onComplete = makeOnCompleteCallback();\n    }\n    var transition = d3.transition().duration(transitionOpts.duration).ease(transitionOpts.easing).each('end', function () {\n      onComplete && onComplete();\n    }).each('interrupt', function () {\n      onComplete && onComplete();\n    });\n    transition.each(function () {\n      // Must run the selection again since otherwise enters/updates get grouped together\n      // and these get executed out of order. Except we need them in order!\n      layer.selectAll('g.trace').each(function (cd) {\n        plotOne(gd, cd, this, transitionOpts, drawDescendants);\n      });\n    });\n  } else {\n    join.each(function (cd) {\n      plotOne(gd, cd, this, transitionOpts, drawDescendants);\n    });\n    if (fullLayout.uniformtext.mode) {\n      resizeText(gd, layer.selectAll('.trace'), type);\n    }\n  }\n  if (isFullReplot) {\n    join.exit().remove();\n  }\n};","map":{"version":3,"names":["d3","require","helpers","uniformText","clearMinTextSize","resizeText","plotOne","module","exports","_plot","gd","cdmodule","transitionOpts","makeOnCompleteCallback","opts","type","drawDescendants","fullLayout","_fullLayout","layer","join","onComplete","isFullReplot","selectAll","data","cd","trace","uid","enter","append","classed","order","uniformtext","mode","hasTransition","transition","duration","ease","easing","each","exit","remove"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/treemap/draw.js"],"sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\n\nvar helpers = require('../sunburst/helpers');\nvar uniformText = require('../bar/uniform_text');\nvar clearMinTextSize = uniformText.clearMinTextSize;\nvar resizeText = require('../bar/style').resizeText;\n\nvar plotOne = require('./plot_one');\n\nmodule.exports = function _plot(gd, cdmodule, transitionOpts, makeOnCompleteCallback, opts) {\n    var type = opts.type;\n    var drawDescendants = opts.drawDescendants;\n\n    var fullLayout = gd._fullLayout;\n    var layer = fullLayout['_' + type + 'layer'];\n    var join, onComplete;\n\n    // If transition config is provided, then it is only a partial replot and traces not\n    // updated are removed.\n    var isFullReplot = !transitionOpts;\n\n    clearMinTextSize(type, fullLayout);\n\n    join = layer.selectAll('g.trace.' + type)\n        .data(cdmodule, function(cd) { return cd[0].trace.uid; });\n\n    join.enter().append('g')\n        .classed('trace', true)\n        .classed(type, true);\n\n    join.order();\n\n    if(!fullLayout.uniformtext.mode && helpers.hasTransition(transitionOpts)) {\n        if(makeOnCompleteCallback) {\n            // If it was passed a callback to register completion, make a callback. If\n            // this is created, then it must be executed on completion, otherwise the\n            // pos-transition redraw will not execute:\n            onComplete = makeOnCompleteCallback();\n        }\n\n        var transition = d3.transition()\n            .duration(transitionOpts.duration)\n            .ease(transitionOpts.easing)\n            .each('end', function() { onComplete && onComplete(); })\n            .each('interrupt', function() { onComplete && onComplete(); });\n\n        transition.each(function() {\n            // Must run the selection again since otherwise enters/updates get grouped together\n            // and these get executed out of order. Except we need them in order!\n            layer.selectAll('g.trace').each(function(cd) {\n                plotOne(gd, cd, this, transitionOpts, drawDescendants);\n            });\n        });\n    } else {\n        join.each(function(cd) {\n            plotOne(gd, cd, this, transitionOpts, drawDescendants);\n        });\n\n        if(fullLayout.uniformtext.mode) {\n            resizeText(gd, layer.selectAll('.trace'), type);\n        }\n    }\n\n    if(isFullReplot) {\n        join.exit().remove();\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}