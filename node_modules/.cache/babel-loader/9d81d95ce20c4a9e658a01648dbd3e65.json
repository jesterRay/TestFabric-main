{"ast":null,"code":"'use strict';\n\nvar d3Hierarchy = require('d3-hierarchy');\nvar flipTree = require('./flip_tree');\nmodule.exports = function partition(entry, size, opts) {\n  var flipX = opts.flipX;\n  var flipY = opts.flipY;\n  var swapXY = opts.packing === 'dice-slice';\n  var top = opts.pad[flipY ? 'bottom' : 'top'];\n  var left = opts.pad[flipX ? 'right' : 'left'];\n  var right = opts.pad[flipX ? 'left' : 'right'];\n  var bottom = opts.pad[flipY ? 'top' : 'bottom'];\n  var tmp;\n  if (swapXY) {\n    tmp = left;\n    left = top;\n    top = tmp;\n    tmp = right;\n    right = bottom;\n    bottom = tmp;\n  }\n  var result = d3Hierarchy.treemap().tile(getTilingMethod(opts.packing, opts.squarifyratio)).paddingInner(opts.pad.inner).paddingLeft(left).paddingRight(right).paddingTop(top).paddingBottom(bottom).size(swapXY ? [size[1], size[0]] : size)(entry);\n  if (swapXY || flipX || flipY) {\n    flipTree(result, size, {\n      swapXY: swapXY,\n      flipX: flipX,\n      flipY: flipY\n    });\n  }\n  return result;\n};\nfunction getTilingMethod(key, squarifyratio) {\n  switch (key) {\n    case 'squarify':\n      return d3Hierarchy.treemapSquarify.ratio(squarifyratio);\n    case 'binary':\n      return d3Hierarchy.treemapBinary;\n    case 'dice':\n      return d3Hierarchy.treemapDice;\n    case 'slice':\n      return d3Hierarchy.treemapSlice;\n    default:\n      // i.e. 'slice-dice' | 'dice-slice'\n      return d3Hierarchy.treemapSliceDice;\n  }\n}","map":{"version":3,"names":["d3Hierarchy","require","flipTree","module","exports","partition","entry","size","opts","flipX","flipY","swapXY","packing","top","pad","left","right","bottom","tmp","result","treemap","tile","getTilingMethod","squarifyratio","paddingInner","inner","paddingLeft","paddingRight","paddingTop","paddingBottom","key","treemapSquarify","ratio","treemapBinary","treemapDice","treemapSlice","treemapSliceDice"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/treemap/partition.js"],"sourcesContent":["'use strict';\n\nvar d3Hierarchy = require('d3-hierarchy');\nvar flipTree = require('./flip_tree');\n\nmodule.exports = function partition(entry, size, opts) {\n    var flipX = opts.flipX;\n    var flipY = opts.flipY;\n    var swapXY = opts.packing === 'dice-slice';\n\n    var top = opts.pad[flipY ? 'bottom' : 'top'];\n    var left = opts.pad[flipX ? 'right' : 'left'];\n    var right = opts.pad[flipX ? 'left' : 'right'];\n    var bottom = opts.pad[flipY ? 'top' : 'bottom'];\n\n    var tmp;\n    if(swapXY) {\n        tmp = left;\n        left = top;\n        top = tmp;\n\n        tmp = right;\n        right = bottom;\n        bottom = tmp;\n    }\n\n    var result = d3Hierarchy\n        .treemap()\n        .tile(getTilingMethod(opts.packing, opts.squarifyratio))\n        .paddingInner(opts.pad.inner)\n        .paddingLeft(left)\n        .paddingRight(right)\n        .paddingTop(top)\n        .paddingBottom(bottom)\n        .size(\n            swapXY ? [size[1], size[0]] : size\n        )(entry);\n\n    if(swapXY || flipX || flipY) {\n        flipTree(result, size, {\n            swapXY: swapXY,\n            flipX: flipX,\n            flipY: flipY\n        });\n    }\n    return result;\n};\n\nfunction getTilingMethod(key, squarifyratio) {\n    switch(key) {\n        case 'squarify':\n            return d3Hierarchy.treemapSquarify.ratio(squarifyratio);\n        case 'binary':\n            return d3Hierarchy.treemapBinary;\n        case 'dice':\n            return d3Hierarchy.treemapDice;\n        case 'slice':\n            return d3Hierarchy.treemapSlice;\n        default: // i.e. 'slice-dice' | 'dice-slice'\n            return d3Hierarchy.treemapSliceDice;\n    }\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,cAAc,CAAC;AACzC,IAAIC,QAAQ,GAAGD,OAAO,CAAC,aAAa,CAAC;AAErCE,MAAM,CAACC,OAAO,GAAG,SAASC,SAASA,CAACC,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAE;EACnD,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;EACtB,IAAIC,KAAK,GAAGF,IAAI,CAACE,KAAK;EACtB,IAAIC,MAAM,GAAGH,IAAI,CAACI,OAAO,KAAK,YAAY;EAE1C,IAAIC,GAAG,GAAGL,IAAI,CAACM,GAAG,CAACJ,KAAK,GAAG,QAAQ,GAAG,KAAK,CAAC;EAC5C,IAAIK,IAAI,GAAGP,IAAI,CAACM,GAAG,CAACL,KAAK,GAAG,OAAO,GAAG,MAAM,CAAC;EAC7C,IAAIO,KAAK,GAAGR,IAAI,CAACM,GAAG,CAACL,KAAK,GAAG,MAAM,GAAG,OAAO,CAAC;EAC9C,IAAIQ,MAAM,GAAGT,IAAI,CAACM,GAAG,CAACJ,KAAK,GAAG,KAAK,GAAG,QAAQ,CAAC;EAE/C,IAAIQ,GAAG;EACP,IAAGP,MAAM,EAAE;IACPO,GAAG,GAAGH,IAAI;IACVA,IAAI,GAAGF,GAAG;IACVA,GAAG,GAAGK,GAAG;IAETA,GAAG,GAAGF,KAAK;IACXA,KAAK,GAAGC,MAAM;IACdA,MAAM,GAAGC,GAAG;EAChB;EAEA,IAAIC,MAAM,GAAGnB,WAAW,CACnBoB,OAAO,CAAC,CAAC,CACTC,IAAI,CAACC,eAAe,CAACd,IAAI,CAACI,OAAO,EAAEJ,IAAI,CAACe,aAAa,CAAC,CAAC,CACvDC,YAAY,CAAChB,IAAI,CAACM,GAAG,CAACW,KAAK,CAAC,CAC5BC,WAAW,CAACX,IAAI,CAAC,CACjBY,YAAY,CAACX,KAAK,CAAC,CACnBY,UAAU,CAACf,GAAG,CAAC,CACfgB,aAAa,CAACZ,MAAM,CAAC,CACrBV,IAAI,CACDI,MAAM,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC,GAAGA,IAClC,CAAC,CAACD,KAAK,CAAC;EAEZ,IAAGK,MAAM,IAAIF,KAAK,IAAIC,KAAK,EAAE;IACzBR,QAAQ,CAACiB,MAAM,EAAEZ,IAAI,EAAE;MACnBI,MAAM,EAAEA,MAAM;MACdF,KAAK,EAAEA,KAAK;MACZC,KAAK,EAAEA;IACX,CAAC,CAAC;EACN;EACA,OAAOS,MAAM;AACjB,CAAC;AAED,SAASG,eAAeA,CAACQ,GAAG,EAAEP,aAAa,EAAE;EACzC,QAAOO,GAAG;IACN,KAAK,UAAU;MACX,OAAO9B,WAAW,CAAC+B,eAAe,CAACC,KAAK,CAACT,aAAa,CAAC;IAC3D,KAAK,QAAQ;MACT,OAAOvB,WAAW,CAACiC,aAAa;IACpC,KAAK,MAAM;MACP,OAAOjC,WAAW,CAACkC,WAAW;IAClC,KAAK,OAAO;MACR,OAAOlC,WAAW,CAACmC,YAAY;IACnC;MAAS;MACL,OAAOnC,WAAW,CAACoC,gBAAgB;EAC3C;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script"}