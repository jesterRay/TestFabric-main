{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\n// match-all-characters in case of newlines (DOTALL)\nvar HEAD_TAG_REGEX = /<head[^]*>/i;\nvar BODY_TAG_REGEX = /<body[^]*>/i;\n// falls back to `parseFromString` if `createHTMLDocument` cannot be used\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar parseFromDocument = function (html, tagName) {\n  /* istanbul ignore next */\n  throw new Error('This browser does not support `document.implementation.createHTMLDocument`');\n};\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar parseFromString = function (html, tagName) {\n  /* istanbul ignore next */\n  throw new Error('This browser does not support `DOMParser.prototype.parseFromString`');\n};\nvar DOMParser = typeof window === 'object' && window.DOMParser;\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\nif (typeof DOMParser === 'function') {\n  var domParser_1 = new DOMParser();\n  var mimeType_1 = 'text/html';\n  /**\n   * Creates an HTML document using `DOMParser.parseFromString`.\n   *\n   * @param html - The HTML string.\n   * @param tagName - The element to render the HTML (with 'body' as fallback).\n   * @returns - Document.\n   */\n  parseFromString = function (html, tagName) {\n    if (tagName) {\n      /* istanbul ignore next */\n      html = \"<\".concat(tagName, \">\").concat(html, \"</\").concat(tagName, \">\");\n    }\n    return domParser_1.parseFromString(html, mimeType_1);\n  };\n  parseFromDocument = parseFromString;\n}\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\nif (typeof document === 'object' && document.implementation) {\n  var htmlDocument_1 = document.implementation.createHTMLDocument();\n  /**\n   * Use HTML document created by `document.implementation.createHTMLDocument`.\n   *\n   * @param html - The HTML string.\n   * @param tagName - The element to render the HTML (with 'body' as fallback).\n   * @returns - Document\n   */\n  parseFromDocument = function (html, tagName) {\n    if (tagName) {\n      var element = htmlDocument_1.documentElement.querySelector(tagName);\n      if (element) {\n        element.innerHTML = html;\n      }\n      return htmlDocument_1;\n    }\n    htmlDocument_1.documentElement.innerHTML = html;\n    return htmlDocument_1;\n  };\n}\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\nvar template = typeof document === 'object' && document.createElement('template');\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar parseFromTemplate;\nif (template && template.content) {\n  /**\n   * Uses a template element (content fragment) to parse HTML.\n   *\n   * @param html - HTML string.\n   * @returns - Nodes.\n   */\n  parseFromTemplate = function (html) {\n    template.innerHTML = html;\n    return template.content.childNodes;\n  };\n}\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param html - HTML markup.\n * @returns - DOM nodes.\n */\nfunction domparser(html) {\n  var _a, _b;\n  var match = html.match(FIRST_TAG_REGEX);\n  var firstTagName = match && match[1] ? match[1].toLowerCase() : '';\n  switch (firstTagName) {\n    case HTML:\n      {\n        var doc = parseFromString(html);\n        // the created document may come with filler head/body elements,\n        // so make sure to remove them if they don't actually exist\n        if (!HEAD_TAG_REGEX.test(html)) {\n          var element = doc.querySelector(HEAD);\n          (_a = element === null || element === void 0 ? void 0 : element.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(element);\n        }\n        if (!BODY_TAG_REGEX.test(html)) {\n          var element = doc.querySelector(BODY);\n          (_b = element === null || element === void 0 ? void 0 : element.parentNode) === null || _b === void 0 ? void 0 : _b.removeChild(element);\n        }\n        return doc.querySelectorAll(HTML);\n      }\n    case HEAD:\n    case BODY:\n      {\n        var elements = parseFromDocument(html).querySelectorAll(firstTagName);\n        // if there's a sibling element, then return both elements\n        if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n          return elements[0].parentNode.childNodes;\n        }\n        return elements;\n      }\n    // low-level tag or text\n    default:\n      {\n        if (parseFromTemplate) {\n          return parseFromTemplate(html);\n        }\n        var element = parseFromDocument(html, BODY).querySelector(BODY);\n        return element.childNodes;\n      }\n  }\n}\nexports.default = domparser;","map":{"version":3,"sources":["../../src/client/domparser.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// constants\nvar HTML = 'html';\nvar HEAD = 'head';\nvar BODY = 'body';\nvar FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>\n// match-all-characters in case of newlines (DOTALL)\nvar HEAD_TAG_REGEX = /<head[^]*>/i;\nvar BODY_TAG_REGEX = /<body[^]*>/i;\n// falls back to `parseFromString` if `createHTMLDocument` cannot be used\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar parseFromDocument = function (html, tagName) {\n    /* istanbul ignore next */\n    throw new Error('This browser does not support `document.implementation.createHTMLDocument`');\n};\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar parseFromString = function (html, tagName) {\n    /* istanbul ignore next */\n    throw new Error('This browser does not support `DOMParser.prototype.parseFromString`');\n};\nvar DOMParser = typeof window === 'object' && window.DOMParser;\n/**\n * DOMParser (performance: slow).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document\n */\nif (typeof DOMParser === 'function') {\n    var domParser_1 = new DOMParser();\n    var mimeType_1 = 'text/html';\n    /**\n     * Creates an HTML document using `DOMParser.parseFromString`.\n     *\n     * @param html - The HTML string.\n     * @param tagName - The element to render the HTML (with 'body' as fallback).\n     * @returns - Document.\n     */\n    parseFromString = function (html, tagName) {\n        if (tagName) {\n            /* istanbul ignore next */\n            html = \"<\".concat(tagName, \">\").concat(html, \"</\").concat(tagName, \">\");\n        }\n        return domParser_1.parseFromString(html, mimeType_1);\n    };\n    parseFromDocument = parseFromString;\n}\n/**\n * DOMImplementation (performance: fair).\n *\n * @see https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument\n */\nif (typeof document === 'object' && document.implementation) {\n    var htmlDocument_1 = document.implementation.createHTMLDocument();\n    /**\n     * Use HTML document created by `document.implementation.createHTMLDocument`.\n     *\n     * @param html - The HTML string.\n     * @param tagName - The element to render the HTML (with 'body' as fallback).\n     * @returns - Document\n     */\n    parseFromDocument = function (html, tagName) {\n        if (tagName) {\n            var element = htmlDocument_1.documentElement.querySelector(tagName);\n            if (element) {\n                element.innerHTML = html;\n            }\n            return htmlDocument_1;\n        }\n        htmlDocument_1.documentElement.innerHTML = html;\n        return htmlDocument_1;\n    };\n}\n/**\n * Template (performance: fast).\n *\n * @see https://developer.mozilla.org/docs/Web/HTML/Element/template\n */\nvar template = typeof document === 'object' && document.createElement('template');\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar parseFromTemplate;\nif (template && template.content) {\n    /**\n     * Uses a template element (content fragment) to parse HTML.\n     *\n     * @param html - HTML string.\n     * @returns - Nodes.\n     */\n    parseFromTemplate = function (html) {\n        template.innerHTML = html;\n        return template.content.childNodes;\n    };\n}\n/**\n * Parses HTML string to DOM nodes.\n *\n * @param html - HTML markup.\n * @returns - DOM nodes.\n */\nfunction domparser(html) {\n    var _a, _b;\n    var match = html.match(FIRST_TAG_REGEX);\n    var firstTagName = match && match[1] ? match[1].toLowerCase() : '';\n    switch (firstTagName) {\n        case HTML: {\n            var doc = parseFromString(html);\n            // the created document may come with filler head/body elements,\n            // so make sure to remove them if they don't actually exist\n            if (!HEAD_TAG_REGEX.test(html)) {\n                var element = doc.querySelector(HEAD);\n                (_a = element === null || element === void 0 ? void 0 : element.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(element);\n            }\n            if (!BODY_TAG_REGEX.test(html)) {\n                var element = doc.querySelector(BODY);\n                (_b = element === null || element === void 0 ? void 0 : element.parentNode) === null || _b === void 0 ? void 0 : _b.removeChild(element);\n            }\n            return doc.querySelectorAll(HTML);\n        }\n        case HEAD:\n        case BODY: {\n            var elements = parseFromDocument(html).querySelectorAll(firstTagName);\n            // if there's a sibling element, then return both elements\n            if (BODY_TAG_REGEX.test(html) && HEAD_TAG_REGEX.test(html)) {\n                return elements[0].parentNode.childNodes;\n            }\n            return elements;\n        }\n        // low-level tag or text\n        default: {\n            if (parseFromTemplate) {\n                return parseFromTemplate(html);\n            }\n            var element = parseFromDocument(html, BODY).querySelector(BODY);\n            return element.childNodes;\n        }\n    }\n}\nexports.default = domparser;\n//# sourceMappingURL=domparser.js.map"]},"metadata":{},"sourceType":"script"}