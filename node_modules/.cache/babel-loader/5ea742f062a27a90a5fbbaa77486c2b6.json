{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\nvar map1dArray = require('../carpet/map_1d_array');\nvar makepath = require('../carpet/makepath');\nvar Drawing = require('../../components/drawing');\nvar Lib = require('../../lib');\nvar makeCrossings = require('../contour/make_crossings');\nvar findAllPaths = require('../contour/find_all_paths');\nvar contourPlot = require('../contour/plot');\nvar constants = require('../contour/constants');\nvar convertToConstraints = require('../contour/convert_to_constraints');\nvar emptyPathinfo = require('../contour/empty_pathinfo');\nvar closeBoundaries = require('../contour/close_boundaries');\nvar lookupCarpet = require('../carpet/lookup_carpetid');\nvar axisAlignedLine = require('../carpet/axis_aligned_line');\nmodule.exports = function plot(gd, plotinfo, cdcontours, contourcarpetLayer) {\n  var xa = plotinfo.xaxis;\n  var ya = plotinfo.yaxis;\n  Lib.makeTraceGroups(contourcarpetLayer, cdcontours, 'contour').each(function (cd) {\n    var plotGroup = d3.select(this);\n    var cd0 = cd[0];\n    var trace = cd0.trace;\n    var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n    var carpetcd = gd.calcdata[carpet.index][0];\n    if (!carpet.visible || carpet.visible === 'legendonly') return;\n    var a = cd0.a;\n    var b = cd0.b;\n    var contours = trace.contours;\n    var pathinfo = emptyPathinfo(contours, plotinfo, cd0);\n    var isConstraint = contours.type === 'constraint';\n    var operation = contours._operation;\n    var coloring = isConstraint ? operation === '=' ? 'lines' : 'fill' : contours.coloring;\n\n    // Map [a, b] (data) --> [i, j] (pixels)\n    function ab2p(ab) {\n      var pt = carpet.ab2xy(ab[0], ab[1], true);\n      return [xa.c2p(pt[0]), ya.c2p(pt[1])];\n    }\n\n    // Define the perimeter in a/b coordinates:\n    var perimeter = [[a[0], b[b.length - 1]], [a[a.length - 1], b[b.length - 1]], [a[a.length - 1], b[0]], [a[0], b[0]]];\n\n    // Extract the contour levels:\n    makeCrossings(pathinfo);\n    var atol = (a[a.length - 1] - a[0]) * 1e-8;\n    var btol = (b[b.length - 1] - b[0]) * 1e-8;\n    findAllPaths(pathinfo, atol, btol);\n\n    // Constraints might need to be draw inverted, which is not something contours\n    // handle by default since they're assumed fully opaque so that they can be\n    // drawn overlapping. This function flips the paths as necessary so that they're\n    // drawn correctly.\n    //\n    // TODO: Perhaps this should be generalized and *all* paths should be drawn as\n    // closed regions so that translucent contour levels would be valid.\n    // See: https://github.com/plotly/plotly.js/issues/1356\n    var fillPathinfo = pathinfo;\n    if (contours.type === 'constraint') {\n      fillPathinfo = convertToConstraints(pathinfo, operation);\n    }\n\n    // Map the paths in a/b coordinates to pixel coordinates:\n    mapPathinfo(pathinfo, ab2p);\n\n    // draw everything\n\n    // Compute the boundary path\n    var seg, xp, yp, i;\n    var segs = [];\n    for (i = carpetcd.clipsegments.length - 1; i >= 0; i--) {\n      seg = carpetcd.clipsegments[i];\n      xp = map1dArray([], seg.x, xa.c2p);\n      yp = map1dArray([], seg.y, ya.c2p);\n      xp.reverse();\n      yp.reverse();\n      segs.push(makepath(xp, yp, seg.bicubic));\n    }\n    var boundaryPath = 'M' + segs.join('L') + 'Z';\n\n    // Draw the baseline background fill that fills in the space behind any other\n    // contour levels:\n    makeBackground(plotGroup, carpetcd.clipsegments, xa, ya, isConstraint, coloring);\n\n    // Draw the specific contour fills. As a simplification, they're assumed to be\n    // fully opaque so that it's easy to draw them simply overlapping. The alternative\n    // would be to flip adjacent paths and draw closed paths for each level instead.\n    makeFills(trace, plotGroup, xa, ya, fillPathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath);\n\n    // Draw contour lines:\n    makeLinesAndLabels(plotGroup, pathinfo, gd, cd0, contours, plotinfo, carpet);\n\n    // Clip the boundary of the plot\n    Drawing.setClipUrl(plotGroup, carpet._clipPathId, gd);\n  });\n};\nfunction mapPathinfo(pathinfo, map) {\n  var i, j, k, pi, pedgepaths, ppaths, pedgepath, ppath, path;\n  for (i = 0; i < pathinfo.length; i++) {\n    pi = pathinfo[i];\n    pedgepaths = pi.pedgepaths = [];\n    ppaths = pi.ppaths = [];\n    for (j = 0; j < pi.edgepaths.length; j++) {\n      path = pi.edgepaths[j];\n      pedgepath = [];\n      for (k = 0; k < path.length; k++) {\n        pedgepath[k] = map(path[k]);\n      }\n      pedgepaths.push(pedgepath);\n    }\n    for (j = 0; j < pi.paths.length; j++) {\n      path = pi.paths[j];\n      ppath = [];\n      for (k = 0; k < path.length; k++) {\n        ppath[k] = map(path[k]);\n      }\n      ppaths.push(ppath);\n    }\n  }\n}\nfunction makeLinesAndLabels(plotgroup, pathinfo, gd, cd0, contours, plotinfo, carpet) {\n  var isStatic = gd._context.staticPlot;\n  var lineContainer = Lib.ensureSingle(plotgroup, 'g', 'contourlines');\n  var showLines = contours.showlines !== false;\n  var showLabels = contours.showlabels;\n  var clipLinesForLabels = showLines && showLabels;\n\n  // Even if we're not going to show lines, we need to create them\n  // if we're showing labels, because the fill paths include the perimeter\n  // so can't be used to position the labels correctly.\n  // In this case we'll remove the lines after making the labels.\n  var linegroup = contourPlot.createLines(lineContainer, showLines || showLabels, pathinfo, isStatic);\n  var lineClip = contourPlot.createLineClip(lineContainer, clipLinesForLabels, gd, cd0.trace.uid);\n  var labelGroup = plotgroup.selectAll('g.contourlabels').data(showLabels ? [0] : []);\n  labelGroup.exit().remove();\n  labelGroup.enter().append('g').classed('contourlabels', true);\n  if (showLabels) {\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis;\n    var xLen = xa._length;\n    var yLen = ya._length;\n    // for simplicity use the xy box for label clipping outline.\n    var labelClipPathData = [[[0, 0], [xLen, 0], [xLen, yLen], [0, yLen]]];\n    var labelData = [];\n\n    // invalidate the getTextLocation cache in case paths changed\n    Lib.clearLocationCache();\n    var contourFormat = contourPlot.labelFormatter(gd, cd0);\n    var dummyText = Drawing.tester.append('text').attr('data-notex', 1).call(Drawing.font, contours.labelfont);\n\n    // use `bounds` only to keep labels away from the x/y boundaries\n    // `constrainToCarpet` below ensures labels don't go off the\n    // carpet edges\n    var bounds = {\n      left: 0,\n      right: xLen,\n      center: xLen / 2,\n      top: 0,\n      bottom: yLen,\n      middle: yLen / 2\n    };\n    var plotDiagonal = Math.sqrt(xLen * xLen + yLen * yLen);\n\n    // the path length to use to scale the number of labels to draw:\n    var normLength = constants.LABELDISTANCE * plotDiagonal / Math.max(1, pathinfo.length / constants.LABELINCREASE);\n    linegroup.each(function (d) {\n      var textOpts = contourPlot.calcTextOpts(d.level, contourFormat, dummyText, gd);\n      d3.select(this).selectAll('path').each(function (pathData) {\n        var path = this;\n        var pathBounds = Lib.getVisibleSegment(path, bounds, textOpts.height / 2);\n        if (!pathBounds) return;\n        constrainToCarpet(path, pathData, d, pathBounds, carpet, textOpts.height);\n        if (pathBounds.len < (textOpts.width + textOpts.height) * constants.LABELMIN) return;\n        var maxLabels = Math.min(Math.ceil(pathBounds.len / normLength), constants.LABELMAX);\n        for (var i = 0; i < maxLabels; i++) {\n          var loc = contourPlot.findBestTextLocation(path, pathBounds, textOpts, labelData, bounds);\n          if (!loc) break;\n          contourPlot.addLabelData(loc, textOpts, labelData, labelClipPathData);\n        }\n      });\n    });\n    dummyText.remove();\n    contourPlot.drawLabels(labelGroup, labelData, gd, lineClip, clipLinesForLabels ? labelClipPathData : null);\n  }\n  if (showLabels && !showLines) linegroup.remove();\n}\n\n// figure out if this path goes off the edge of the carpet\n// and shorten the part we call visible to keep labels away from the edge\nfunction constrainToCarpet(path, pathData, levelData, pathBounds, carpet, textHeight) {\n  var pathABData;\n  for (var i = 0; i < levelData.pedgepaths.length; i++) {\n    if (pathData === levelData.pedgepaths[i]) {\n      pathABData = levelData.edgepaths[i];\n    }\n  }\n  if (!pathABData) return;\n  var aMin = carpet.a[0];\n  var aMax = carpet.a[carpet.a.length - 1];\n  var bMin = carpet.b[0];\n  var bMax = carpet.b[carpet.b.length - 1];\n  function getOffset(abPt, pathVector) {\n    var offset = 0;\n    var edgeVector;\n    var dAB = 0.1;\n    if (Math.abs(abPt[0] - aMin) < dAB || Math.abs(abPt[0] - aMax) < dAB) {\n      edgeVector = normalizeVector(carpet.dxydb_rough(abPt[0], abPt[1], dAB));\n      offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n    }\n    if (Math.abs(abPt[1] - bMin) < dAB || Math.abs(abPt[1] - bMax) < dAB) {\n      edgeVector = normalizeVector(carpet.dxyda_rough(abPt[0], abPt[1], dAB));\n      offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n    }\n    return offset;\n  }\n  var startVector = getUnitVector(path, 0, 1);\n  var endVector = getUnitVector(path, pathBounds.total, pathBounds.total - 1);\n  var minStart = getOffset(pathABData[0], startVector);\n  var maxEnd = pathBounds.total - getOffset(pathABData[pathABData.length - 1], endVector);\n  if (pathBounds.min < minStart) pathBounds.min = minStart;\n  if (pathBounds.max > maxEnd) pathBounds.max = maxEnd;\n  pathBounds.len = pathBounds.max - pathBounds.min;\n}\nfunction getUnitVector(path, p0, p1) {\n  var pt0 = path.getPointAtLength(p0);\n  var pt1 = path.getPointAtLength(p1);\n  var dx = pt1.x - pt0.x;\n  var dy = pt1.y - pt0.y;\n  var len = Math.sqrt(dx * dx + dy * dy);\n  return [dx / len, dy / len];\n}\nfunction normalizeVector(v) {\n  var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n  return [v[0] / len, v[1] / len];\n}\nfunction vectorTan(v0, v1) {\n  var cos = Math.abs(v0[0] * v1[0] + v0[1] * v1[1]);\n  var sin = Math.sqrt(1 - cos * cos);\n  return sin / cos;\n}\nfunction makeBackground(plotgroup, clipsegments, xaxis, yaxis, isConstraint, coloring) {\n  var seg, xp, yp, i;\n  var bggroup = Lib.ensureSingle(plotgroup, 'g', 'contourbg');\n  var bgfill = bggroup.selectAll('path').data(coloring === 'fill' && !isConstraint ? [0] : []);\n  bgfill.enter().append('path');\n  bgfill.exit().remove();\n  var segs = [];\n  for (i = 0; i < clipsegments.length; i++) {\n    seg = clipsegments[i];\n    xp = map1dArray([], seg.x, xaxis.c2p);\n    yp = map1dArray([], seg.y, yaxis.c2p);\n    segs.push(makepath(xp, yp, seg.bicubic));\n  }\n  bgfill.attr('d', 'M' + segs.join('L') + 'Z').style('stroke', 'none');\n}\nfunction makeFills(trace, plotgroup, xa, ya, pathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath) {\n  var hasFills = coloring === 'fill';\n\n  // fills prefixBoundary in pathinfo items\n  if (hasFills) {\n    closeBoundaries(pathinfo, trace.contours);\n  }\n  var fillgroup = Lib.ensureSingle(plotgroup, 'g', 'contourfill');\n  var fillitems = fillgroup.selectAll('path').data(hasFills ? pathinfo : []);\n  fillitems.enter().append('path');\n  fillitems.exit().remove();\n  fillitems.each(function (pi) {\n    // join all paths for this level together into a single path\n    // first follow clockwise around the perimeter to close any open paths\n    // if the whole perimeter is above this level, start with a path\n    // enclosing the whole thing. With all that, the parity should mean\n    // that we always fill everything above the contour, nothing below\n    var fullpath = (pi.prefixBoundary ? boundaryPath : '') + joinAllPaths(trace, pi, perimeter, ab2p, carpet, carpetcd, xa, ya);\n    if (!fullpath) {\n      d3.select(this).remove();\n    } else {\n      d3.select(this).attr('d', fullpath).style('stroke', 'none');\n    }\n  });\n}\nfunction joinAllPaths(trace, pi, perimeter, ab2p, carpet, carpetcd, xa, ya) {\n  var i;\n  var fullpath = '';\n  var startsleft = pi.edgepaths.map(function (v, i) {\n    return i;\n  });\n  var newloop = true;\n  var endpt, newendpt, cnt, nexti, possiblei, addpath;\n  var atol = Math.abs(perimeter[0][0] - perimeter[2][0]) * 1e-4;\n  var btol = Math.abs(perimeter[0][1] - perimeter[2][1]) * 1e-4;\n  function istop(pt) {\n    return Math.abs(pt[1] - perimeter[0][1]) < btol;\n  }\n  function isbottom(pt) {\n    return Math.abs(pt[1] - perimeter[2][1]) < btol;\n  }\n  function isleft(pt) {\n    return Math.abs(pt[0] - perimeter[0][0]) < atol;\n  }\n  function isright(pt) {\n    return Math.abs(pt[0] - perimeter[2][0]) < atol;\n  }\n  function pathto(pt0, pt1) {\n    var i, j, segments, axis;\n    var path = '';\n    if (istop(pt0) && !isright(pt0) || isbottom(pt0) && !isleft(pt0)) {\n      axis = carpet.aaxis;\n      segments = axisAlignedLine(carpet, carpetcd, [pt0[0], pt1[0]], 0.5 * (pt0[1] + pt1[1]));\n    } else {\n      axis = carpet.baxis;\n      segments = axisAlignedLine(carpet, carpetcd, 0.5 * (pt0[0] + pt1[0]), [pt0[1], pt1[1]]);\n    }\n    for (i = 1; i < segments.length; i++) {\n      path += axis.smoothing ? 'C' : 'L';\n      for (j = 0; j < segments[i].length; j++) {\n        var pt = segments[i][j];\n        path += [xa.c2p(pt[0]), ya.c2p(pt[1])] + ' ';\n      }\n    }\n    return path;\n  }\n  i = 0;\n  endpt = null;\n  while (startsleft.length) {\n    var startpt = pi.edgepaths[i][0];\n    if (endpt) {\n      fullpath += pathto(endpt, startpt);\n    }\n    addpath = Drawing.smoothopen(pi.edgepaths[i].map(ab2p), pi.smoothing);\n    fullpath += newloop ? addpath : addpath.replace(/^M/, 'L');\n    startsleft.splice(startsleft.indexOf(i), 1);\n    endpt = pi.edgepaths[i][pi.edgepaths[i].length - 1];\n    nexti = -1;\n\n    // now loop through sides, moving our endpoint until we find a new start\n    for (cnt = 0; cnt < 4; cnt++) {\n      // just to prevent infinite loops\n      if (!endpt) {\n        Lib.log('Missing end?', i, pi);\n        break;\n      }\n      if (istop(endpt) && !isright(endpt)) {\n        newendpt = perimeter[1]; // left top ---> right top\n      } else if (isleft(endpt)) {\n        newendpt = perimeter[0]; // left bottom ---> left top\n      } else if (isbottom(endpt)) {\n        newendpt = perimeter[3]; // right bottom\n      } else if (isright(endpt)) {\n        newendpt = perimeter[2]; // left bottom\n      }\n      for (possiblei = 0; possiblei < pi.edgepaths.length; possiblei++) {\n        var ptNew = pi.edgepaths[possiblei][0];\n        // is ptNew on the (horz. or vert.) segment from endpt to newendpt?\n        if (Math.abs(endpt[0] - newendpt[0]) < atol) {\n          if (Math.abs(endpt[0] - ptNew[0]) < atol && (ptNew[1] - endpt[1]) * (newendpt[1] - ptNew[1]) >= 0) {\n            newendpt = ptNew;\n            nexti = possiblei;\n          }\n        } else if (Math.abs(endpt[1] - newendpt[1]) < btol) {\n          if (Math.abs(endpt[1] - ptNew[1]) < btol && (ptNew[0] - endpt[0]) * (newendpt[0] - ptNew[0]) >= 0) {\n            newendpt = ptNew;\n            nexti = possiblei;\n          }\n        } else {\n          Lib.log('endpt to newendpt is not vert. or horz.', endpt, newendpt, ptNew);\n        }\n      }\n      if (nexti >= 0) break;\n      fullpath += pathto(endpt, newendpt);\n      endpt = newendpt;\n    }\n    if (nexti === pi.edgepaths.length) {\n      Lib.log('unclosed perimeter path');\n      break;\n    }\n    i = nexti;\n\n    // if we closed back on a loop we already included,\n    // close it and start a new loop\n    newloop = startsleft.indexOf(i) === -1;\n    if (newloop) {\n      i = startsleft[0];\n      fullpath += pathto(endpt, newendpt) + 'Z';\n      endpt = null;\n    }\n  }\n\n  // finally add the interior paths\n  for (i = 0; i < pi.paths.length; i++) {\n    fullpath += Drawing.smoothclosed(pi.paths[i].map(ab2p), pi.smoothing);\n  }\n  return fullpath;\n}","map":{"version":3,"names":["d3","require","map1dArray","makepath","Drawing","Lib","makeCrossings","findAllPaths","contourPlot","constants","convertToConstraints","emptyPathinfo","closeBoundaries","lookupCarpet","axisAlignedLine","module","exports","plot","gd","plotinfo","cdcontours","contourcarpetLayer","xa","xaxis","ya","yaxis","makeTraceGroups","each","cd","plotGroup","select","cd0","trace","carpet","_carpetTrace","carpetcd","calcdata","index","visible","a","b","contours","pathinfo","isConstraint","type","operation","_operation","coloring","ab2p","ab","pt","ab2xy","c2p","perimeter","length","atol","btol","fillPathinfo","mapPathinfo","seg","xp","yp","i","segs","clipsegments","x","y","reverse","push","bicubic","boundaryPath","join","makeBackground","makeFills","makeLinesAndLabels","setClipUrl","_clipPathId","map","j","k","pi","pedgepaths","ppaths","pedgepath","ppath","path","edgepaths","paths","plotgroup","isStatic","_context","staticPlot","lineContainer","ensureSingle","showLines","showlines","showLabels","showlabels","clipLinesForLabels","linegroup","createLines","lineClip","createLineClip","uid","labelGroup","selectAll","data","exit","remove","enter","append","classed","xLen","_length","yLen","labelClipPathData","labelData","clearLocationCache","contourFormat","labelFormatter","dummyText","tester","attr","call","font","labelfont","bounds","left","right","center","top","bottom","middle","plotDiagonal","Math","sqrt","normLength","LABELDISTANCE","max","LABELINCREASE","d","textOpts","calcTextOpts","level","pathData","pathBounds","getVisibleSegment","height","constrainToCarpet","len","width","LABELMIN","maxLabels","min","ceil","LABELMAX","loc","findBestTextLocation","addLabelData","drawLabels","levelData","textHeight","pathABData","aMin","aMax","bMin","bMax","getOffset","abPt","pathVector","offset","edgeVector","dAB","abs","normalizeVector","dxydb_rough","vectorTan","dxyda_rough","startVector","getUnitVector","endVector","total","minStart","maxEnd","p0","p1","pt0","getPointAtLength","pt1","dx","dy","v","v0","v1","cos","sin","bggroup","bgfill","style","hasFills","fillgroup","fillitems","fullpath","prefixBoundary","joinAllPaths","startsleft","newloop","endpt","newendpt","cnt","nexti","possiblei","addpath","istop","isbottom","isleft","isright","pathto","segments","axis","aaxis","baxis","smoothing","startpt","smoothopen","replace","splice","indexOf","log","ptNew","smoothclosed"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/contourcarpet/plot.js"],"sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar map1dArray = require('../carpet/map_1d_array');\nvar makepath = require('../carpet/makepath');\nvar Drawing = require('../../components/drawing');\nvar Lib = require('../../lib');\n\nvar makeCrossings = require('../contour/make_crossings');\nvar findAllPaths = require('../contour/find_all_paths');\nvar contourPlot = require('../contour/plot');\nvar constants = require('../contour/constants');\nvar convertToConstraints = require('../contour/convert_to_constraints');\nvar emptyPathinfo = require('../contour/empty_pathinfo');\nvar closeBoundaries = require('../contour/close_boundaries');\nvar lookupCarpet = require('../carpet/lookup_carpetid');\nvar axisAlignedLine = require('../carpet/axis_aligned_line');\n\nmodule.exports = function plot(gd, plotinfo, cdcontours, contourcarpetLayer) {\n    var xa = plotinfo.xaxis;\n    var ya = plotinfo.yaxis;\n\n    Lib.makeTraceGroups(contourcarpetLayer, cdcontours, 'contour').each(function(cd) {\n        var plotGroup = d3.select(this);\n        var cd0 = cd[0];\n        var trace = cd0.trace;\n\n        var carpet = trace._carpetTrace = lookupCarpet(gd, trace);\n        var carpetcd = gd.calcdata[carpet.index][0];\n\n        if(!carpet.visible || carpet.visible === 'legendonly') return;\n\n        var a = cd0.a;\n        var b = cd0.b;\n        var contours = trace.contours;\n        var pathinfo = emptyPathinfo(contours, plotinfo, cd0);\n        var isConstraint = contours.type === 'constraint';\n        var operation = contours._operation;\n        var coloring = isConstraint ? (operation === '=' ? 'lines' : 'fill') : contours.coloring;\n\n        // Map [a, b] (data) --> [i, j] (pixels)\n        function ab2p(ab) {\n            var pt = carpet.ab2xy(ab[0], ab[1], true);\n            return [xa.c2p(pt[0]), ya.c2p(pt[1])];\n        }\n\n        // Define the perimeter in a/b coordinates:\n        var perimeter = [\n            [a[0], b[b.length - 1]],\n            [a[a.length - 1], b[b.length - 1]],\n            [a[a.length - 1], b[0]],\n            [a[0], b[0]]\n        ];\n\n        // Extract the contour levels:\n        makeCrossings(pathinfo);\n        var atol = (a[a.length - 1] - a[0]) * 1e-8;\n        var btol = (b[b.length - 1] - b[0]) * 1e-8;\n        findAllPaths(pathinfo, atol, btol);\n\n        // Constraints might need to be draw inverted, which is not something contours\n        // handle by default since they're assumed fully opaque so that they can be\n        // drawn overlapping. This function flips the paths as necessary so that they're\n        // drawn correctly.\n        //\n        // TODO: Perhaps this should be generalized and *all* paths should be drawn as\n        // closed regions so that translucent contour levels would be valid.\n        // See: https://github.com/plotly/plotly.js/issues/1356\n        var fillPathinfo = pathinfo;\n        if(contours.type === 'constraint') {\n            fillPathinfo = convertToConstraints(pathinfo, operation);\n        }\n\n        // Map the paths in a/b coordinates to pixel coordinates:\n        mapPathinfo(pathinfo, ab2p);\n\n        // draw everything\n\n        // Compute the boundary path\n        var seg, xp, yp, i;\n        var segs = [];\n        for(i = carpetcd.clipsegments.length - 1; i >= 0; i--) {\n            seg = carpetcd.clipsegments[i];\n            xp = map1dArray([], seg.x, xa.c2p);\n            yp = map1dArray([], seg.y, ya.c2p);\n            xp.reverse();\n            yp.reverse();\n            segs.push(makepath(xp, yp, seg.bicubic));\n        }\n\n        var boundaryPath = 'M' + segs.join('L') + 'Z';\n\n        // Draw the baseline background fill that fills in the space behind any other\n        // contour levels:\n        makeBackground(plotGroup, carpetcd.clipsegments, xa, ya, isConstraint, coloring);\n\n        // Draw the specific contour fills. As a simplification, they're assumed to be\n        // fully opaque so that it's easy to draw them simply overlapping. The alternative\n        // would be to flip adjacent paths and draw closed paths for each level instead.\n        makeFills(trace, plotGroup, xa, ya, fillPathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath);\n\n        // Draw contour lines:\n        makeLinesAndLabels(plotGroup, pathinfo, gd, cd0, contours, plotinfo, carpet);\n\n        // Clip the boundary of the plot\n        Drawing.setClipUrl(plotGroup, carpet._clipPathId, gd);\n    });\n};\n\nfunction mapPathinfo(pathinfo, map) {\n    var i, j, k, pi, pedgepaths, ppaths, pedgepath, ppath, path;\n\n    for(i = 0; i < pathinfo.length; i++) {\n        pi = pathinfo[i];\n        pedgepaths = pi.pedgepaths = [];\n        ppaths = pi.ppaths = [];\n        for(j = 0; j < pi.edgepaths.length; j++) {\n            path = pi.edgepaths[j];\n            pedgepath = [];\n            for(k = 0; k < path.length; k++) {\n                pedgepath[k] = map(path[k]);\n            }\n            pedgepaths.push(pedgepath);\n        }\n        for(j = 0; j < pi.paths.length; j++) {\n            path = pi.paths[j];\n            ppath = [];\n            for(k = 0; k < path.length; k++) {\n                ppath[k] = map(path[k]);\n            }\n            ppaths.push(ppath);\n        }\n    }\n}\n\nfunction makeLinesAndLabels(plotgroup, pathinfo, gd, cd0, contours, plotinfo, carpet) {\n    var isStatic = gd._context.staticPlot;\n    var lineContainer = Lib.ensureSingle(plotgroup, 'g', 'contourlines');\n    var showLines = contours.showlines !== false;\n    var showLabels = contours.showlabels;\n    var clipLinesForLabels = showLines && showLabels;\n\n    // Even if we're not going to show lines, we need to create them\n    // if we're showing labels, because the fill paths include the perimeter\n    // so can't be used to position the labels correctly.\n    // In this case we'll remove the lines after making the labels.\n    var linegroup = contourPlot.createLines(lineContainer, showLines || showLabels, pathinfo, isStatic);\n\n    var lineClip = contourPlot.createLineClip(lineContainer, clipLinesForLabels, gd, cd0.trace.uid);\n\n    var labelGroup = plotgroup.selectAll('g.contourlabels')\n        .data(showLabels ? [0] : []);\n\n    labelGroup.exit().remove();\n\n    labelGroup.enter().append('g')\n        .classed('contourlabels', true);\n\n    if(showLabels) {\n        var xa = plotinfo.xaxis;\n        var ya = plotinfo.yaxis;\n        var xLen = xa._length;\n        var yLen = ya._length;\n        // for simplicity use the xy box for label clipping outline.\n        var labelClipPathData = [[\n            [0, 0],\n            [xLen, 0],\n            [xLen, yLen],\n            [0, yLen]\n        ]];\n\n\n        var labelData = [];\n\n        // invalidate the getTextLocation cache in case paths changed\n        Lib.clearLocationCache();\n\n        var contourFormat = contourPlot.labelFormatter(gd, cd0);\n\n        var dummyText = Drawing.tester.append('text')\n            .attr('data-notex', 1)\n            .call(Drawing.font, contours.labelfont);\n\n        // use `bounds` only to keep labels away from the x/y boundaries\n        // `constrainToCarpet` below ensures labels don't go off the\n        // carpet edges\n        var bounds = {\n            left: 0,\n            right: xLen,\n            center: xLen / 2,\n            top: 0,\n            bottom: yLen,\n            middle: yLen / 2\n        };\n\n        var plotDiagonal = Math.sqrt(xLen * xLen + yLen * yLen);\n\n        // the path length to use to scale the number of labels to draw:\n        var normLength = constants.LABELDISTANCE * plotDiagonal /\n            Math.max(1, pathinfo.length / constants.LABELINCREASE);\n\n        linegroup.each(function(d) {\n            var textOpts = contourPlot.calcTextOpts(d.level, contourFormat, dummyText, gd);\n\n            d3.select(this).selectAll('path').each(function(pathData) {\n                var path = this;\n                var pathBounds = Lib.getVisibleSegment(path, bounds, textOpts.height / 2);\n                if(!pathBounds) return;\n\n                constrainToCarpet(path, pathData, d, pathBounds, carpet, textOpts.height);\n\n                if(pathBounds.len < (textOpts.width + textOpts.height) * constants.LABELMIN) return;\n\n                var maxLabels = Math.min(Math.ceil(pathBounds.len / normLength),\n                    constants.LABELMAX);\n\n                for(var i = 0; i < maxLabels; i++) {\n                    var loc = contourPlot.findBestTextLocation(path, pathBounds, textOpts,\n                        labelData, bounds);\n\n                    if(!loc) break;\n\n                    contourPlot.addLabelData(loc, textOpts, labelData, labelClipPathData);\n                }\n            });\n        });\n\n        dummyText.remove();\n\n        contourPlot.drawLabels(labelGroup, labelData, gd, lineClip,\n            clipLinesForLabels ? labelClipPathData : null);\n    }\n\n    if(showLabels && !showLines) linegroup.remove();\n}\n\n// figure out if this path goes off the edge of the carpet\n// and shorten the part we call visible to keep labels away from the edge\nfunction constrainToCarpet(path, pathData, levelData, pathBounds, carpet, textHeight) {\n    var pathABData;\n    for(var i = 0; i < levelData.pedgepaths.length; i++) {\n        if(pathData === levelData.pedgepaths[i]) {\n            pathABData = levelData.edgepaths[i];\n        }\n    }\n    if(!pathABData) return;\n\n    var aMin = carpet.a[0];\n    var aMax = carpet.a[carpet.a.length - 1];\n    var bMin = carpet.b[0];\n    var bMax = carpet.b[carpet.b.length - 1];\n\n    function getOffset(abPt, pathVector) {\n        var offset = 0;\n        var edgeVector;\n        var dAB = 0.1;\n        if(Math.abs(abPt[0] - aMin) < dAB || Math.abs(abPt[0] - aMax) < dAB) {\n            edgeVector = normalizeVector(carpet.dxydb_rough(abPt[0], abPt[1], dAB));\n            offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n        }\n\n        if(Math.abs(abPt[1] - bMin) < dAB || Math.abs(abPt[1] - bMax) < dAB) {\n            edgeVector = normalizeVector(carpet.dxyda_rough(abPt[0], abPt[1], dAB));\n            offset = Math.max(offset, textHeight * vectorTan(pathVector, edgeVector) / 2);\n        }\n        return offset;\n    }\n\n    var startVector = getUnitVector(path, 0, 1);\n    var endVector = getUnitVector(path, pathBounds.total, pathBounds.total - 1);\n    var minStart = getOffset(pathABData[0], startVector);\n    var maxEnd = pathBounds.total - getOffset(pathABData[pathABData.length - 1], endVector);\n\n    if(pathBounds.min < minStart) pathBounds.min = minStart;\n    if(pathBounds.max > maxEnd) pathBounds.max = maxEnd;\n\n    pathBounds.len = pathBounds.max - pathBounds.min;\n}\n\nfunction getUnitVector(path, p0, p1) {\n    var pt0 = path.getPointAtLength(p0);\n    var pt1 = path.getPointAtLength(p1);\n    var dx = pt1.x - pt0.x;\n    var dy = pt1.y - pt0.y;\n    var len = Math.sqrt(dx * dx + dy * dy);\n    return [dx / len, dy / len];\n}\n\nfunction normalizeVector(v) {\n    var len = Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n    return [v[0] / len, v[1] / len];\n}\n\nfunction vectorTan(v0, v1) {\n    var cos = Math.abs(v0[0] * v1[0] + v0[1] * v1[1]);\n    var sin = Math.sqrt(1 - cos * cos);\n    return sin / cos;\n}\n\nfunction makeBackground(plotgroup, clipsegments, xaxis, yaxis, isConstraint, coloring) {\n    var seg, xp, yp, i;\n    var bggroup = Lib.ensureSingle(plotgroup, 'g', 'contourbg');\n\n    var bgfill = bggroup.selectAll('path')\n        .data((coloring === 'fill' && !isConstraint) ? [0] : []);\n    bgfill.enter().append('path');\n    bgfill.exit().remove();\n\n    var segs = [];\n    for(i = 0; i < clipsegments.length; i++) {\n        seg = clipsegments[i];\n        xp = map1dArray([], seg.x, xaxis.c2p);\n        yp = map1dArray([], seg.y, yaxis.c2p);\n        segs.push(makepath(xp, yp, seg.bicubic));\n    }\n\n    bgfill\n        .attr('d', 'M' + segs.join('L') + 'Z')\n        .style('stroke', 'none');\n}\n\nfunction makeFills(trace, plotgroup, xa, ya, pathinfo, perimeter, ab2p, carpet, carpetcd, coloring, boundaryPath) {\n    var hasFills = coloring === 'fill';\n\n    // fills prefixBoundary in pathinfo items\n    if(hasFills) {\n        closeBoundaries(pathinfo, trace.contours);\n    }\n\n    var fillgroup = Lib.ensureSingle(plotgroup, 'g', 'contourfill');\n    var fillitems = fillgroup.selectAll('path').data(hasFills ? pathinfo : []);\n    fillitems.enter().append('path');\n    fillitems.exit().remove();\n    fillitems.each(function(pi) {\n        // join all paths for this level together into a single path\n        // first follow clockwise around the perimeter to close any open paths\n        // if the whole perimeter is above this level, start with a path\n        // enclosing the whole thing. With all that, the parity should mean\n        // that we always fill everything above the contour, nothing below\n        var fullpath = (pi.prefixBoundary ? boundaryPath : '') +\n            joinAllPaths(trace, pi, perimeter, ab2p, carpet, carpetcd, xa, ya);\n\n        if(!fullpath) {\n            d3.select(this).remove();\n        } else {\n            d3.select(this)\n                .attr('d', fullpath)\n                .style('stroke', 'none');\n        }\n    });\n}\n\nfunction joinAllPaths(trace, pi, perimeter, ab2p, carpet, carpetcd, xa, ya) {\n    var i;\n    var fullpath = '';\n\n    var startsleft = pi.edgepaths.map(function(v, i) { return i; });\n    var newloop = true;\n    var endpt, newendpt, cnt, nexti, possiblei, addpath;\n\n    var atol = Math.abs(perimeter[0][0] - perimeter[2][0]) * 1e-4;\n    var btol = Math.abs(perimeter[0][1] - perimeter[2][1]) * 1e-4;\n\n    function istop(pt) { return Math.abs(pt[1] - perimeter[0][1]) < btol; }\n    function isbottom(pt) { return Math.abs(pt[1] - perimeter[2][1]) < btol; }\n    function isleft(pt) { return Math.abs(pt[0] - perimeter[0][0]) < atol; }\n    function isright(pt) { return Math.abs(pt[0] - perimeter[2][0]) < atol; }\n\n    function pathto(pt0, pt1) {\n        var i, j, segments, axis;\n        var path = '';\n\n        if((istop(pt0) && !isright(pt0)) || (isbottom(pt0) && !isleft(pt0))) {\n            axis = carpet.aaxis;\n            segments = axisAlignedLine(carpet, carpetcd, [pt0[0], pt1[0]], 0.5 * (pt0[1] + pt1[1]));\n        } else {\n            axis = carpet.baxis;\n            segments = axisAlignedLine(carpet, carpetcd, 0.5 * (pt0[0] + pt1[0]), [pt0[1], pt1[1]]);\n        }\n\n        for(i = 1; i < segments.length; i++) {\n            path += axis.smoothing ? 'C' : 'L';\n            for(j = 0; j < segments[i].length; j++) {\n                var pt = segments[i][j];\n                path += [xa.c2p(pt[0]), ya.c2p(pt[1])] + ' ';\n            }\n        }\n\n        return path;\n    }\n\n    i = 0;\n    endpt = null;\n    while(startsleft.length) {\n        var startpt = pi.edgepaths[i][0];\n\n        if(endpt) {\n            fullpath += pathto(endpt, startpt);\n        }\n\n        addpath = Drawing.smoothopen(pi.edgepaths[i].map(ab2p), pi.smoothing);\n        fullpath += newloop ? addpath : addpath.replace(/^M/, 'L');\n        startsleft.splice(startsleft.indexOf(i), 1);\n        endpt = pi.edgepaths[i][pi.edgepaths[i].length - 1];\n        nexti = -1;\n\n        // now loop through sides, moving our endpoint until we find a new start\n        for(cnt = 0; cnt < 4; cnt++) { // just to prevent infinite loops\n            if(!endpt) {\n                Lib.log('Missing end?', i, pi);\n                break;\n            }\n\n            if(istop(endpt) && !isright(endpt)) {\n                newendpt = perimeter[1]; // left top ---> right top\n            } else if(isleft(endpt)) {\n                newendpt = perimeter[0]; // left bottom ---> left top\n            } else if(isbottom(endpt)) {\n                newendpt = perimeter[3]; // right bottom\n            } else if(isright(endpt)) {\n                newendpt = perimeter[2]; // left bottom\n            }\n\n            for(possiblei = 0; possiblei < pi.edgepaths.length; possiblei++) {\n                var ptNew = pi.edgepaths[possiblei][0];\n                // is ptNew on the (horz. or vert.) segment from endpt to newendpt?\n                if(Math.abs(endpt[0] - newendpt[0]) < atol) {\n                    if(Math.abs(endpt[0] - ptNew[0]) < atol &&\n                            (ptNew[1] - endpt[1]) * (newendpt[1] - ptNew[1]) >= 0) {\n                        newendpt = ptNew;\n                        nexti = possiblei;\n                    }\n                } else if(Math.abs(endpt[1] - newendpt[1]) < btol) {\n                    if(Math.abs(endpt[1] - ptNew[1]) < btol &&\n                            (ptNew[0] - endpt[0]) * (newendpt[0] - ptNew[0]) >= 0) {\n                        newendpt = ptNew;\n                        nexti = possiblei;\n                    }\n                } else {\n                    Lib.log('endpt to newendpt is not vert. or horz.', endpt, newendpt, ptNew);\n                }\n            }\n\n            if(nexti >= 0) break;\n            fullpath += pathto(endpt, newendpt);\n            endpt = newendpt;\n        }\n\n        if(nexti === pi.edgepaths.length) {\n            Lib.log('unclosed perimeter path');\n            break;\n        }\n\n        i = nexti;\n\n        // if we closed back on a loop we already included,\n        // close it and start a new loop\n        newloop = (startsleft.indexOf(i) === -1);\n        if(newloop) {\n            i = startsleft[0];\n            fullpath += pathto(endpt, newendpt) + 'Z';\n            endpt = null;\n        }\n    }\n\n    // finally add the interior paths\n    for(i = 0; i < pi.paths.length; i++) {\n        fullpath += Drawing.smoothclosed(pi.paths[i].map(ab2p), pi.smoothing);\n    }\n\n    return fullpath;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}