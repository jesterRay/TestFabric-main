{"ast":null,"code":"'use strict';\n\nvar Colorscale = require('../../components/colorscale');\nvar heatmapCalc = require('../heatmap/calc');\nvar setContours = require('./set_contours');\nvar endPlus = require('./end_plus');\n\n// most is the same as heatmap calc, then adjust it\n// though a few things inside heatmap calc still look for\n// contour maps, because the makeBoundArray calls are too entangled\nmodule.exports = function calc(gd, trace) {\n  var cd = heatmapCalc(gd, trace);\n  var zOut = cd[0].z;\n  setContours(trace, zOut);\n  var contours = trace.contours;\n  var cOpts = Colorscale.extractOpts(trace);\n  var cVals;\n  if (contours.coloring === 'heatmap' && cOpts.auto && trace.autocontour === false) {\n    var start = contours.start;\n    var end = endPlus(contours);\n    var cs = contours.size || 1;\n    var nc = Math.floor((end - start) / cs) + 1;\n    if (!isFinite(cs)) {\n      cs = 1;\n      nc = 1;\n    }\n    var min0 = start - cs / 2;\n    var max0 = min0 + nc * cs;\n    cVals = [min0, max0];\n  } else {\n    cVals = zOut;\n  }\n  Colorscale.calc(gd, trace, {\n    vals: cVals,\n    cLetter: 'z'\n  });\n  return cd;\n};","map":{"version":3,"names":["Colorscale","require","heatmapCalc","setContours","endPlus","module","exports","calc","gd","trace","cd","zOut","z","contours","cOpts","extractOpts","cVals","coloring","auto","autocontour","start","end","cs","size","nc","Math","floor","isFinite","min0","max0","vals","cLetter"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/contour/calc.js"],"sourcesContent":["'use strict';\n\nvar Colorscale = require('../../components/colorscale');\n\nvar heatmapCalc = require('../heatmap/calc');\nvar setContours = require('./set_contours');\nvar endPlus = require('./end_plus');\n\n// most is the same as heatmap calc, then adjust it\n// though a few things inside heatmap calc still look for\n// contour maps, because the makeBoundArray calls are too entangled\nmodule.exports = function calc(gd, trace) {\n    var cd = heatmapCalc(gd, trace);\n\n    var zOut = cd[0].z;\n    setContours(trace, zOut);\n\n    var contours = trace.contours;\n    var cOpts = Colorscale.extractOpts(trace);\n    var cVals;\n\n    if(contours.coloring === 'heatmap' && cOpts.auto && trace.autocontour === false) {\n        var start = contours.start;\n        var end = endPlus(contours);\n        var cs = contours.size || 1;\n        var nc = Math.floor((end - start) / cs) + 1;\n\n        if(!isFinite(cs)) {\n            cs = 1;\n            nc = 1;\n        }\n\n        var min0 = start - cs / 2;\n        var max0 = min0 + nc * cs;\n        cVals = [min0, max0];\n    } else {\n        cVals = zOut;\n    }\n\n    Colorscale.calc(gd, trace, {vals: cVals, cLetter: 'z'});\n\n    return cd;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,UAAU,GAAGC,OAAO,CAAC,6BAA6B,CAAC;AAEvD,IAAIC,WAAW,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAC5C,IAAIE,WAAW,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAC3C,IAAIG,OAAO,GAAGH,OAAO,CAAC,YAAY,CAAC;;AAEnC;AACA;AACA;AACAI,MAAM,CAACC,OAAO,GAAG,SAASC,IAAIA,CAACC,EAAE,EAAEC,KAAK,EAAE;EACtC,IAAIC,EAAE,GAAGR,WAAW,CAACM,EAAE,EAAEC,KAAK,CAAC;EAE/B,IAAIE,IAAI,GAAGD,EAAE,CAAC,CAAC,CAAC,CAACE,CAAC;EAClBT,WAAW,CAACM,KAAK,EAAEE,IAAI,CAAC;EAExB,IAAIE,QAAQ,GAAGJ,KAAK,CAACI,QAAQ;EAC7B,IAAIC,KAAK,GAAGd,UAAU,CAACe,WAAW,CAACN,KAAK,CAAC;EACzC,IAAIO,KAAK;EAET,IAAGH,QAAQ,CAACI,QAAQ,KAAK,SAAS,IAAIH,KAAK,CAACI,IAAI,IAAIT,KAAK,CAACU,WAAW,KAAK,KAAK,EAAE;IAC7E,IAAIC,KAAK,GAAGP,QAAQ,CAACO,KAAK;IAC1B,IAAIC,GAAG,GAAGjB,OAAO,CAACS,QAAQ,CAAC;IAC3B,IAAIS,EAAE,GAAGT,QAAQ,CAACU,IAAI,IAAI,CAAC;IAC3B,IAAIC,EAAE,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACL,GAAG,GAAGD,KAAK,IAAIE,EAAE,CAAC,GAAG,CAAC;IAE3C,IAAG,CAACK,QAAQ,CAACL,EAAE,CAAC,EAAE;MACdA,EAAE,GAAG,CAAC;MACNE,EAAE,GAAG,CAAC;IACV;IAEA,IAAII,IAAI,GAAGR,KAAK,GAAGE,EAAE,GAAG,CAAC;IACzB,IAAIO,IAAI,GAAGD,IAAI,GAAGJ,EAAE,GAAGF,EAAE;IACzBN,KAAK,GAAG,CAACY,IAAI,EAAEC,IAAI,CAAC;EACxB,CAAC,MAAM;IACHb,KAAK,GAAGL,IAAI;EAChB;EAEAX,UAAU,CAACO,IAAI,CAACC,EAAE,EAAEC,KAAK,EAAE;IAACqB,IAAI,EAAEd,KAAK;IAAEe,OAAO,EAAE;EAAG,CAAC,CAAC;EAEvD,OAAOrB,EAAE;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}