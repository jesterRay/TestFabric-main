{"ast":null,"code":"'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\nvar fontAttrs = require('../../plots/font_attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\nmodule.exports = {\n  domain: domainAttrs({\n    name: 'parcoords',\n    trace: true,\n    editType: 'plot'\n  }),\n  labelangle: {\n    valType: 'angle',\n    dflt: 0,\n    editType: 'plot',\n    description: ['Sets the angle of the labels with respect to the horizontal.', 'For example, a `tickangle` of -90 draws the labels vertically.', 'Tilted labels with *labelangle* may be positioned better', 'inside margins when `labelposition` is set to *bottom*.'].join(' ')\n  },\n  labelside: {\n    valType: 'enumerated',\n    values: ['top', 'bottom'],\n    dflt: 'top',\n    editType: 'plot',\n    description: ['Specifies the location of the `label`.', '*top* positions labels above, next to the title', '*bottom* positions labels below the graph', 'Tilted labels with *labelangle* may be positioned better', 'inside margins when `labelposition` is set to *bottom*.'].join(' ')\n  },\n  labelfont: fontAttrs({\n    editType: 'plot',\n    description: 'Sets the font for the `dimension` labels.'\n  }),\n  tickfont: fontAttrs({\n    autoShadowDflt: true,\n    editType: 'plot',\n    description: 'Sets the font for the `dimension` tick values.'\n  }),\n  rangefont: fontAttrs({\n    editType: 'plot',\n    description: 'Sets the font for the `dimension` range values.'\n  }),\n  dimensions: templatedArray('dimension', {\n    label: {\n      valType: 'string',\n      editType: 'plot',\n      description: 'The shown name of the dimension.'\n    },\n    // TODO: better way to determine ordinal vs continuous axes,\n    // so users can use tickvals/ticktext with a continuous axis.\n    tickvals: extendFlat({}, axesAttrs.tickvals, {\n      editType: 'plot',\n      description: ['Sets the values at which ticks on this axis appear.'].join(' ')\n    }),\n    ticktext: extendFlat({}, axesAttrs.ticktext, {\n      editType: 'plot',\n      description: ['Sets the text displayed at the ticks position via `tickvals`.'].join(' ')\n    }),\n    tickformat: extendFlat({}, axesAttrs.tickformat, {\n      editType: 'plot'\n    }),\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'plot',\n      description: 'Shows the dimension when set to `true` (the default). Hides the dimension for `false`.'\n    },\n    range: {\n      valType: 'info_array',\n      items: [{\n        valType: 'number',\n        editType: 'plot'\n      }, {\n        valType: 'number',\n        editType: 'plot'\n      }],\n      editType: 'plot',\n      description: ['The domain range that represents the full, shown axis extent. Defaults to the `values` extent.', 'Must be an array of `[fromValue, toValue]` with finite numbers as elements.'].join(' ')\n    },\n    constraintrange: {\n      valType: 'info_array',\n      freeLength: true,\n      dimensions: '1-2',\n      items: [{\n        valType: 'any',\n        editType: 'plot'\n      }, {\n        valType: 'any',\n        editType: 'plot'\n      }],\n      editType: 'plot',\n      description: ['The domain range to which the filter on the dimension is constrained. Must be an array', 'of `[fromValue, toValue]` with `fromValue <= toValue`, or if `multiselect` is not', 'disabled, you may give an array of arrays, where each inner array is `[fromValue, toValue]`.'].join(' ')\n    },\n    multiselect: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'plot',\n      description: 'Do we allow multiple selection ranges or just a single range?'\n    },\n    values: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Dimension values. `values[n]` represents the value of the `n`th point in the dataset,', 'therefore the `values` vector for all dimensions must be the same (longer vectors', 'will be truncated). Each value must be a finite number.'].join(' ')\n    },\n    editType: 'calc',\n    description: 'The dimensions (variables) of the parallel coordinates chart. 2..60 dimensions are supported.'\n  }),\n  line: extendFlat({\n    editType: 'calc'\n  }, colorScaleAttrs('line', {\n    // the default autocolorscale isn't quite usable for parcoords due to context ambiguity around 0 (grey, off-white)\n    // autocolorscale therefore defaults to false too, to avoid being overridden by the blue-white-red autocolor palette\n    colorscaleDflt: 'Viridis',\n    autoColorDflt: false,\n    editTypeOverride: 'calc'\n  })),\n  unselected: {\n    line: {\n      color: {\n        valType: 'color',\n        dflt: '#7f7f7f',\n        editType: 'plot',\n        description: ['Sets the base color of unselected lines.', 'in connection with `unselected.line.opacity`.'].join(' ')\n      },\n      opacity: {\n        valType: 'number',\n        min: 0,\n        max: 1,\n        dflt: 'auto',\n        editType: 'plot',\n        description: ['Sets the opacity of unselected lines.', 'The default *auto* decreases the opacity smoothly as the number of lines increases.', 'Use *1* to achieve exact `unselected.line.color`.'].join(' ')\n      },\n      editType: 'plot'\n    },\n    editType: 'plot'\n  }\n};","map":{"version":3,"names":["colorScaleAttrs","require","axesAttrs","fontAttrs","domainAttrs","attributes","extendFlat","templatedArray","module","exports","domain","name","trace","editType","labelangle","valType","dflt","description","join","labelside","values","labelfont","tickfont","autoShadowDflt","rangefont","dimensions","label","tickvals","ticktext","tickformat","visible","range","items","constraintrange","freeLength","multiselect","line","colorscaleDflt","autoColorDflt","editTypeOverride","unselected","color","opacity","min","max"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/parcoords/attributes.js"],"sourcesContent":["'use strict';\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\nvar fontAttrs = require('../../plots/font_attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\n\nmodule.exports = {\n    domain: domainAttrs({name: 'parcoords', trace: true, editType: 'plot'}),\n\n    labelangle: {\n        valType: 'angle',\n        dflt: 0,\n        editType: 'plot',\n        description: [\n            'Sets the angle of the labels with respect to the horizontal.',\n            'For example, a `tickangle` of -90 draws the labels vertically.',\n            'Tilted labels with *labelangle* may be positioned better',\n            'inside margins when `labelposition` is set to *bottom*.'\n        ].join(' ')\n    },\n\n    labelside: {\n        valType: 'enumerated',\n        values: ['top', 'bottom'],\n        dflt: 'top',\n        editType: 'plot',\n        description: [\n            'Specifies the location of the `label`.',\n            '*top* positions labels above, next to the title',\n            '*bottom* positions labels below the graph',\n            'Tilted labels with *labelangle* may be positioned better',\n            'inside margins when `labelposition` is set to *bottom*.'\n        ].join(' ')\n    },\n\n    labelfont: fontAttrs({\n        editType: 'plot',\n        description: 'Sets the font for the `dimension` labels.'\n    }),\n    tickfont: fontAttrs({\n        autoShadowDflt: true,\n        editType: 'plot',\n        description: 'Sets the font for the `dimension` tick values.'\n    }),\n    rangefont: fontAttrs({\n        editType: 'plot',\n        description: 'Sets the font for the `dimension` range values.'\n    }),\n\n    dimensions: templatedArray('dimension', {\n        label: {\n            valType: 'string',\n            editType: 'plot',\n            description: 'The shown name of the dimension.'\n        },\n        // TODO: better way to determine ordinal vs continuous axes,\n        // so users can use tickvals/ticktext with a continuous axis.\n        tickvals: extendFlat({}, axesAttrs.tickvals, {\n            editType: 'plot',\n            description: [\n                'Sets the values at which ticks on this axis appear.'\n            ].join(' ')\n        }),\n        ticktext: extendFlat({}, axesAttrs.ticktext, {\n            editType: 'plot',\n            description: [\n                'Sets the text displayed at the ticks position via `tickvals`.'\n            ].join(' ')\n        }),\n        tickformat: extendFlat({}, axesAttrs.tickformat, {\n            editType: 'plot'\n        }),\n        visible: {\n            valType: 'boolean',\n            dflt: true,\n            editType: 'plot',\n            description: 'Shows the dimension when set to `true` (the default). Hides the dimension for `false`.'\n        },\n        range: {\n            valType: 'info_array',\n            items: [\n                {valType: 'number', editType: 'plot'},\n                {valType: 'number', editType: 'plot'}\n            ],\n            editType: 'plot',\n            description: [\n                'The domain range that represents the full, shown axis extent. Defaults to the `values` extent.',\n                'Must be an array of `[fromValue, toValue]` with finite numbers as elements.'\n            ].join(' ')\n        },\n        constraintrange: {\n            valType: 'info_array',\n            freeLength: true,\n            dimensions: '1-2',\n            items: [\n                {valType: 'any', editType: 'plot'},\n                {valType: 'any', editType: 'plot'}\n            ],\n            editType: 'plot',\n            description: [\n                'The domain range to which the filter on the dimension is constrained. Must be an array',\n                'of `[fromValue, toValue]` with `fromValue <= toValue`, or if `multiselect` is not',\n                'disabled, you may give an array of arrays, where each inner array is `[fromValue, toValue]`.'\n            ].join(' ')\n        },\n        multiselect: {\n            valType: 'boolean',\n            dflt: true,\n            editType: 'plot',\n            description: 'Do we allow multiple selection ranges or just a single range?'\n        },\n        values: {\n            valType: 'data_array',\n            editType: 'calc',\n            description: [\n                'Dimension values. `values[n]` represents the value of the `n`th point in the dataset,',\n                'therefore the `values` vector for all dimensions must be the same (longer vectors',\n                'will be truncated). Each value must be a finite number.'\n            ].join(' ')\n        },\n        editType: 'calc',\n        description: 'The dimensions (variables) of the parallel coordinates chart. 2..60 dimensions are supported.'\n    }),\n\n    line: extendFlat({editType: 'calc'},\n        colorScaleAttrs('line', {\n            // the default autocolorscale isn't quite usable for parcoords due to context ambiguity around 0 (grey, off-white)\n            // autocolorscale therefore defaults to false too, to avoid being overridden by the blue-white-red autocolor palette\n            colorscaleDflt: 'Viridis',\n            autoColorDflt: false,\n            editTypeOverride: 'calc'\n        })\n    ),\n\n    unselected: {\n        line: {\n            color: {\n                valType: 'color',\n                dflt: '#7f7f7f',\n                editType: 'plot',\n                description: [\n                    'Sets the base color of unselected lines.',\n                    'in connection with `unselected.line.opacity`.'\n                ].join(' ')\n            },\n            opacity: {\n                valType: 'number',\n                min: 0,\n                max: 1,\n                dflt: 'auto',\n                editType: 'plot',\n                description: [\n                    'Sets the opacity of unselected lines.',\n                    'The default *auto* decreases the opacity smoothly as the number of lines increases.',\n                    'Use *1* to achieve exact `unselected.line.color`.'\n                ].join(' ')\n            },\n            editType: 'plot'\n        },\n        editType: 'plot'\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}