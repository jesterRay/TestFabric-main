{"ast":null,"code":"'use strict';\n\nvar dragHelpers = require('../../dragelement/helpers');\nvar selectMode = dragHelpers.selectMode;\nvar handleOutline = require('../../shapes/handle_outline');\nvar clearOutline = handleOutline.clearOutline;\nvar helpers = require('../../shapes/draw_newshape/helpers');\nvar readPaths = helpers.readPaths;\nvar writePaths = helpers.writePaths;\nvar fixDatesForPaths = helpers.fixDatesForPaths;\nmodule.exports = function newSelections(outlines, dragOptions) {\n  if (!outlines.length) return;\n  var e = outlines[0][0]; // pick first\n  if (!e) return;\n  var d = e.getAttribute('d');\n  var gd = dragOptions.gd;\n  var newStyle = gd._fullLayout.newselection;\n  var plotinfo = dragOptions.plotinfo;\n  var xaxis = plotinfo.xaxis;\n  var yaxis = plotinfo.yaxis;\n  var isActiveSelection = dragOptions.isActiveSelection;\n  var dragmode = dragOptions.dragmode;\n  var selections = (gd.layout || {}).selections || [];\n  if (!selectMode(dragmode) && isActiveSelection !== undefined) {\n    var id = gd._fullLayout._activeSelectionIndex;\n    if (id < selections.length) {\n      switch (gd._fullLayout.selections[id].type) {\n        case 'rect':\n          dragmode = 'select';\n          break;\n        case 'path':\n          dragmode = 'lasso';\n          break;\n      }\n    }\n  }\n  var polygons = readPaths(d, gd, plotinfo, isActiveSelection);\n  var newSelection = {\n    xref: xaxis._id,\n    yref: yaxis._id,\n    opacity: newStyle.opacity,\n    line: {\n      color: newStyle.line.color,\n      width: newStyle.line.width,\n      dash: newStyle.line.dash\n    }\n  };\n  var cell;\n  // rect can be in one cell\n  // only define cell if there is single cell\n  if (polygons.length === 1) cell = polygons[0];\n  if (cell && cell.length === 5 &&\n  // ensure we only have 4 corners for a rect\n  dragmode === 'select') {\n    newSelection.type = 'rect';\n    newSelection.x0 = cell[0][1];\n    newSelection.y0 = cell[0][2];\n    newSelection.x1 = cell[2][1];\n    newSelection.y1 = cell[2][2];\n  } else {\n    newSelection.type = 'path';\n    if (xaxis && yaxis) fixDatesForPaths(polygons, xaxis, yaxis);\n    newSelection.path = writePaths(polygons);\n    cell = null;\n  }\n  clearOutline(gd);\n  var editHelpers = dragOptions.editHelpers;\n  var modifyItem = (editHelpers || {}).modifyItem;\n  var allSelections = [];\n  for (var q = 0; q < selections.length; q++) {\n    var beforeEdit = gd._fullLayout.selections[q];\n    if (!beforeEdit) {\n      allSelections[q] = beforeEdit;\n      continue;\n    }\n    allSelections[q] = beforeEdit._input;\n    if (isActiveSelection !== undefined && q === gd._fullLayout._activeSelectionIndex) {\n      var afterEdit = newSelection;\n      switch (beforeEdit.type) {\n        case 'rect':\n          modifyItem('x0', afterEdit.x0);\n          modifyItem('x1', afterEdit.x1);\n          modifyItem('y0', afterEdit.y0);\n          modifyItem('y1', afterEdit.y1);\n          break;\n        case 'path':\n          modifyItem('path', afterEdit.path);\n          break;\n      }\n    }\n  }\n  if (isActiveSelection === undefined) {\n    allSelections.push(newSelection); // add new selection\n    return allSelections;\n  }\n  return editHelpers ? editHelpers.getUpdateObj() : {};\n};","map":{"version":3,"names":["dragHelpers","require","selectMode","handleOutline","clearOutline","helpers","readPaths","writePaths","fixDatesForPaths","module","exports","newSelections","outlines","dragOptions","length","e","d","getAttribute","gd","newStyle","_fullLayout","newselection","plotinfo","xaxis","yaxis","isActiveSelection","dragmode","selections","layout","undefined","id","_activeSelectionIndex","type","polygons","newSelection","xref","_id","yref","opacity","line","color","width","dash","cell","x0","y0","x1","y1","path","editHelpers","modifyItem","allSelections","q","beforeEdit","_input","afterEdit","push","getUpdateObj"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/components/selections/draw_newselection/newselections.js"],"sourcesContent":["'use strict';\n\nvar dragHelpers = require('../../dragelement/helpers');\nvar selectMode = dragHelpers.selectMode;\n\nvar handleOutline = require('../../shapes/handle_outline');\nvar clearOutline = handleOutline.clearOutline;\n\nvar helpers = require('../../shapes/draw_newshape/helpers');\nvar readPaths = helpers.readPaths;\nvar writePaths = helpers.writePaths;\nvar fixDatesForPaths = helpers.fixDatesForPaths;\n\nmodule.exports = function newSelections(outlines, dragOptions) {\n    if(!outlines.length) return;\n    var e = outlines[0][0]; // pick first\n    if(!e) return;\n    var d = e.getAttribute('d');\n\n    var gd = dragOptions.gd;\n    var newStyle = gd._fullLayout.newselection;\n\n    var plotinfo = dragOptions.plotinfo;\n    var xaxis = plotinfo.xaxis;\n    var yaxis = plotinfo.yaxis;\n\n    var isActiveSelection = dragOptions.isActiveSelection;\n    var dragmode = dragOptions.dragmode;\n\n    var selections = (gd.layout || {}).selections || [];\n\n    if(!selectMode(dragmode) && isActiveSelection !== undefined) {\n        var id = gd._fullLayout._activeSelectionIndex;\n        if(id < selections.length) {\n            switch(gd._fullLayout.selections[id].type) {\n                case 'rect':\n                    dragmode = 'select';\n                    break;\n                case 'path':\n                    dragmode = 'lasso';\n                    break;\n            }\n        }\n    }\n\n    var polygons = readPaths(d, gd, plotinfo, isActiveSelection);\n\n    var newSelection = {\n        xref: xaxis._id,\n        yref: yaxis._id,\n\n        opacity: newStyle.opacity,\n        line: {\n            color: newStyle.line.color,\n            width: newStyle.line.width,\n            dash: newStyle.line.dash\n        }\n    };\n\n    var cell;\n    // rect can be in one cell\n    // only define cell if there is single cell\n    if(polygons.length === 1) cell = polygons[0];\n\n    if(\n        cell &&\n        cell.length === 5 && // ensure we only have 4 corners for a rect\n        dragmode === 'select'\n    ) {\n        newSelection.type = 'rect';\n        newSelection.x0 = cell[0][1];\n        newSelection.y0 = cell[0][2];\n        newSelection.x1 = cell[2][1];\n        newSelection.y1 = cell[2][2];\n    } else {\n        newSelection.type = 'path';\n        if(xaxis && yaxis) fixDatesForPaths(polygons, xaxis, yaxis);\n        newSelection.path = writePaths(polygons);\n        cell = null;\n    }\n\n    clearOutline(gd);\n\n    var editHelpers = dragOptions.editHelpers;\n    var modifyItem = (editHelpers || {}).modifyItem;\n\n    var allSelections = [];\n    for(var q = 0; q < selections.length; q++) {\n        var beforeEdit = gd._fullLayout.selections[q];\n        if(!beforeEdit) {\n            allSelections[q] = beforeEdit;\n            continue;\n        }\n\n        allSelections[q] = beforeEdit._input;\n\n        if(\n            isActiveSelection !== undefined &&\n            q === gd._fullLayout._activeSelectionIndex\n        ) {\n            var afterEdit = newSelection;\n\n            switch(beforeEdit.type) {\n                case 'rect':\n                    modifyItem('x0', afterEdit.x0);\n                    modifyItem('x1', afterEdit.x1);\n                    modifyItem('y0', afterEdit.y0);\n                    modifyItem('y1', afterEdit.y1);\n                    break;\n\n                case 'path':\n                    modifyItem('path', afterEdit.path);\n                    break;\n            }\n        }\n    }\n\n    if(isActiveSelection === undefined) {\n        allSelections.push(newSelection); // add new selection\n        return allSelections;\n    }\n\n    return editHelpers ? editHelpers.getUpdateObj() : {};\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}