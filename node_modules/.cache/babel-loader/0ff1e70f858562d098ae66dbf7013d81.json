{"ast":null,"code":"'use strict';\n\nvar d3 = require('@plotly/d3');\nvar Lib = require('../../lib');\nvar numberFormat = Lib.numberFormat;\nvar tinycolor = require('tinycolor2');\nvar supportsPassive = require('has-passive-events');\nvar Registry = require('../../registry');\nvar strTranslate = Lib.strTranslate;\nvar svgTextUtils = require('../../lib/svg_text_utils');\nvar Color = require('../../components/color');\nvar Drawing = require('../../components/drawing');\nvar Fx = require('../../components/fx');\nvar Axes = require('./axes');\nvar setCursor = require('../../lib/setcursor');\nvar dragElement = require('../../components/dragelement');\nvar helpers = require('../../components/dragelement/helpers');\nvar selectingOrDrawing = helpers.selectingOrDrawing;\nvar freeMode = helpers.freeMode;\nvar FROM_TL = require('../../constants/alignment').FROM_TL;\nvar clearGlCanvases = require('../../lib/clear_gl_canvases');\nvar redrawReglTraces = require('../../plot_api/subroutines').redrawReglTraces;\nvar Plots = require('../plots');\nvar getFromId = require('./axis_ids').getFromId;\nvar prepSelect = require('../../components/selections').prepSelect;\nvar clearOutline = require('../../components/selections').clearOutline;\nvar selectOnClick = require('../../components/selections').selectOnClick;\nvar scaleZoom = require('./scale_zoom');\nvar constants = require('./constants');\nvar MINDRAG = constants.MINDRAG;\nvar MINZOOM = constants.MINZOOM;\n\n// flag for showing \"doubleclick to zoom out\" only at the beginning\nvar SHOWZOOMOUTTIP = true;\n\n// dragBox: create an element to drag one or more axis ends\n// inputs:\n//      plotinfo - which subplot are we making dragboxes on?\n//      x,y,w,h - left, top, width, height of the box\n//      ns - how does this drag the vertical axis?\n//          'n' - top only\n//          's' - bottom only\n//          'ns' - top and bottom together, difference unchanged\n//      ew - same for horizontal axis\nfunction makeDragBox(gd, plotinfo, x, y, w, h, ns, ew) {\n  // mouseDown stores ms of first mousedown event in the last\n  // `gd._context.doubleClickDelay` ms on the drag bars\n  // numClicks stores how many mousedowns have been seen\n  // within `gd._context.doubleClickDelay` so we can check for click or doubleclick events\n  // dragged stores whether a drag has occurred, so we don't have to\n  // redraw unnecessarily, ie if no move bigger than MINDRAG or MINZOOM px\n  var zoomlayer = gd._fullLayout._zoomlayer;\n  var isMainDrag = ns + ew === 'nsew';\n  var singleEnd = (ns + ew).length === 1;\n\n  // main subplot x and y (i.e. found in plotinfo - the main ones)\n  var xa0, ya0;\n  // {ax._id: ax} hash objects\n  var xaHash, yaHash;\n  // xaHash/yaHash values (arrays)\n  var xaxes, yaxes;\n  // main axis offsets\n  var xs, ys;\n  // main axis lengths\n  var pw, ph;\n  // contains keys 'xaHash', 'yaHash', 'xaxes', and 'yaxes'\n  // which are the x/y {ax._id: ax} hash objects and their values\n  // for linked axis relative to this subplot\n  var links;\n  // similar to `links` but for matching axes\n  var matches;\n  // set to ew/ns val when active, set to '' when inactive\n  var xActive, yActive;\n  // are all axes in this subplot are fixed?\n  var allFixedRanges;\n  // do we need to edit x/y ranges?\n  var editX, editY;\n  // graph-wide optimization flags\n  var hasScatterGl, hasSplom, hasSVG;\n  // collected changes to be made to the plot by relayout at the end\n  var updates;\n  // scaling factors from css transform\n  var scaleX;\n  var scaleY;\n\n  // offset the x location of the box if needed\n  x += plotinfo.yaxis._shift;\n  function recomputeAxisLists() {\n    xa0 = plotinfo.xaxis;\n    ya0 = plotinfo.yaxis;\n    pw = xa0._length;\n    ph = ya0._length;\n    xs = xa0._offset;\n    ys = ya0._offset;\n    xaHash = {};\n    xaHash[xa0._id] = xa0;\n    yaHash = {};\n    yaHash[ya0._id] = ya0;\n\n    // if we're dragging two axes at once, also drag overlays\n    if (ns && ew) {\n      var overlays = plotinfo.overlays;\n      for (var i = 0; i < overlays.length; i++) {\n        var xa = overlays[i].xaxis;\n        xaHash[xa._id] = xa;\n        var ya = overlays[i].yaxis;\n        yaHash[ya._id] = ya;\n      }\n    }\n    xaxes = hashValues(xaHash);\n    yaxes = hashValues(yaHash);\n    xActive = isDirectionActive(xaxes, ew);\n    yActive = isDirectionActive(yaxes, ns);\n    allFixedRanges = !yActive && !xActive;\n    matches = calcLinks(gd, gd._fullLayout._axisMatchGroups, xaHash, yaHash);\n    links = calcLinks(gd, gd._fullLayout._axisConstraintGroups, xaHash, yaHash, matches);\n    var spConstrained = links.isSubplotConstrained || matches.isSubplotConstrained;\n    editX = ew || spConstrained;\n    editY = ns || spConstrained;\n    var fullLayout = gd._fullLayout;\n    hasScatterGl = fullLayout._has('scattergl');\n    hasSplom = fullLayout._has('splom');\n    hasSVG = fullLayout._has('svg');\n  }\n  recomputeAxisLists();\n  var cursor = getDragCursor(yActive + xActive, gd._fullLayout.dragmode, isMainDrag);\n  var dragger = makeRectDragger(plotinfo, ns + ew + 'drag', cursor, x, y, w, h);\n\n  // still need to make the element if the axes are disabled\n  // but nuke its events (except for maindrag which needs them for hover)\n  // and stop there\n  if (allFixedRanges && !isMainDrag) {\n    dragger.onmousedown = null;\n    dragger.style.pointerEvents = 'none';\n    return dragger;\n  }\n  var dragOptions = {\n    element: dragger,\n    gd: gd,\n    plotinfo: plotinfo\n  };\n  dragOptions.prepFn = function (e, startX, startY) {\n    var dragModePrev = dragOptions.dragmode;\n    var dragModeNow = gd._fullLayout.dragmode;\n    if (dragModeNow !== dragModePrev) {\n      dragOptions.dragmode = dragModeNow;\n    }\n    recomputeAxisLists();\n    scaleX = gd._fullLayout._invScaleX;\n    scaleY = gd._fullLayout._invScaleY;\n    if (!allFixedRanges) {\n      if (isMainDrag) {\n        // main dragger handles all drag modes, and changes\n        // to pan (or to zoom if it already is pan) on shift\n        if (e.shiftKey) {\n          if (dragModeNow === 'pan') dragModeNow = 'zoom';else if (!selectingOrDrawing(dragModeNow)) dragModeNow = 'pan';\n        } else if (e.ctrlKey) {\n          dragModeNow = 'pan';\n        }\n      } else {\n        // all other draggers just pan\n        dragModeNow = 'pan';\n      }\n    }\n    if (freeMode(dragModeNow)) dragOptions.minDrag = 1;else dragOptions.minDrag = undefined;\n    if (selectingOrDrawing(dragModeNow)) {\n      dragOptions.xaxes = xaxes;\n      dragOptions.yaxes = yaxes;\n      // this attaches moveFn, clickFn, doneFn on dragOptions\n      prepSelect(e, startX, startY, dragOptions, dragModeNow);\n    } else {\n      dragOptions.clickFn = clickFn;\n      if (selectingOrDrawing(dragModePrev)) {\n        // TODO Fix potential bug\n        // Note: clearing / resetting selection state only happens, when user\n        // triggers at least one interaction in pan/zoom mode. Otherwise, the\n        // select/lasso outlines are deleted (in plots.js.cleanPlot) but the selection\n        // cache isn't cleared. So when the user switches back to select/lasso and\n        // 'adds to a selection' with Shift, the \"old\", seemingly removed outlines\n        // are redrawn again because the selection cache still holds their coordinates.\n        // However, this isn't easily solved, since plots.js would need\n        // to have a reference to the dragOptions object (which holds the\n        // selection cache).\n        clearAndResetSelect();\n      }\n      if (!allFixedRanges) {\n        if (dragModeNow === 'zoom') {\n          dragOptions.moveFn = zoomMove;\n          dragOptions.doneFn = zoomDone;\n\n          // zoomMove takes care of the threshold, but we need to\n          // minimize this so that constrained zoom boxes will flip\n          // orientation at the right place\n          dragOptions.minDrag = 1;\n          zoomPrep(e, startX, startY);\n        } else if (dragModeNow === 'pan') {\n          dragOptions.moveFn = plotDrag;\n          dragOptions.doneFn = dragTail;\n        }\n      }\n    }\n    gd._fullLayout._redrag = function () {\n      var dragDataNow = gd._dragdata;\n      if (dragDataNow && dragDataNow.element === dragger) {\n        var dragModeNow = gd._fullLayout.dragmode;\n        if (!selectingOrDrawing(dragModeNow)) {\n          recomputeAxisLists();\n          updateSubplots([0, 0, pw, ph]);\n          dragOptions.moveFn(dragDataNow.dx, dragDataNow.dy);\n        }\n      }\n    };\n  };\n  function clearAndResetSelect() {\n    // clear selection polygon cache (if any)\n    dragOptions.plotinfo.selection = false;\n    // clear selection outlines\n    clearOutline(gd);\n  }\n  function clickFn(numClicks, evt) {\n    var gd = dragOptions.gd;\n    if (gd._fullLayout._activeShapeIndex >= 0) {\n      gd._fullLayout._deactivateShape(gd);\n      return;\n    }\n    var clickmode = gd._fullLayout.clickmode;\n    removeZoombox(gd);\n    if (numClicks === 2 && !singleEnd) doubleClick();\n    if (isMainDrag) {\n      if (clickmode.indexOf('select') > -1) {\n        selectOnClick(evt, gd, xaxes, yaxes, plotinfo.id, dragOptions);\n      }\n      if (clickmode.indexOf('event') > -1) {\n        Fx.click(gd, evt, plotinfo.id);\n      }\n    } else if (numClicks === 1 && singleEnd) {\n      var ax = ns ? ya0 : xa0;\n      var end = ns === 's' || ew === 'w' ? 0 : 1;\n      var attrStr = ax._name + '.range[' + end + ']';\n      var initialText = getEndText(ax, end);\n      var hAlign = 'left';\n      var vAlign = 'middle';\n      if (ax.fixedrange) return;\n      if (ns) {\n        vAlign = ns === 'n' ? 'top' : 'bottom';\n        if (ax.side === 'right') hAlign = 'right';\n      } else if (ew === 'e') hAlign = 'right';\n      if (gd._context.showAxisRangeEntryBoxes) {\n        d3.select(dragger).call(svgTextUtils.makeEditable, {\n          gd: gd,\n          immediate: true,\n          background: gd._fullLayout.paper_bgcolor,\n          text: String(initialText),\n          fill: ax.tickfont ? ax.tickfont.color : '#444',\n          horizontalAlign: hAlign,\n          verticalAlign: vAlign\n        }).on('edit', function (text) {\n          var v = ax.d2r(text);\n          if (v !== undefined) {\n            Registry.call('_guiRelayout', gd, attrStr, v);\n          }\n        });\n      }\n    }\n  }\n  dragElement.init(dragOptions);\n\n  // x/y px position at start of drag\n  var x0, y0;\n  // bbox object of the zoombox\n  var box;\n  // luminance of bg behind zoombox\n  var lum;\n  // zoombox path outline\n  var path0;\n  // is zoombox dimmed (during drag)\n  var dimmed;\n  // 'x'-only, 'y' or 'xy' zooming\n  var zoomMode;\n  // zoombox d3 selection\n  var zb;\n  // zoombox corner d3 selection\n  var corners;\n  // zoom takes over minDrag, so it also has to take over gd._dragged\n  var zoomDragged;\n  function zoomPrep(e, startX, startY) {\n    var dragBBox = dragger.getBoundingClientRect();\n    x0 = startX - dragBBox.left;\n    y0 = startY - dragBBox.top;\n    gd._fullLayout._calcInverseTransform(gd);\n    var transformedCoords = Lib.apply3DTransform(gd._fullLayout._invTransform)(x0, y0);\n    x0 = transformedCoords[0];\n    y0 = transformedCoords[1];\n    box = {\n      l: x0,\n      r: x0,\n      w: 0,\n      t: y0,\n      b: y0,\n      h: 0\n    };\n    lum = gd._hmpixcount ? gd._hmlumcount / gd._hmpixcount : tinycolor(gd._fullLayout.plot_bgcolor).getLuminance();\n    path0 = 'M0,0H' + pw + 'V' + ph + 'H0V0';\n    dimmed = false;\n    zoomMode = 'xy';\n    zoomDragged = false;\n    zb = makeZoombox(zoomlayer, lum, xs, ys, path0);\n    corners = makeCorners(zoomlayer, xs, ys);\n  }\n  function zoomMove(dx0, dy0) {\n    if (gd._transitioningWithDuration) {\n      return false;\n    }\n    var x1 = Math.max(0, Math.min(pw, scaleX * dx0 + x0));\n    var y1 = Math.max(0, Math.min(ph, scaleY * dy0 + y0));\n    var dx = Math.abs(x1 - x0);\n    var dy = Math.abs(y1 - y0);\n    box.l = Math.min(x0, x1);\n    box.r = Math.max(x0, x1);\n    box.t = Math.min(y0, y1);\n    box.b = Math.max(y0, y1);\n    function noZoom() {\n      zoomMode = '';\n      box.r = box.l;\n      box.t = box.b;\n      corners.attr('d', 'M0,0Z');\n    }\n    if (links.isSubplotConstrained) {\n      if (dx > MINZOOM || dy > MINZOOM) {\n        zoomMode = 'xy';\n        if (dx / pw > dy / ph) {\n          dy = dx * ph / pw;\n          if (y0 > y1) box.t = y0 - dy;else box.b = y0 + dy;\n        } else {\n          dx = dy * pw / ph;\n          if (x0 > x1) box.l = x0 - dx;else box.r = x0 + dx;\n        }\n        corners.attr('d', xyCorners(box));\n      } else {\n        noZoom();\n      }\n    } else if (matches.isSubplotConstrained) {\n      if (dx > MINZOOM || dy > MINZOOM) {\n        zoomMode = 'xy';\n        var r0 = Math.min(box.l / pw, (ph - box.b) / ph);\n        var r1 = Math.max(box.r / pw, (ph - box.t) / ph);\n        box.l = r0 * pw;\n        box.r = r1 * pw;\n        box.b = (1 - r0) * ph;\n        box.t = (1 - r1) * ph;\n        corners.attr('d', xyCorners(box));\n      } else {\n        noZoom();\n      }\n    } else if (!yActive || dy < Math.min(Math.max(dx * 0.6, MINDRAG), MINZOOM)) {\n      // look for small drags in one direction or the other,\n      // and only drag the other axis\n\n      if (dx < MINDRAG || !xActive) {\n        noZoom();\n      } else {\n        box.t = 0;\n        box.b = ph;\n        zoomMode = 'x';\n        corners.attr('d', xCorners(box, y0));\n      }\n    } else if (!xActive || dx < Math.min(dy * 0.6, MINZOOM)) {\n      box.l = 0;\n      box.r = pw;\n      zoomMode = 'y';\n      corners.attr('d', yCorners(box, x0));\n    } else {\n      zoomMode = 'xy';\n      corners.attr('d', xyCorners(box));\n    }\n    box.w = box.r - box.l;\n    box.h = box.b - box.t;\n    if (zoomMode) zoomDragged = true;\n    gd._dragged = zoomDragged;\n    updateZoombox(zb, corners, box, path0, dimmed, lum);\n    computeZoomUpdates();\n    gd.emit('plotly_relayouting', updates);\n    dimmed = true;\n  }\n  function computeZoomUpdates() {\n    updates = {};\n\n    // TODO: edit linked axes in zoomAxRanges and in dragTail\n    if (zoomMode === 'xy' || zoomMode === 'x') {\n      zoomAxRanges(xaxes, box.l / pw, box.r / pw, updates, links.xaxes);\n      updateMatchedAxRange('x', updates);\n    }\n    if (zoomMode === 'xy' || zoomMode === 'y') {\n      zoomAxRanges(yaxes, (ph - box.b) / ph, (ph - box.t) / ph, updates, links.yaxes);\n      updateMatchedAxRange('y', updates);\n    }\n  }\n  function zoomDone() {\n    computeZoomUpdates();\n    removeZoombox(gd);\n    dragTail();\n    showDoubleClickNotifier(gd);\n  }\n\n  // scroll zoom, on all draggers except corners\n  var scrollViewBox = [0, 0, pw, ph];\n  // wait a little after scrolling before redrawing\n  var redrawTimer = null;\n  var REDRAWDELAY = constants.REDRAWDELAY;\n  var mainplot = plotinfo.mainplot ? gd._fullLayout._plots[plotinfo.mainplot] : plotinfo;\n  function zoomWheel(e) {\n    // deactivate mousewheel scrolling on embedded graphs\n    // devs can override this with layout._enablescrollzoom,\n    // but _ ensures this setting won't leave their page\n    if (!gd._context._scrollZoom.cartesian && !gd._fullLayout._enablescrollzoom) {\n      return;\n    }\n    clearAndResetSelect();\n\n    // If a transition is in progress, then disable any behavior:\n    if (gd._transitioningWithDuration) {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n    recomputeAxisLists();\n    clearTimeout(redrawTimer);\n    var wheelDelta = -e.deltaY;\n    if (!isFinite(wheelDelta)) wheelDelta = e.wheelDelta / 10;\n    if (!isFinite(wheelDelta)) {\n      Lib.log('Did not find wheel motion attributes: ', e);\n      return;\n    }\n    var zoom = Math.exp(-Math.min(Math.max(wheelDelta, -20), 20) / 200);\n    var gbb = mainplot.draglayer.select('.nsewdrag').node().getBoundingClientRect();\n    var xfrac = (e.clientX - gbb.left) / gbb.width;\n    var yfrac = (gbb.bottom - e.clientY) / gbb.height;\n    var i;\n    function zoomWheelOneAxis(ax, centerFraction, zoom) {\n      if (ax.fixedrange) return;\n      var axRange = Lib.simpleMap(ax.range, ax.r2l);\n      var v0 = axRange[0] + (axRange[1] - axRange[0]) * centerFraction;\n      function doZoom(v) {\n        return ax.l2r(v0 + (v - v0) * zoom);\n      }\n      ax.range = axRange.map(doZoom);\n    }\n    if (editX) {\n      // if we're only zooming this axis because of constraints,\n      // zoom it about the center\n      if (!ew) xfrac = 0.5;\n      for (i = 0; i < xaxes.length; i++) {\n        zoomWheelOneAxis(xaxes[i], xfrac, zoom);\n      }\n      updateMatchedAxRange('x');\n      scrollViewBox[2] *= zoom;\n      scrollViewBox[0] += scrollViewBox[2] * xfrac * (1 / zoom - 1);\n    }\n    if (editY) {\n      if (!ns) yfrac = 0.5;\n      for (i = 0; i < yaxes.length; i++) {\n        zoomWheelOneAxis(yaxes[i], yfrac, zoom);\n      }\n      updateMatchedAxRange('y');\n      scrollViewBox[3] *= zoom;\n      scrollViewBox[1] += scrollViewBox[3] * (1 - yfrac) * (1 / zoom - 1);\n    }\n\n    // viewbox redraw at first\n    updateSubplots(scrollViewBox);\n    ticksAndAnnotations();\n    gd.emit('plotly_relayouting', updates);\n\n    // then replot after a delay to make sure\n    // no more scrolling is coming\n    redrawTimer = setTimeout(function () {\n      if (!gd._fullLayout) return;\n      scrollViewBox = [0, 0, pw, ph];\n      dragTail();\n    }, REDRAWDELAY);\n    e.preventDefault();\n    return;\n  }\n\n  // everything but the corners gets wheel zoom\n  if (ns.length * ew.length !== 1) {\n    attachWheelEventHandler(dragger, zoomWheel);\n  }\n\n  // plotDrag: move the plot in response to a drag\n  function plotDrag(dx, dy) {\n    dx = dx * scaleX;\n    dy = dy * scaleY;\n    // If a transition is in progress, then disable any behavior:\n    if (gd._transitioningWithDuration) {\n      return;\n    }\n\n    // prevent axis drawing from monkeying with margins until we're done\n    gd._fullLayout._replotting = true;\n    if (xActive === 'ew' || yActive === 'ns') {\n      var spDx = xActive ? -dx : 0;\n      var spDy = yActive ? -dy : 0;\n      if (matches.isSubplotConstrained) {\n        if (xActive && yActive) {\n          var frac = (dx / pw - dy / ph) / 2;\n          dx = frac * pw;\n          dy = -frac * ph;\n          spDx = -dx;\n          spDy = -dy;\n        }\n        if (yActive) {\n          spDx = -spDy * pw / ph;\n        } else {\n          spDy = -spDx * ph / pw;\n        }\n      }\n      if (xActive) {\n        dragAxList(xaxes, dx);\n        updateMatchedAxRange('x');\n      }\n      if (yActive) {\n        dragAxList(yaxes, dy);\n        updateMatchedAxRange('y');\n      }\n      updateSubplots([spDx, spDy, pw, ph]);\n      ticksAndAnnotations();\n      gd.emit('plotly_relayouting', updates);\n      return;\n    }\n\n    // dz: set a new value for one end (0 or 1) of an axis array axArray,\n    // and return a pixel shift for that end for the viewbox\n    // based on pixel drag distance d\n    // TODO: this makes (generally non-fatal) errors when you get\n    // near floating point limits\n    function dz(axArray, end, d) {\n      var otherEnd = 1 - end;\n      var movedAx;\n      var newLinearizedEnd;\n      for (var i = 0; i < axArray.length; i++) {\n        var axi = axArray[i];\n        if (axi.fixedrange) continue;\n        movedAx = axi;\n        newLinearizedEnd = axi._rl[otherEnd] + (axi._rl[end] - axi._rl[otherEnd]) / dZoom(d / axi._length);\n        var newEnd = axi.l2r(newLinearizedEnd);\n\n        // if l2r comes back false or undefined, it means we've dragged off\n        // the end of valid ranges - so stop.\n        if (newEnd !== false && newEnd !== undefined) axi.range[end] = newEnd;\n      }\n      return movedAx._length * (movedAx._rl[end] - newLinearizedEnd) / (movedAx._rl[end] - movedAx._rl[otherEnd]);\n    }\n    var dxySign = xActive === 'w' === (yActive === 'n') ? 1 : -1;\n    if (xActive && yActive && (links.isSubplotConstrained || matches.isSubplotConstrained)) {\n      // dragging a corner of a constrained subplot:\n      // respect the fixed corner, but harmonize dx and dy\n      var dxyFraction = (dx / pw + dxySign * dy / ph) / 2;\n      dx = dxyFraction * pw;\n      dy = dxySign * dxyFraction * ph;\n    }\n    var xStart, yStart;\n    if (xActive === 'w') dx = dz(xaxes, 0, dx);else if (xActive === 'e') dx = dz(xaxes, 1, -dx);else if (!xActive) dx = 0;\n    if (yActive === 'n') dy = dz(yaxes, 1, dy);else if (yActive === 's') dy = dz(yaxes, 0, -dy);else if (!yActive) dy = 0;\n    xStart = xActive === 'w' ? dx : 0;\n    yStart = yActive === 'n' ? dy : 0;\n    if (links.isSubplotConstrained && !matches.isSubplotConstrained ||\n    // NW or SE on matching axes - create a symmetric zoom\n    matches.isSubplotConstrained && xActive && yActive && dxySign > 0) {\n      var i;\n      if (matches.isSubplotConstrained || !xActive && yActive.length === 1) {\n        // dragging one end of the y axis of a constrained subplot\n        // scale the other axis the same about its middle\n        for (i = 0; i < xaxes.length; i++) {\n          xaxes[i].range = xaxes[i]._r.slice();\n          scaleZoom(xaxes[i], 1 - dy / ph);\n        }\n        dx = dy * pw / ph;\n        xStart = dx / 2;\n      }\n      if (matches.isSubplotConstrained || !yActive && xActive.length === 1) {\n        for (i = 0; i < yaxes.length; i++) {\n          yaxes[i].range = yaxes[i]._r.slice();\n          scaleZoom(yaxes[i], 1 - dx / pw);\n        }\n        dy = dx * ph / pw;\n        yStart = dy / 2;\n      }\n    }\n    if (!matches.isSubplotConstrained || !yActive) {\n      updateMatchedAxRange('x');\n    }\n    if (!matches.isSubplotConstrained || !xActive) {\n      updateMatchedAxRange('y');\n    }\n    var xSize = pw - dx;\n    var ySize = ph - dy;\n    if (matches.isSubplotConstrained && !(xActive && yActive)) {\n      if (xActive) {\n        yStart = xStart ? 0 : dx * ph / pw;\n        ySize = xSize * ph / pw;\n      } else {\n        xStart = yStart ? 0 : dy * pw / ph;\n        xSize = ySize * pw / ph;\n      }\n    }\n    updateSubplots([xStart, yStart, xSize, ySize]);\n    ticksAndAnnotations();\n    gd.emit('plotly_relayouting', updates);\n  }\n  function updateMatchedAxRange(axLetter, out) {\n    var matchedAxes = matches.isSubplotConstrained ? {\n      x: yaxes,\n      y: xaxes\n    }[axLetter] : matches[axLetter + 'axes'];\n    var constrainedAxes = matches.isSubplotConstrained ? {\n      x: xaxes,\n      y: yaxes\n    }[axLetter] : [];\n    for (var i = 0; i < matchedAxes.length; i++) {\n      var ax = matchedAxes[i];\n      var axId = ax._id;\n      var axId2 = matches.xLinks[axId] || matches.yLinks[axId];\n      var ax2 = constrainedAxes[0] || xaHash[axId2] || yaHash[axId2];\n      if (ax2) {\n        if (out) {\n          // zoombox case - don't mutate 'range', just add keys in 'updates'\n          out[ax._name + '.range[0]'] = out[ax2._name + '.range[0]'];\n          out[ax._name + '.range[1]'] = out[ax2._name + '.range[1]'];\n        } else {\n          ax.range = ax2.range.slice();\n        }\n      }\n    }\n  }\n\n  // Draw ticks and annotations (and other components) when ranges change.\n  // Also records the ranges that have changed for use by update at the end.\n  function ticksAndAnnotations() {\n    var activeAxIds = [];\n    var i;\n    function pushActiveAxIds(axList) {\n      for (i = 0; i < axList.length; i++) {\n        if (!axList[i].fixedrange) activeAxIds.push(axList[i]._id);\n      }\n    }\n    function pushActiveAxIdsSynced(axList, axisType) {\n      for (i = 0; i < axList.length; i++) {\n        var axListI = axList[i];\n        var axListIType = axListI[axisType];\n        if (!axListI.fixedrange && axListIType.tickmode === 'sync') activeAxIds.push(axListIType._id);\n      }\n    }\n    if (editX) {\n      pushActiveAxIds(xaxes);\n      pushActiveAxIds(links.xaxes);\n      pushActiveAxIds(matches.xaxes);\n      pushActiveAxIdsSynced(plotinfo.overlays, 'xaxis');\n    }\n    if (editY) {\n      pushActiveAxIds(yaxes);\n      pushActiveAxIds(links.yaxes);\n      pushActiveAxIds(matches.yaxes);\n      pushActiveAxIdsSynced(plotinfo.overlays, 'yaxis');\n    }\n    updates = {};\n    for (i = 0; i < activeAxIds.length; i++) {\n      var axId = activeAxIds[i];\n      var ax = getFromId(gd, axId);\n      Axes.drawOne(gd, ax, {\n        skipTitle: true\n      });\n      updates[ax._name + '.range[0]'] = ax.range[0];\n      updates[ax._name + '.range[1]'] = ax.range[1];\n    }\n    Axes.redrawComponents(gd, activeAxIds);\n  }\n  function doubleClick() {\n    if (gd._transitioningWithDuration) return;\n    var doubleClickConfig = gd._context.doubleClick;\n    var axList = [];\n    if (xActive) axList = axList.concat(xaxes);\n    if (yActive) axList = axList.concat(yaxes);\n    if (matches.xaxes) axList = axList.concat(matches.xaxes);\n    if (matches.yaxes) axList = axList.concat(matches.yaxes);\n    var attrs = {};\n    var ax, i;\n\n    // For reset+autosize mode:\n    // If *any* of the main axes is not at its initial range\n    // (or autoranged, if we have no initial range, to match the logic in\n    // doubleClickConfig === 'reset' below), we reset.\n    // If they are *all* at their initial ranges, then we autosize.\n    if (doubleClickConfig === 'reset+autosize') {\n      doubleClickConfig = 'autosize';\n      for (i = 0; i < axList.length; i++) {\n        ax = axList[i];\n        var r0 = ax._rangeInitial0;\n        var r1 = ax._rangeInitial1;\n        var hasRangeInitial = r0 !== undefined || r1 !== undefined;\n        if (hasRangeInitial && (r0 !== undefined && r0 !== ax.range[0] || r1 !== undefined && r1 !== ax.range[1]) || !hasRangeInitial && ax.autorange !== true) {\n          doubleClickConfig = 'reset';\n          break;\n        }\n      }\n    }\n    if (doubleClickConfig === 'autosize') {\n      // don't set the linked axes here, so relayout marks them as shrinkable\n      // and we autosize just to the requested axis/axes\n      for (i = 0; i < axList.length; i++) {\n        ax = axList[i];\n        if (!ax.fixedrange) attrs[ax._name + '.autorange'] = true;\n      }\n    } else if (doubleClickConfig === 'reset') {\n      // when we're resetting, reset all linked axes too, so we get back\n      // to the fully-auto-with-constraints situation\n      if (xActive || links.isSubplotConstrained) axList = axList.concat(links.xaxes);\n      if (yActive && !links.isSubplotConstrained) axList = axList.concat(links.yaxes);\n      if (links.isSubplotConstrained) {\n        if (!xActive) axList = axList.concat(xaxes);else if (!yActive) axList = axList.concat(yaxes);\n      }\n      for (i = 0; i < axList.length; i++) {\n        ax = axList[i];\n        if (!ax.fixedrange) {\n          var axName = ax._name;\n          var autorangeInitial = ax._autorangeInitial;\n          if (ax._rangeInitial0 === undefined && ax._rangeInitial1 === undefined) {\n            attrs[axName + '.autorange'] = true;\n          } else if (ax._rangeInitial0 === undefined) {\n            attrs[axName + '.autorange'] = autorangeInitial;\n            attrs[axName + '.range'] = [null, ax._rangeInitial1];\n          } else if (ax._rangeInitial1 === undefined) {\n            attrs[axName + '.range'] = [ax._rangeInitial0, null];\n            attrs[axName + '.autorange'] = autorangeInitial;\n          } else {\n            attrs[axName + '.range'] = [ax._rangeInitial0, ax._rangeInitial1];\n          }\n        }\n      }\n    }\n    gd.emit('plotly_doubleclick', null);\n    Registry.call('_guiRelayout', gd, attrs);\n  }\n\n  // dragTail - finish a drag event with a redraw\n  function dragTail() {\n    // put the subplot viewboxes back to default (Because we're going to)\n    // be repositioning the data in the relayout. But DON'T call\n    // ticksAndAnnotations again - it's unnecessary and would overwrite `updates`\n    updateSubplots([0, 0, pw, ph]);\n\n    // since we may have been redrawing some things during the drag, we may have\n    // accumulated MathJax promises - wait for them before we relayout.\n    Lib.syncOrAsync([Plots.previousPromises, function () {\n      gd._fullLayout._replotting = false;\n      Registry.call('_guiRelayout', gd, updates);\n    }], gd);\n  }\n\n  // updateSubplots - find all plot viewboxes that should be\n  // affected by this drag, and update them. look for all plots\n  // sharing an affected axis (including the one being dragged),\n  // includes also scattergl and splom logic.\n  function updateSubplots(viewBox) {\n    var fullLayout = gd._fullLayout;\n    var plotinfos = fullLayout._plots;\n    var subplots = fullLayout._subplots.cartesian;\n    var i, sp, xa, ya;\n    if (hasSplom) {\n      Registry.subplotsRegistry.splom.drag(gd);\n    }\n    if (hasScatterGl) {\n      for (i = 0; i < subplots.length; i++) {\n        sp = plotinfos[subplots[i]];\n        xa = sp.xaxis;\n        ya = sp.yaxis;\n        if (sp._scene) {\n          if (xa.limitRange) xa.limitRange();\n          if (ya.limitRange) ya.limitRange();\n          var xrng = Lib.simpleMap(xa.range, xa.r2l);\n          var yrng = Lib.simpleMap(ya.range, ya.r2l);\n          sp._scene.update({\n            range: [xrng[0], yrng[0], xrng[1], yrng[1]]\n          });\n        }\n      }\n    }\n    if (hasSplom || hasScatterGl) {\n      clearGlCanvases(gd);\n      redrawReglTraces(gd);\n    }\n    if (hasSVG) {\n      var xScaleFactor = viewBox[2] / xa0._length;\n      var yScaleFactor = viewBox[3] / ya0._length;\n      for (i = 0; i < subplots.length; i++) {\n        sp = plotinfos[subplots[i]];\n        xa = sp.xaxis;\n        ya = sp.yaxis;\n        var editX2 = (editX || matches.isSubplotConstrained) && !xa.fixedrange && xaHash[xa._id];\n        var editY2 = (editY || matches.isSubplotConstrained) && !ya.fixedrange && yaHash[ya._id];\n        var xScaleFactor2, yScaleFactor2;\n        var clipDx, clipDy;\n        if (editX2) {\n          xScaleFactor2 = xScaleFactor;\n          clipDx = ew || matches.isSubplotConstrained ? viewBox[0] : getShift(xa, xScaleFactor2);\n        } else if (matches.xaHash[xa._id]) {\n          xScaleFactor2 = xScaleFactor;\n          clipDx = viewBox[0] * xa._length / xa0._length;\n        } else if (matches.yaHash[xa._id]) {\n          xScaleFactor2 = yScaleFactor;\n          clipDx = yActive === 'ns' ? -viewBox[1] * xa._length / ya0._length : getShift(xa, xScaleFactor2, {\n            n: 'top',\n            s: 'bottom'\n          }[yActive]);\n        } else {\n          xScaleFactor2 = getLinkedScaleFactor(xa, xScaleFactor, yScaleFactor);\n          clipDx = scaleAndGetShift(xa, xScaleFactor2);\n        }\n        if (xScaleFactor2 > 1 && (xa.maxallowed !== undefined && editX === (xa.range[0] < xa.range[1] ? 'e' : 'w') || xa.minallowed !== undefined && editX === (xa.range[0] < xa.range[1] ? 'w' : 'e'))) {\n          xScaleFactor2 = 1;\n          clipDx = 0;\n        }\n        if (editY2) {\n          yScaleFactor2 = yScaleFactor;\n          clipDy = ns || matches.isSubplotConstrained ? viewBox[1] : getShift(ya, yScaleFactor2);\n        } else if (matches.yaHash[ya._id]) {\n          yScaleFactor2 = yScaleFactor;\n          clipDy = viewBox[1] * ya._length / ya0._length;\n        } else if (matches.xaHash[ya._id]) {\n          yScaleFactor2 = xScaleFactor;\n          clipDy = xActive === 'ew' ? -viewBox[0] * ya._length / xa0._length : getShift(ya, yScaleFactor2, {\n            e: 'right',\n            w: 'left'\n          }[xActive]);\n        } else {\n          yScaleFactor2 = getLinkedScaleFactor(ya, xScaleFactor, yScaleFactor);\n          clipDy = scaleAndGetShift(ya, yScaleFactor2);\n        }\n        if (yScaleFactor2 > 1 && (ya.maxallowed !== undefined && editY === (ya.range[0] < ya.range[1] ? 'n' : 's') || ya.minallowed !== undefined && editY === (ya.range[0] < ya.range[1] ? 's' : 'n'))) {\n          yScaleFactor2 = 1;\n          clipDy = 0;\n        }\n\n        // don't scale at all if neither axis is scalable here\n        if (!xScaleFactor2 && !yScaleFactor2) {\n          continue;\n        }\n\n        // but if only one is, reset the other axis scaling\n        if (!xScaleFactor2) xScaleFactor2 = 1;\n        if (!yScaleFactor2) yScaleFactor2 = 1;\n        var plotDx = xa._offset - clipDx / xScaleFactor2;\n        var plotDy = ya._offset - clipDy / yScaleFactor2;\n\n        // TODO could be more efficient here:\n        // setTranslate and setScale do a lot of extra work\n        // when working independently, should perhaps combine\n        // them into a single routine.\n        sp.clipRect.call(Drawing.setTranslate, clipDx, clipDy).call(Drawing.setScale, xScaleFactor2, yScaleFactor2);\n        sp.plot.call(Drawing.setTranslate, plotDx, plotDy).call(Drawing.setScale, 1 / xScaleFactor2, 1 / yScaleFactor2);\n\n        // apply an inverse scale to individual points to counteract\n        // the scale of the trace group.\n        // apply only when scale changes, as adjusting the scale of\n        // all the points can be expansive.\n        if (xScaleFactor2 !== sp.xScaleFactor || yScaleFactor2 !== sp.yScaleFactor) {\n          Drawing.setPointGroupScale(sp.zoomScalePts, xScaleFactor2, yScaleFactor2);\n          Drawing.setTextPointsScale(sp.zoomScaleTxt, xScaleFactor2, yScaleFactor2);\n        }\n        Drawing.hideOutsideRangePoints(sp.clipOnAxisFalseTraces, sp);\n\n        // update x/y scaleFactor stash\n        sp.xScaleFactor = xScaleFactor2;\n        sp.yScaleFactor = yScaleFactor2;\n      }\n    }\n  }\n\n  // Find the appropriate scaling for this axis, if it's linked to the\n  // dragged axes by constraints. 0 is special, it means this axis shouldn't\n  // ever be scaled (will be converted to 1 if the other axis is scaled)\n  function getLinkedScaleFactor(ax, xScaleFactor, yScaleFactor) {\n    if (ax.fixedrange) return 0;\n    if (editX && links.xaHash[ax._id]) {\n      return xScaleFactor;\n    }\n    if (editY && (links.isSubplotConstrained ? links.xaHash : links.yaHash)[ax._id]) {\n      return yScaleFactor;\n    }\n    return 0;\n  }\n  function scaleAndGetShift(ax, scaleFactor) {\n    if (scaleFactor) {\n      ax.range = ax._r.slice();\n      scaleZoom(ax, scaleFactor);\n      return getShift(ax, scaleFactor);\n    }\n    return 0;\n  }\n  function getShift(ax, scaleFactor, from) {\n    return ax._length * (1 - scaleFactor) * FROM_TL[from || ax.constraintoward || 'middle'];\n  }\n  return dragger;\n}\nfunction makeDragger(plotinfo, nodeName, dragClass, cursor) {\n  var dragger3 = Lib.ensureSingle(plotinfo.draglayer, nodeName, dragClass, function (s) {\n    s.classed('drag', true).style({\n      fill: 'transparent',\n      'stroke-width': 0\n    }).attr('data-subplot', plotinfo.id);\n  });\n  dragger3.call(setCursor, cursor);\n  return dragger3.node();\n}\nfunction makeRectDragger(plotinfo, dragClass, cursor, x, y, w, h) {\n  var dragger = makeDragger(plotinfo, 'rect', dragClass, cursor);\n  d3.select(dragger).call(Drawing.setRect, x, y, w, h);\n  return dragger;\n}\nfunction isDirectionActive(axList, activeVal) {\n  for (var i = 0; i < axList.length; i++) {\n    if (!axList[i].fixedrange) return activeVal;\n  }\n  return '';\n}\nfunction getEndText(ax, end) {\n  var initialVal = ax.range[end];\n  var diff = Math.abs(initialVal - ax.range[1 - end]);\n  var dig;\n\n  // TODO: this should basically be ax.r2d but we're doing extra\n  // rounding here... can we clean up at all?\n  if (ax.type === 'date') {\n    return initialVal;\n  } else if (ax.type === 'log') {\n    dig = Math.ceil(Math.max(0, -Math.log(diff) / Math.LN10)) + 3;\n    return numberFormat('.' + dig + 'g')(Math.pow(10, initialVal));\n  } else {\n    // linear numeric (or category... but just show numbers here)\n    dig = Math.floor(Math.log(Math.abs(initialVal)) / Math.LN10) - Math.floor(Math.log(diff) / Math.LN10) + 4;\n    return numberFormat('.' + String(dig) + 'g')(initialVal);\n  }\n}\nfunction zoomAxRanges(axList, r0Fraction, r1Fraction, updates, linkedAxes) {\n  for (var i = 0; i < axList.length; i++) {\n    var axi = axList[i];\n    if (axi.fixedrange) continue;\n    if (axi.rangebreaks) {\n      var isY = axi._id.charAt(0) === 'y';\n      var r0F = isY ? 1 - r0Fraction : r0Fraction;\n      var r1F = isY ? 1 - r1Fraction : r1Fraction;\n      updates[axi._name + '.range[0]'] = axi.l2r(axi.p2l(r0F * axi._length));\n      updates[axi._name + '.range[1]'] = axi.l2r(axi.p2l(r1F * axi._length));\n    } else {\n      var axRangeLinear0 = axi._rl[0];\n      var axRangeLinearSpan = axi._rl[1] - axRangeLinear0;\n      updates[axi._name + '.range[0]'] = axi.l2r(axRangeLinear0 + axRangeLinearSpan * r0Fraction);\n      updates[axi._name + '.range[1]'] = axi.l2r(axRangeLinear0 + axRangeLinearSpan * r1Fraction);\n    }\n  }\n\n  // zoom linked axes about their centers\n  if (linkedAxes && linkedAxes.length) {\n    var linkedR0Fraction = (r0Fraction + (1 - r1Fraction)) / 2;\n    zoomAxRanges(linkedAxes, linkedR0Fraction, 1 - linkedR0Fraction, updates, []);\n  }\n}\nfunction dragAxList(axList, pix) {\n  for (var i = 0; i < axList.length; i++) {\n    var axi = axList[i];\n    if (!axi.fixedrange) {\n      if (axi.rangebreaks) {\n        var p0 = 0;\n        var p1 = axi._length;\n        var d0 = axi.p2l(p0 + pix) - axi.p2l(p0);\n        var d1 = axi.p2l(p1 + pix) - axi.p2l(p1);\n        var delta = (d0 + d1) / 2;\n        axi.range = [axi.l2r(axi._rl[0] - delta), axi.l2r(axi._rl[1] - delta)];\n      } else {\n        axi.range = [axi.l2r(axi._rl[0] - pix / axi._m), axi.l2r(axi._rl[1] - pix / axi._m)];\n      }\n      if (axi.limitRange) axi.limitRange();\n    }\n  }\n}\n\n// common transform for dragging one end of an axis\n// d>0 is compressing scale (cursor is over the plot,\n//  the axis end should move with the cursor)\n// d<0 is expanding (cursor is off the plot, axis end moves\n//  nonlinearly so you can expand far)\nfunction dZoom(d) {\n  return 1 - (d >= 0 ? Math.min(d, 0.9) : 1 / (1 / Math.max(d, -0.3) + 3.222));\n}\nfunction getDragCursor(nsew, dragmode, isMainDrag) {\n  if (!nsew) return 'pointer';\n  if (nsew === 'nsew') {\n    // in this case here, clear cursor and\n    // use the cursor style set on <g .draglayer>\n    if (isMainDrag) return '';\n    if (dragmode === 'pan') return 'move';\n    return 'crosshair';\n  }\n  return nsew.toLowerCase() + '-resize';\n}\nfunction makeZoombox(zoomlayer, lum, xs, ys, path0) {\n  return zoomlayer.append('path').attr('class', 'zoombox').style({\n    fill: lum > 0.2 ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0)',\n    'stroke-width': 0\n  }).attr('transform', strTranslate(xs, ys)).attr('d', path0 + 'Z');\n}\nfunction makeCorners(zoomlayer, xs, ys) {\n  return zoomlayer.append('path').attr('class', 'zoombox-corners').style({\n    fill: Color.background,\n    stroke: Color.defaultLine,\n    'stroke-width': 1,\n    opacity: 0\n  }).attr('transform', strTranslate(xs, ys)).attr('d', 'M0,0Z');\n}\nfunction updateZoombox(zb, corners, box, path0, dimmed, lum) {\n  zb.attr('d', path0 + 'M' + box.l + ',' + box.t + 'v' + box.h + 'h' + box.w + 'v-' + box.h + 'h-' + box.w + 'Z');\n  transitionZoombox(zb, corners, dimmed, lum);\n}\nfunction transitionZoombox(zb, corners, dimmed, lum) {\n  if (!dimmed) {\n    zb.transition().style('fill', lum > 0.2 ? 'rgba(0,0,0,0.4)' : 'rgba(255,255,255,0.3)').duration(200);\n    corners.transition().style('opacity', 1).duration(200);\n  }\n}\nfunction removeZoombox(gd) {\n  d3.select(gd).selectAll('.zoombox,.js-zoombox-backdrop,.js-zoombox-menu,.zoombox-corners').remove();\n}\nfunction showDoubleClickNotifier(gd) {\n  if (SHOWZOOMOUTTIP && gd.data && gd._context.showTips) {\n    Lib.notifier(Lib._(gd, 'Double-click to zoom back out'), 'long');\n    SHOWZOOMOUTTIP = false;\n  }\n}\nfunction xCorners(box, y0) {\n  return 'M' + (box.l - 0.5) + ',' + (y0 - MINZOOM - 0.5) + 'h-3v' + (2 * MINZOOM + 1) + 'h3ZM' + (box.r + 0.5) + ',' + (y0 - MINZOOM - 0.5) + 'h3v' + (2 * MINZOOM + 1) + 'h-3Z';\n}\nfunction yCorners(box, x0) {\n  return 'M' + (x0 - MINZOOM - 0.5) + ',' + (box.t - 0.5) + 'v-3h' + (2 * MINZOOM + 1) + 'v3ZM' + (x0 - MINZOOM - 0.5) + ',' + (box.b + 0.5) + 'v3h' + (2 * MINZOOM + 1) + 'v-3Z';\n}\nfunction xyCorners(box) {\n  var clen = Math.floor(Math.min(box.b - box.t, box.r - box.l, MINZOOM) / 2);\n  return 'M' + (box.l - 3.5) + ',' + (box.t - 0.5 + clen) + 'h3v' + -clen + 'h' + clen + 'v-3h-' + (clen + 3) + 'ZM' + (box.r + 3.5) + ',' + (box.t - 0.5 + clen) + 'h-3v' + -clen + 'h' + -clen + 'v-3h' + (clen + 3) + 'ZM' + (box.r + 3.5) + ',' + (box.b + 0.5 - clen) + 'h-3v' + clen + 'h' + -clen + 'v3h' + (clen + 3) + 'ZM' + (box.l - 3.5) + ',' + (box.b + 0.5 - clen) + 'h3v' + clen + 'h' + clen + 'v3h-' + (clen + 3) + 'Z';\n}\nfunction calcLinks(gd, groups, xaHash, yaHash, exclude) {\n  var isSubplotConstrained = false;\n  var xLinks = {};\n  var yLinks = {};\n  var xID, yID, xLinkID, yLinkID;\n  var xExclude = (exclude || {}).xaHash;\n  var yExclude = (exclude || {}).yaHash;\n  for (var i = 0; i < groups.length; i++) {\n    var group = groups[i];\n    // check if any of the x axes we're dragging is in this constraint group\n    for (xID in xaHash) {\n      if (group[xID]) {\n        // put the rest of these axes into xLinks, if we're not already\n        // dragging them, so we know to scale these axes automatically too\n        // to match the changes in the dragged x axes\n        for (xLinkID in group) {\n          if (!(exclude && (xExclude[xLinkID] || yExclude[xLinkID])) && !(xLinkID.charAt(0) === 'x' ? xaHash : yaHash)[xLinkID]) {\n            xLinks[xLinkID] = xID;\n          }\n        }\n\n        // check if the x and y axes of THIS drag are linked\n        for (yID in yaHash) {\n          if (!(exclude && (xExclude[yID] || yExclude[yID])) && group[yID]) {\n            isSubplotConstrained = true;\n          }\n        }\n      }\n    }\n\n    // now check if any of the y axes we're dragging is in this constraint group\n    // only look for outside links, as we've already checked for links within the dragger\n    for (yID in yaHash) {\n      if (group[yID]) {\n        for (yLinkID in group) {\n          if (!(exclude && (xExclude[yLinkID] || yExclude[yLinkID])) && !(yLinkID.charAt(0) === 'x' ? xaHash : yaHash)[yLinkID]) {\n            yLinks[yLinkID] = yID;\n          }\n        }\n      }\n    }\n  }\n  if (isSubplotConstrained) {\n    // merge xLinks and yLinks if the subplot is constrained,\n    // since we'll always apply both anyway and the two will contain\n    // duplicates\n    Lib.extendFlat(xLinks, yLinks);\n    yLinks = {};\n  }\n  var xaHashLinked = {};\n  var xaxesLinked = [];\n  for (xLinkID in xLinks) {\n    var xa = getFromId(gd, xLinkID);\n    xaxesLinked.push(xa);\n    xaHashLinked[xa._id] = xa;\n  }\n  var yaHashLinked = {};\n  var yaxesLinked = [];\n  for (yLinkID in yLinks) {\n    var ya = getFromId(gd, yLinkID);\n    yaxesLinked.push(ya);\n    yaHashLinked[ya._id] = ya;\n  }\n  return {\n    xaHash: xaHashLinked,\n    yaHash: yaHashLinked,\n    xaxes: xaxesLinked,\n    yaxes: yaxesLinked,\n    xLinks: xLinks,\n    yLinks: yLinks,\n    isSubplotConstrained: isSubplotConstrained\n  };\n}\n\n// still seems to be some confusion about onwheel vs onmousewheel...\nfunction attachWheelEventHandler(element, handler) {\n  if (!supportsPassive) {\n    if (element.onwheel !== undefined) element.onwheel = handler;else if (element.onmousewheel !== undefined) element.onmousewheel = handler;else if (!element.isAddedWheelEvent) {\n      element.isAddedWheelEvent = true;\n      element.addEventListener('wheel', handler, {\n        passive: false\n      });\n    }\n  } else {\n    var wheelEventName = element.onwheel !== undefined ? 'wheel' : 'mousewheel';\n    if (element._onwheel) {\n      element.removeEventListener(wheelEventName, element._onwheel);\n    }\n    element._onwheel = handler;\n    element.addEventListener(wheelEventName, handler, {\n      passive: false\n    });\n  }\n}\nfunction hashValues(hash) {\n  var out = [];\n  for (var k in hash) out.push(hash[k]);\n  return out;\n}\nmodule.exports = {\n  makeDragBox: makeDragBox,\n  makeDragger: makeDragger,\n  makeRectDragger: makeRectDragger,\n  makeZoombox: makeZoombox,\n  makeCorners: makeCorners,\n  updateZoombox: updateZoombox,\n  xyCorners: xyCorners,\n  transitionZoombox: transitionZoombox,\n  removeZoombox: removeZoombox,\n  showDoubleClickNotifier: showDoubleClickNotifier,\n  attachWheelEventHandler: attachWheelEventHandler\n};","map":{"version":3,"names":["d3","require","Lib","numberFormat","tinycolor","supportsPassive","Registry","strTranslate","svgTextUtils","Color","Drawing","Fx","Axes","setCursor","dragElement","helpers","selectingOrDrawing","freeMode","FROM_TL","clearGlCanvases","redrawReglTraces","Plots","getFromId","prepSelect","clearOutline","selectOnClick","scaleZoom","constants","MINDRAG","MINZOOM","SHOWZOOMOUTTIP","makeDragBox","gd","plotinfo","x","y","w","h","ns","ew","zoomlayer","_fullLayout","_zoomlayer","isMainDrag","singleEnd","length","xa0","ya0","xaHash","yaHash","xaxes","yaxes","xs","ys","pw","ph","links","matches","xActive","yActive","allFixedRanges","editX","editY","hasScatterGl","hasSplom","hasSVG","updates","scaleX","scaleY","yaxis","_shift","recomputeAxisLists","xaxis","_length","_offset","_id","overlays","i","xa","ya","hashValues","isDirectionActive","calcLinks","_axisMatchGroups","_axisConstraintGroups","spConstrained","isSubplotConstrained","fullLayout","_has","cursor","getDragCursor","dragmode","dragger","makeRectDragger","onmousedown","style","pointerEvents","dragOptions","element","prepFn","e","startX","startY","dragModePrev","dragModeNow","_invScaleX","_invScaleY","shiftKey","ctrlKey","minDrag","undefined","clickFn","clearAndResetSelect","moveFn","zoomMove","doneFn","zoomDone","zoomPrep","plotDrag","dragTail","_redrag","dragDataNow","_dragdata","updateSubplots","dx","dy","selection","numClicks","evt","_activeShapeIndex","_deactivateShape","clickmode","removeZoombox","doubleClick","indexOf","id","click","ax","end","attrStr","_name","initialText","getEndText","hAlign","vAlign","fixedrange","side","_context","showAxisRangeEntryBoxes","select","call","makeEditable","immediate","background","paper_bgcolor","text","String","fill","tickfont","color","horizontalAlign","verticalAlign","on","v","d2r","init","x0","y0","box","lum","path0","dimmed","zoomMode","zb","corners","zoomDragged","dragBBox","getBoundingClientRect","left","top","_calcInverseTransform","transformedCoords","apply3DTransform","_invTransform","l","r","t","b","_hmpixcount","_hmlumcount","plot_bgcolor","getLuminance","makeZoombox","makeCorners","dx0","dy0","_transitioningWithDuration","x1","Math","max","min","y1","abs","noZoom","attr","xyCorners","r0","r1","xCorners","yCorners","_dragged","updateZoombox","computeZoomUpdates","emit","zoomAxRanges","updateMatchedAxRange","showDoubleClickNotifier","scrollViewBox","redrawTimer","REDRAWDELAY","mainplot","_plots","zoomWheel","_scrollZoom","cartesian","_enablescrollzoom","preventDefault","stopPropagation","clearTimeout","wheelDelta","deltaY","isFinite","log","zoom","exp","gbb","draglayer","node","xfrac","clientX","width","yfrac","bottom","clientY","height","zoomWheelOneAxis","centerFraction","axRange","simpleMap","range","r2l","v0","doZoom","l2r","map","ticksAndAnnotations","setTimeout","attachWheelEventHandler","_replotting","spDx","spDy","frac","dragAxList","dz","axArray","d","otherEnd","movedAx","newLinearizedEnd","axi","_rl","dZoom","newEnd","dxySign","dxyFraction","xStart","yStart","_r","slice","xSize","ySize","axLetter","out","matchedAxes","constrainedAxes","axId","axId2","xLinks","yLinks","ax2","activeAxIds","pushActiveAxIds","axList","push","pushActiveAxIdsSynced","axisType","axListI","axListIType","tickmode","drawOne","skipTitle","redrawComponents","doubleClickConfig","concat","attrs","_rangeInitial0","_rangeInitial1","hasRangeInitial","autorange","axName","autorangeInitial","_autorangeInitial","syncOrAsync","previousPromises","viewBox","plotinfos","subplots","_subplots","sp","subplotsRegistry","splom","drag","_scene","limitRange","xrng","yrng","update","xScaleFactor","yScaleFactor","editX2","editY2","xScaleFactor2","yScaleFactor2","clipDx","clipDy","getShift","n","s","getLinkedScaleFactor","scaleAndGetShift","maxallowed","minallowed","plotDx","plotDy","clipRect","setTranslate","setScale","plot","setPointGroupScale","zoomScalePts","setTextPointsScale","zoomScaleTxt","hideOutsideRangePoints","clipOnAxisFalseTraces","scaleFactor","from","constraintoward","makeDragger","nodeName","dragClass","dragger3","ensureSingle","classed","setRect","activeVal","initialVal","diff","dig","type","ceil","LN10","pow","floor","r0Fraction","r1Fraction","linkedAxes","rangebreaks","isY","charAt","r0F","r1F","p2l","axRangeLinear0","axRangeLinearSpan","linkedR0Fraction","pix","p0","p1","d0","d1","delta","_m","nsew","toLowerCase","append","stroke","defaultLine","opacity","transitionZoombox","transition","duration","selectAll","remove","data","showTips","notifier","_","clen","groups","exclude","xID","yID","xLinkID","yLinkID","xExclude","yExclude","group","extendFlat","xaHashLinked","xaxesLinked","yaHashLinked","yaxesLinked","handler","onwheel","onmousewheel","isAddedWheelEvent","addEventListener","passive","wheelEventName","_onwheel","removeEventListener","hash","k","module","exports"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/plots/cartesian/dragbox.js"],"sourcesContent":["'use strict';\n\nvar d3 = require('@plotly/d3');\nvar Lib = require('../../lib');\nvar numberFormat = Lib.numberFormat;\nvar tinycolor = require('tinycolor2');\nvar supportsPassive = require('has-passive-events');\n\nvar Registry = require('../../registry');\nvar strTranslate = Lib.strTranslate;\nvar svgTextUtils = require('../../lib/svg_text_utils');\nvar Color = require('../../components/color');\nvar Drawing = require('../../components/drawing');\nvar Fx = require('../../components/fx');\nvar Axes = require('./axes');\nvar setCursor = require('../../lib/setcursor');\nvar dragElement = require('../../components/dragelement');\nvar helpers = require('../../components/dragelement/helpers');\nvar selectingOrDrawing = helpers.selectingOrDrawing;\nvar freeMode = helpers.freeMode;\n\nvar FROM_TL = require('../../constants/alignment').FROM_TL;\nvar clearGlCanvases = require('../../lib/clear_gl_canvases');\nvar redrawReglTraces = require('../../plot_api/subroutines').redrawReglTraces;\n\nvar Plots = require('../plots');\n\nvar getFromId = require('./axis_ids').getFromId;\nvar prepSelect = require('../../components/selections').prepSelect;\nvar clearOutline = require('../../components/selections').clearOutline;\nvar selectOnClick = require('../../components/selections').selectOnClick;\nvar scaleZoom = require('./scale_zoom');\n\nvar constants = require('./constants');\nvar MINDRAG = constants.MINDRAG;\nvar MINZOOM = constants.MINZOOM;\n\n// flag for showing \"doubleclick to zoom out\" only at the beginning\nvar SHOWZOOMOUTTIP = true;\n\n// dragBox: create an element to drag one or more axis ends\n// inputs:\n//      plotinfo - which subplot are we making dragboxes on?\n//      x,y,w,h - left, top, width, height of the box\n//      ns - how does this drag the vertical axis?\n//          'n' - top only\n//          's' - bottom only\n//          'ns' - top and bottom together, difference unchanged\n//      ew - same for horizontal axis\nfunction makeDragBox(gd, plotinfo, x, y, w, h, ns, ew) {\n    // mouseDown stores ms of first mousedown event in the last\n    // `gd._context.doubleClickDelay` ms on the drag bars\n    // numClicks stores how many mousedowns have been seen\n    // within `gd._context.doubleClickDelay` so we can check for click or doubleclick events\n    // dragged stores whether a drag has occurred, so we don't have to\n    // redraw unnecessarily, ie if no move bigger than MINDRAG or MINZOOM px\n    var zoomlayer = gd._fullLayout._zoomlayer;\n    var isMainDrag = (ns + ew === 'nsew');\n    var singleEnd = (ns + ew).length === 1;\n\n    // main subplot x and y (i.e. found in plotinfo - the main ones)\n    var xa0, ya0;\n    // {ax._id: ax} hash objects\n    var xaHash, yaHash;\n    // xaHash/yaHash values (arrays)\n    var xaxes, yaxes;\n    // main axis offsets\n    var xs, ys;\n    // main axis lengths\n    var pw, ph;\n    // contains keys 'xaHash', 'yaHash', 'xaxes', and 'yaxes'\n    // which are the x/y {ax._id: ax} hash objects and their values\n    // for linked axis relative to this subplot\n    var links;\n    // similar to `links` but for matching axes\n    var matches;\n    // set to ew/ns val when active, set to '' when inactive\n    var xActive, yActive;\n    // are all axes in this subplot are fixed?\n    var allFixedRanges;\n    // do we need to edit x/y ranges?\n    var editX, editY;\n    // graph-wide optimization flags\n    var hasScatterGl, hasSplom, hasSVG;\n    // collected changes to be made to the plot by relayout at the end\n    var updates;\n    // scaling factors from css transform\n    var scaleX;\n    var scaleY;\n\n    // offset the x location of the box if needed\n    x += plotinfo.yaxis._shift;\n\n    function recomputeAxisLists() {\n        xa0 = plotinfo.xaxis;\n        ya0 = plotinfo.yaxis;\n        pw = xa0._length;\n        ph = ya0._length;\n        xs = xa0._offset;\n        ys = ya0._offset;\n\n        xaHash = {};\n        xaHash[xa0._id] = xa0;\n        yaHash = {};\n        yaHash[ya0._id] = ya0;\n\n        // if we're dragging two axes at once, also drag overlays\n        if(ns && ew) {\n            var overlays = plotinfo.overlays;\n            for(var i = 0; i < overlays.length; i++) {\n                var xa = overlays[i].xaxis;\n                xaHash[xa._id] = xa;\n                var ya = overlays[i].yaxis;\n                yaHash[ya._id] = ya;\n            }\n        }\n\n        xaxes = hashValues(xaHash);\n        yaxes = hashValues(yaHash);\n        xActive = isDirectionActive(xaxes, ew);\n        yActive = isDirectionActive(yaxes, ns);\n        allFixedRanges = !yActive && !xActive;\n\n        matches = calcLinks(gd, gd._fullLayout._axisMatchGroups, xaHash, yaHash);\n        links = calcLinks(gd, gd._fullLayout._axisConstraintGroups, xaHash, yaHash, matches);\n        var spConstrained = links.isSubplotConstrained || matches.isSubplotConstrained;\n        editX = ew || spConstrained;\n        editY = ns || spConstrained;\n\n        var fullLayout = gd._fullLayout;\n        hasScatterGl = fullLayout._has('scattergl');\n        hasSplom = fullLayout._has('splom');\n        hasSVG = fullLayout._has('svg');\n    }\n\n    recomputeAxisLists();\n\n    var cursor = getDragCursor(yActive + xActive, gd._fullLayout.dragmode, isMainDrag);\n    var dragger = makeRectDragger(plotinfo, ns + ew + 'drag', cursor, x, y, w, h);\n\n    // still need to make the element if the axes are disabled\n    // but nuke its events (except for maindrag which needs them for hover)\n    // and stop there\n    if(allFixedRanges && !isMainDrag) {\n        dragger.onmousedown = null;\n        dragger.style.pointerEvents = 'none';\n        return dragger;\n    }\n\n    var dragOptions = {\n        element: dragger,\n        gd: gd,\n        plotinfo: plotinfo\n    };\n\n    dragOptions.prepFn = function(e, startX, startY) {\n        var dragModePrev = dragOptions.dragmode;\n        var dragModeNow = gd._fullLayout.dragmode;\n        if(dragModeNow !== dragModePrev) {\n            dragOptions.dragmode = dragModeNow;\n        }\n\n        recomputeAxisLists();\n\n        scaleX = gd._fullLayout._invScaleX;\n        scaleY = gd._fullLayout._invScaleY;\n\n        if(!allFixedRanges) {\n            if(isMainDrag) {\n                // main dragger handles all drag modes, and changes\n                // to pan (or to zoom if it already is pan) on shift\n                if(e.shiftKey) {\n                    if(dragModeNow === 'pan') dragModeNow = 'zoom';\n                    else if(!selectingOrDrawing(dragModeNow)) dragModeNow = 'pan';\n                } else if(e.ctrlKey) {\n                    dragModeNow = 'pan';\n                }\n            } else {\n                // all other draggers just pan\n                dragModeNow = 'pan';\n            }\n        }\n\n        if(freeMode(dragModeNow)) dragOptions.minDrag = 1;\n        else dragOptions.minDrag = undefined;\n\n        if(selectingOrDrawing(dragModeNow)) {\n            dragOptions.xaxes = xaxes;\n            dragOptions.yaxes = yaxes;\n            // this attaches moveFn, clickFn, doneFn on dragOptions\n            prepSelect(e, startX, startY, dragOptions, dragModeNow);\n        } else {\n            dragOptions.clickFn = clickFn;\n            if(selectingOrDrawing(dragModePrev)) {\n                // TODO Fix potential bug\n                // Note: clearing / resetting selection state only happens, when user\n                // triggers at least one interaction in pan/zoom mode. Otherwise, the\n                // select/lasso outlines are deleted (in plots.js.cleanPlot) but the selection\n                // cache isn't cleared. So when the user switches back to select/lasso and\n                // 'adds to a selection' with Shift, the \"old\", seemingly removed outlines\n                // are redrawn again because the selection cache still holds their coordinates.\n                // However, this isn't easily solved, since plots.js would need\n                // to have a reference to the dragOptions object (which holds the\n                // selection cache).\n                clearAndResetSelect();\n            }\n\n            if(!allFixedRanges) {\n                if(dragModeNow === 'zoom') {\n                    dragOptions.moveFn = zoomMove;\n                    dragOptions.doneFn = zoomDone;\n\n                    // zoomMove takes care of the threshold, but we need to\n                    // minimize this so that constrained zoom boxes will flip\n                    // orientation at the right place\n                    dragOptions.minDrag = 1;\n\n                    zoomPrep(e, startX, startY);\n                } else if(dragModeNow === 'pan') {\n                    dragOptions.moveFn = plotDrag;\n                    dragOptions.doneFn = dragTail;\n                }\n            }\n        }\n\n        gd._fullLayout._redrag = function() {\n            var dragDataNow = gd._dragdata;\n\n            if(dragDataNow && dragDataNow.element === dragger) {\n                var dragModeNow = gd._fullLayout.dragmode;\n\n                if(!selectingOrDrawing(dragModeNow)) {\n                    recomputeAxisLists();\n                    updateSubplots([0, 0, pw, ph]);\n                    dragOptions.moveFn(dragDataNow.dx, dragDataNow.dy);\n                }\n            }\n        };\n    };\n\n    function clearAndResetSelect() {\n        // clear selection polygon cache (if any)\n        dragOptions.plotinfo.selection = false;\n        // clear selection outlines\n        clearOutline(gd);\n    }\n\n    function clickFn(numClicks, evt) {\n        var gd = dragOptions.gd;\n        if(gd._fullLayout._activeShapeIndex >= 0) {\n            gd._fullLayout._deactivateShape(gd);\n            return;\n        }\n\n        var clickmode = gd._fullLayout.clickmode;\n\n        removeZoombox(gd);\n\n        if(numClicks === 2 && !singleEnd) doubleClick();\n\n        if(isMainDrag) {\n            if(clickmode.indexOf('select') > -1) {\n                selectOnClick(evt, gd, xaxes, yaxes, plotinfo.id, dragOptions);\n            }\n\n            if(clickmode.indexOf('event') > -1) {\n                Fx.click(gd, evt, plotinfo.id);\n            }\n        } else if(numClicks === 1 && singleEnd) {\n            var ax = ns ? ya0 : xa0;\n            var end = (ns === 's' || ew === 'w') ? 0 : 1;\n            var attrStr = ax._name + '.range[' + end + ']';\n            var initialText = getEndText(ax, end);\n            var hAlign = 'left';\n            var vAlign = 'middle';\n\n            if(ax.fixedrange) return;\n\n            if(ns) {\n                vAlign = (ns === 'n') ? 'top' : 'bottom';\n                if(ax.side === 'right') hAlign = 'right';\n            } else if(ew === 'e') hAlign = 'right';\n\n            if(gd._context.showAxisRangeEntryBoxes) {\n                d3.select(dragger)\n                    .call(svgTextUtils.makeEditable, {\n                        gd: gd,\n                        immediate: true,\n                        background: gd._fullLayout.paper_bgcolor,\n                        text: String(initialText),\n                        fill: ax.tickfont ? ax.tickfont.color : '#444',\n                        horizontalAlign: hAlign,\n                        verticalAlign: vAlign\n                    })\n                    .on('edit', function(text) {\n                        var v = ax.d2r(text);\n                        if(v !== undefined) {\n                            Registry.call('_guiRelayout', gd, attrStr, v);\n                        }\n                    });\n            }\n        }\n    }\n\n    dragElement.init(dragOptions);\n\n    // x/y px position at start of drag\n    var x0, y0;\n    // bbox object of the zoombox\n    var box;\n    // luminance of bg behind zoombox\n    var lum;\n    // zoombox path outline\n    var path0;\n    // is zoombox dimmed (during drag)\n    var dimmed;\n    // 'x'-only, 'y' or 'xy' zooming\n    var zoomMode;\n    // zoombox d3 selection\n    var zb;\n    // zoombox corner d3 selection\n    var corners;\n    // zoom takes over minDrag, so it also has to take over gd._dragged\n    var zoomDragged;\n\n    function zoomPrep(e, startX, startY) {\n        var dragBBox = dragger.getBoundingClientRect();\n        x0 = startX - dragBBox.left;\n        y0 = startY - dragBBox.top;\n\n        gd._fullLayout._calcInverseTransform(gd);\n        var transformedCoords = Lib.apply3DTransform(gd._fullLayout._invTransform)(x0, y0);\n        x0 = transformedCoords[0];\n        y0 = transformedCoords[1];\n\n        box = {l: x0, r: x0, w: 0, t: y0, b: y0, h: 0};\n        lum = gd._hmpixcount ?\n            (gd._hmlumcount / gd._hmpixcount) :\n            tinycolor(gd._fullLayout.plot_bgcolor).getLuminance();\n        path0 = 'M0,0H' + pw + 'V' + ph + 'H0V0';\n        dimmed = false;\n        zoomMode = 'xy';\n        zoomDragged = false;\n        zb = makeZoombox(zoomlayer, lum, xs, ys, path0);\n        corners = makeCorners(zoomlayer, xs, ys);\n    }\n\n    function zoomMove(dx0, dy0) {\n        if(gd._transitioningWithDuration) {\n            return false;\n        }\n\n        var x1 = Math.max(0, Math.min(pw, scaleX * dx0 + x0));\n        var y1 = Math.max(0, Math.min(ph, scaleY * dy0 + y0));\n        var dx = Math.abs(x1 - x0);\n        var dy = Math.abs(y1 - y0);\n\n        box.l = Math.min(x0, x1);\n        box.r = Math.max(x0, x1);\n        box.t = Math.min(y0, y1);\n        box.b = Math.max(y0, y1);\n\n        function noZoom() {\n            zoomMode = '';\n            box.r = box.l;\n            box.t = box.b;\n            corners.attr('d', 'M0,0Z');\n        }\n\n        if(links.isSubplotConstrained) {\n            if(dx > MINZOOM || dy > MINZOOM) {\n                zoomMode = 'xy';\n                if(dx / pw > dy / ph) {\n                    dy = dx * ph / pw;\n                    if(y0 > y1) box.t = y0 - dy;\n                    else box.b = y0 + dy;\n                } else {\n                    dx = dy * pw / ph;\n                    if(x0 > x1) box.l = x0 - dx;\n                    else box.r = x0 + dx;\n                }\n                corners.attr('d', xyCorners(box));\n            } else {\n                noZoom();\n            }\n        } else if(matches.isSubplotConstrained) {\n            if(dx > MINZOOM || dy > MINZOOM) {\n                zoomMode = 'xy';\n\n                var r0 = Math.min(box.l / pw, (ph - box.b) / ph);\n                var r1 = Math.max(box.r / pw, (ph - box.t) / ph);\n\n                box.l = r0 * pw;\n                box.r = r1 * pw;\n                box.b = (1 - r0) * ph;\n                box.t = (1 - r1) * ph;\n                corners.attr('d', xyCorners(box));\n            } else {\n                noZoom();\n            }\n        } else if(!yActive || dy < Math.min(Math.max(dx * 0.6, MINDRAG), MINZOOM)) {\n            // look for small drags in one direction or the other,\n            // and only drag the other axis\n\n            if(dx < MINDRAG || !xActive) {\n                noZoom();\n            } else {\n                box.t = 0;\n                box.b = ph;\n                zoomMode = 'x';\n                corners.attr('d', xCorners(box, y0));\n            }\n        } else if(!xActive || dx < Math.min(dy * 0.6, MINZOOM)) {\n            box.l = 0;\n            box.r = pw;\n            zoomMode = 'y';\n            corners.attr('d', yCorners(box, x0));\n        } else {\n            zoomMode = 'xy';\n            corners.attr('d', xyCorners(box));\n        }\n        box.w = box.r - box.l;\n        box.h = box.b - box.t;\n\n        if(zoomMode) zoomDragged = true;\n        gd._dragged = zoomDragged;\n\n        updateZoombox(zb, corners, box, path0, dimmed, lum);\n        computeZoomUpdates();\n        gd.emit('plotly_relayouting', updates);\n        dimmed = true;\n    }\n\n    function computeZoomUpdates() {\n        updates = {};\n\n        // TODO: edit linked axes in zoomAxRanges and in dragTail\n        if(zoomMode === 'xy' || zoomMode === 'x') {\n            zoomAxRanges(xaxes, box.l / pw, box.r / pw, updates, links.xaxes);\n            updateMatchedAxRange('x', updates);\n        }\n        if(zoomMode === 'xy' || zoomMode === 'y') {\n            zoomAxRanges(yaxes, (ph - box.b) / ph, (ph - box.t) / ph, updates, links.yaxes);\n            updateMatchedAxRange('y', updates);\n        }\n    }\n\n    function zoomDone() {\n        computeZoomUpdates();\n        removeZoombox(gd);\n        dragTail();\n        showDoubleClickNotifier(gd);\n    }\n\n    // scroll zoom, on all draggers except corners\n    var scrollViewBox = [0, 0, pw, ph];\n    // wait a little after scrolling before redrawing\n    var redrawTimer = null;\n    var REDRAWDELAY = constants.REDRAWDELAY;\n    var mainplot = plotinfo.mainplot ? gd._fullLayout._plots[plotinfo.mainplot] : plotinfo;\n\n    function zoomWheel(e) {\n        // deactivate mousewheel scrolling on embedded graphs\n        // devs can override this with layout._enablescrollzoom,\n        // but _ ensures this setting won't leave their page\n        if(!gd._context._scrollZoom.cartesian && !gd._fullLayout._enablescrollzoom) {\n            return;\n        }\n\n        clearAndResetSelect();\n\n        // If a transition is in progress, then disable any behavior:\n        if(gd._transitioningWithDuration) {\n            e.preventDefault();\n            e.stopPropagation();\n            return;\n        }\n\n        recomputeAxisLists();\n\n        clearTimeout(redrawTimer);\n\n        var wheelDelta = -e.deltaY;\n        if(!isFinite(wheelDelta)) wheelDelta = e.wheelDelta / 10;\n        if(!isFinite(wheelDelta)) {\n            Lib.log('Did not find wheel motion attributes: ', e);\n            return;\n        }\n\n        var zoom = Math.exp(-Math.min(Math.max(wheelDelta, -20), 20) / 200);\n        var gbb = mainplot.draglayer.select('.nsewdrag').node().getBoundingClientRect();\n        var xfrac = (e.clientX - gbb.left) / gbb.width;\n        var yfrac = (gbb.bottom - e.clientY) / gbb.height;\n        var i;\n\n        function zoomWheelOneAxis(ax, centerFraction, zoom) {\n            if(ax.fixedrange) return;\n\n            var axRange = Lib.simpleMap(ax.range, ax.r2l);\n            var v0 = axRange[0] + (axRange[1] - axRange[0]) * centerFraction;\n            function doZoom(v) { return ax.l2r(v0 + (v - v0) * zoom); }\n            ax.range = axRange.map(doZoom);\n        }\n\n        if(editX) {\n            // if we're only zooming this axis because of constraints,\n            // zoom it about the center\n            if(!ew) xfrac = 0.5;\n\n            for(i = 0; i < xaxes.length; i++) {\n                zoomWheelOneAxis(xaxes[i], xfrac, zoom);\n            }\n            updateMatchedAxRange('x');\n\n            scrollViewBox[2] *= zoom;\n            scrollViewBox[0] += scrollViewBox[2] * xfrac * (1 / zoom - 1);\n        }\n        if(editY) {\n            if(!ns) yfrac = 0.5;\n\n            for(i = 0; i < yaxes.length; i++) {\n                zoomWheelOneAxis(yaxes[i], yfrac, zoom);\n            }\n            updateMatchedAxRange('y');\n\n            scrollViewBox[3] *= zoom;\n            scrollViewBox[1] += scrollViewBox[3] * (1 - yfrac) * (1 / zoom - 1);\n        }\n\n        // viewbox redraw at first\n        updateSubplots(scrollViewBox);\n        ticksAndAnnotations();\n\n        gd.emit('plotly_relayouting', updates);\n\n        // then replot after a delay to make sure\n        // no more scrolling is coming\n        redrawTimer = setTimeout(function() {\n            if(!gd._fullLayout) return;\n            scrollViewBox = [0, 0, pw, ph];\n            dragTail();\n        }, REDRAWDELAY);\n\n        e.preventDefault();\n        return;\n    }\n\n    // everything but the corners gets wheel zoom\n    if(ns.length * ew.length !== 1) {\n        attachWheelEventHandler(dragger, zoomWheel);\n    }\n\n    // plotDrag: move the plot in response to a drag\n    function plotDrag(dx, dy) {\n        dx = dx * scaleX;\n        dy = dy * scaleY;\n        // If a transition is in progress, then disable any behavior:\n        if(gd._transitioningWithDuration) {\n            return;\n        }\n\n        // prevent axis drawing from monkeying with margins until we're done\n        gd._fullLayout._replotting = true;\n\n        if(xActive === 'ew' || yActive === 'ns') {\n            var spDx = xActive ? -dx : 0;\n            var spDy = yActive ? -dy : 0;\n\n            if(matches.isSubplotConstrained) {\n                if(xActive && yActive) {\n                    var frac = (dx / pw - dy / ph) / 2;\n                    dx = frac * pw;\n                    dy = -frac * ph;\n                    spDx = -dx;\n                    spDy = -dy;\n                }\n                if(yActive) {\n                    spDx = -spDy * pw / ph;\n                } else {\n                    spDy = -spDx * ph / pw;\n                }\n            }\n            if(xActive) {\n                dragAxList(xaxes, dx);\n                updateMatchedAxRange('x');\n            }\n            if(yActive) {\n                dragAxList(yaxes, dy);\n                updateMatchedAxRange('y');\n            }\n            updateSubplots([spDx, spDy, pw, ph]);\n            ticksAndAnnotations();\n            gd.emit('plotly_relayouting', updates);\n            return;\n        }\n\n        // dz: set a new value for one end (0 or 1) of an axis array axArray,\n        // and return a pixel shift for that end for the viewbox\n        // based on pixel drag distance d\n        // TODO: this makes (generally non-fatal) errors when you get\n        // near floating point limits\n        function dz(axArray, end, d) {\n            var otherEnd = 1 - end;\n            var movedAx;\n            var newLinearizedEnd;\n            for(var i = 0; i < axArray.length; i++) {\n                var axi = axArray[i];\n                if(axi.fixedrange) continue;\n                movedAx = axi;\n                newLinearizedEnd = axi._rl[otherEnd] +\n                    (axi._rl[end] - axi._rl[otherEnd]) / dZoom(d / axi._length);\n                var newEnd = axi.l2r(newLinearizedEnd);\n\n                // if l2r comes back false or undefined, it means we've dragged off\n                // the end of valid ranges - so stop.\n                if(newEnd !== false && newEnd !== undefined) axi.range[end] = newEnd;\n            }\n            return movedAx._length * (movedAx._rl[end] - newLinearizedEnd) /\n                (movedAx._rl[end] - movedAx._rl[otherEnd]);\n        }\n\n        var dxySign = ((xActive === 'w') === (yActive === 'n')) ? 1 : -1;\n        if(xActive && yActive && (links.isSubplotConstrained || matches.isSubplotConstrained)) {\n            // dragging a corner of a constrained subplot:\n            // respect the fixed corner, but harmonize dx and dy\n            var dxyFraction = (dx / pw + dxySign * dy / ph) / 2;\n            dx = dxyFraction * pw;\n            dy = dxySign * dxyFraction * ph;\n        }\n\n        var xStart, yStart;\n\n        if(xActive === 'w') dx = dz(xaxes, 0, dx);\n        else if(xActive === 'e') dx = dz(xaxes, 1, -dx);\n        else if(!xActive) dx = 0;\n\n        if(yActive === 'n') dy = dz(yaxes, 1, dy);\n        else if(yActive === 's') dy = dz(yaxes, 0, -dy);\n        else if(!yActive) dy = 0;\n\n        xStart = (xActive === 'w') ? dx : 0;\n        yStart = (yActive === 'n') ? dy : 0;\n\n        if(\n            (links.isSubplotConstrained && !matches.isSubplotConstrained) ||\n            // NW or SE on matching axes - create a symmetric zoom\n            (matches.isSubplotConstrained && xActive && yActive && dxySign > 0)\n        ) {\n            var i;\n            if(matches.isSubplotConstrained || (!xActive && yActive.length === 1)) {\n                // dragging one end of the y axis of a constrained subplot\n                // scale the other axis the same about its middle\n                for(i = 0; i < xaxes.length; i++) {\n                    xaxes[i].range = xaxes[i]._r.slice();\n                    scaleZoom(xaxes[i], 1 - dy / ph);\n                }\n                dx = dy * pw / ph;\n                xStart = dx / 2;\n            }\n            if(matches.isSubplotConstrained || (!yActive && xActive.length === 1)) {\n                for(i = 0; i < yaxes.length; i++) {\n                    yaxes[i].range = yaxes[i]._r.slice();\n                    scaleZoom(yaxes[i], 1 - dx / pw);\n                }\n                dy = dx * ph / pw;\n                yStart = dy / 2;\n            }\n        }\n\n        if(!matches.isSubplotConstrained || !yActive) {\n            updateMatchedAxRange('x');\n        }\n        if(!matches.isSubplotConstrained || !xActive) {\n            updateMatchedAxRange('y');\n        }\n        var xSize = pw - dx;\n        var ySize = ph - dy;\n        if(matches.isSubplotConstrained && !(xActive && yActive)) {\n            if(xActive) {\n                yStart = xStart ? 0 : (dx * ph / pw);\n                ySize = xSize * ph / pw;\n            } else {\n                xStart = yStart ? 0 : (dy * pw / ph);\n                xSize = ySize * pw / ph;\n            }\n        }\n        updateSubplots([xStart, yStart, xSize, ySize]);\n        ticksAndAnnotations();\n        gd.emit('plotly_relayouting', updates);\n    }\n\n    function updateMatchedAxRange(axLetter, out) {\n        var matchedAxes = matches.isSubplotConstrained ?\n            {x: yaxes, y: xaxes}[axLetter] :\n            matches[axLetter + 'axes'];\n\n        var constrainedAxes = matches.isSubplotConstrained ?\n            {x: xaxes, y: yaxes}[axLetter] :\n            [];\n\n        for(var i = 0; i < matchedAxes.length; i++) {\n            var ax = matchedAxes[i];\n            var axId = ax._id;\n            var axId2 = matches.xLinks[axId] || matches.yLinks[axId];\n            var ax2 = constrainedAxes[0] || xaHash[axId2] || yaHash[axId2];\n\n            if(ax2) {\n                if(out) {\n                    // zoombox case - don't mutate 'range', just add keys in 'updates'\n                    out[ax._name + '.range[0]'] = out[ax2._name + '.range[0]'];\n                    out[ax._name + '.range[1]'] = out[ax2._name + '.range[1]'];\n                } else {\n                    ax.range = ax2.range.slice();\n                }\n            }\n        }\n    }\n\n    // Draw ticks and annotations (and other components) when ranges change.\n    // Also records the ranges that have changed for use by update at the end.\n    function ticksAndAnnotations() {\n        var activeAxIds = [];\n        var i;\n\n        function pushActiveAxIds(axList) {\n            for(i = 0; i < axList.length; i++) {\n                if(!axList[i].fixedrange) activeAxIds.push(axList[i]._id);\n            }\n        }\n\n        function pushActiveAxIdsSynced(axList, axisType) {\n            for(i = 0; i < axList.length; i++) {\n                var axListI = axList[i];\n                var axListIType = axListI[axisType];\n                if(!axListI.fixedrange && axListIType.tickmode === 'sync') activeAxIds.push(axListIType._id);\n            }\n        }\n\n        if(editX) {\n            pushActiveAxIds(xaxes);\n            pushActiveAxIds(links.xaxes);\n            pushActiveAxIds(matches.xaxes);\n            pushActiveAxIdsSynced(plotinfo.overlays, 'xaxis');\n        }\n        if(editY) {\n            pushActiveAxIds(yaxes);\n            pushActiveAxIds(links.yaxes);\n            pushActiveAxIds(matches.yaxes);\n            pushActiveAxIdsSynced(plotinfo.overlays, 'yaxis');\n        }\n\n        updates = {};\n        for(i = 0; i < activeAxIds.length; i++) {\n            var axId = activeAxIds[i];\n            var ax = getFromId(gd, axId);\n            Axes.drawOne(gd, ax, {skipTitle: true});\n            updates[ax._name + '.range[0]'] = ax.range[0];\n            updates[ax._name + '.range[1]'] = ax.range[1];\n        }\n\n        Axes.redrawComponents(gd, activeAxIds);\n    }\n\n    function doubleClick() {\n        if(gd._transitioningWithDuration) return;\n\n        var doubleClickConfig = gd._context.doubleClick;\n\n        var axList = [];\n        if(xActive) axList = axList.concat(xaxes);\n        if(yActive) axList = axList.concat(yaxes);\n        if(matches.xaxes) axList = axList.concat(matches.xaxes);\n        if(matches.yaxes) axList = axList.concat(matches.yaxes);\n\n        var attrs = {};\n        var ax, i;\n\n        // For reset+autosize mode:\n        // If *any* of the main axes is not at its initial range\n        // (or autoranged, if we have no initial range, to match the logic in\n        // doubleClickConfig === 'reset' below), we reset.\n        // If they are *all* at their initial ranges, then we autosize.\n        if(doubleClickConfig === 'reset+autosize') {\n            doubleClickConfig = 'autosize';\n\n            for(i = 0; i < axList.length; i++) {\n                ax = axList[i];\n                var r0 = ax._rangeInitial0;\n                var r1 = ax._rangeInitial1;\n                var hasRangeInitial =\n                    r0 !== undefined ||\n                    r1 !== undefined;\n\n                if((hasRangeInitial && (\n                        (r0 !== undefined && r0 !== ax.range[0]) ||\n                        (r1 !== undefined && r1 !== ax.range[1])\n                    )) ||\n                    (!hasRangeInitial && ax.autorange !== true)\n                ) {\n                    doubleClickConfig = 'reset';\n                    break;\n                }\n            }\n        }\n\n        if(doubleClickConfig === 'autosize') {\n            // don't set the linked axes here, so relayout marks them as shrinkable\n            // and we autosize just to the requested axis/axes\n            for(i = 0; i < axList.length; i++) {\n                ax = axList[i];\n                if(!ax.fixedrange) attrs[ax._name + '.autorange'] = true;\n            }\n        } else if(doubleClickConfig === 'reset') {\n            // when we're resetting, reset all linked axes too, so we get back\n            // to the fully-auto-with-constraints situation\n            if(xActive || links.isSubplotConstrained) axList = axList.concat(links.xaxes);\n            if(yActive && !links.isSubplotConstrained) axList = axList.concat(links.yaxes);\n\n            if(links.isSubplotConstrained) {\n                if(!xActive) axList = axList.concat(xaxes);\n                else if(!yActive) axList = axList.concat(yaxes);\n            }\n\n            for(i = 0; i < axList.length; i++) {\n                ax = axList[i];\n\n                if(!ax.fixedrange) {\n                    var axName = ax._name;\n\n                    var autorangeInitial = ax._autorangeInitial;\n                    if(ax._rangeInitial0 === undefined && ax._rangeInitial1 === undefined) {\n                        attrs[axName + '.autorange'] = true;\n                    } else if(ax._rangeInitial0 === undefined) {\n                        attrs[axName + '.autorange'] = autorangeInitial;\n                        attrs[axName + '.range'] = [null, ax._rangeInitial1];\n                    } else if(ax._rangeInitial1 === undefined) {\n                        attrs[axName + '.range'] = [ax._rangeInitial0, null];\n                        attrs[axName + '.autorange'] = autorangeInitial;\n                    } else {\n                        attrs[axName + '.range'] = [ax._rangeInitial0, ax._rangeInitial1];\n                    }\n                }\n            }\n        }\n\n        gd.emit('plotly_doubleclick', null);\n        Registry.call('_guiRelayout', gd, attrs);\n    }\n\n    // dragTail - finish a drag event with a redraw\n    function dragTail() {\n        // put the subplot viewboxes back to default (Because we're going to)\n        // be repositioning the data in the relayout. But DON'T call\n        // ticksAndAnnotations again - it's unnecessary and would overwrite `updates`\n        updateSubplots([0, 0, pw, ph]);\n\n        // since we may have been redrawing some things during the drag, we may have\n        // accumulated MathJax promises - wait for them before we relayout.\n        Lib.syncOrAsync([\n            Plots.previousPromises,\n            function() {\n                gd._fullLayout._replotting = false;\n                Registry.call('_guiRelayout', gd, updates);\n            }\n        ], gd);\n    }\n\n    // updateSubplots - find all plot viewboxes that should be\n    // affected by this drag, and update them. look for all plots\n    // sharing an affected axis (including the one being dragged),\n    // includes also scattergl and splom logic.\n    function updateSubplots(viewBox) {\n        var fullLayout = gd._fullLayout;\n        var plotinfos = fullLayout._plots;\n        var subplots = fullLayout._subplots.cartesian;\n        var i, sp, xa, ya;\n\n        if(hasSplom) {\n            Registry.subplotsRegistry.splom.drag(gd);\n        }\n\n        if(hasScatterGl) {\n            for(i = 0; i < subplots.length; i++) {\n                sp = plotinfos[subplots[i]];\n                xa = sp.xaxis;\n                ya = sp.yaxis;\n\n                if(sp._scene) {\n                    if(xa.limitRange) xa.limitRange();\n                    if(ya.limitRange) ya.limitRange();\n\n                    var xrng = Lib.simpleMap(xa.range, xa.r2l);\n                    var yrng = Lib.simpleMap(ya.range, ya.r2l);\n\n                    sp._scene.update({range: [xrng[0], yrng[0], xrng[1], yrng[1]]});\n                }\n            }\n        }\n\n        if(hasSplom || hasScatterGl) {\n            clearGlCanvases(gd);\n            redrawReglTraces(gd);\n        }\n\n        if(hasSVG) {\n            var xScaleFactor = viewBox[2] / xa0._length;\n            var yScaleFactor = viewBox[3] / ya0._length;\n\n            for(i = 0; i < subplots.length; i++) {\n                sp = plotinfos[subplots[i]];\n                xa = sp.xaxis;\n                ya = sp.yaxis;\n\n                var editX2 = (editX || matches.isSubplotConstrained) && !xa.fixedrange && xaHash[xa._id];\n                var editY2 = (editY || matches.isSubplotConstrained) && !ya.fixedrange && yaHash[ya._id];\n\n                var xScaleFactor2, yScaleFactor2;\n                var clipDx, clipDy;\n\n                if(editX2) {\n                    xScaleFactor2 = xScaleFactor;\n                    clipDx = ew || matches.isSubplotConstrained ? viewBox[0] : getShift(xa, xScaleFactor2);\n                } else if(matches.xaHash[xa._id]) {\n                    xScaleFactor2 = xScaleFactor;\n                    clipDx = viewBox[0] * xa._length / xa0._length;\n                } else if(matches.yaHash[xa._id]) {\n                    xScaleFactor2 = yScaleFactor;\n                    clipDx = yActive === 'ns' ?\n                        -viewBox[1] * xa._length / ya0._length :\n                        getShift(xa, xScaleFactor2, {n: 'top', s: 'bottom'}[yActive]);\n                } else {\n                    xScaleFactor2 = getLinkedScaleFactor(xa, xScaleFactor, yScaleFactor);\n                    clipDx = scaleAndGetShift(xa, xScaleFactor2);\n                }\n\n                if(xScaleFactor2 > 1 && (\n                    (xa.maxallowed !== undefined && editX === (xa.range[0] < xa.range[1] ? 'e' : 'w')) ||\n                    (xa.minallowed !== undefined && editX === (xa.range[0] < xa.range[1] ? 'w' : 'e'))\n                )) {\n                    xScaleFactor2 = 1;\n                    clipDx = 0;\n                }\n\n                if(editY2) {\n                    yScaleFactor2 = yScaleFactor;\n                    clipDy = ns || matches.isSubplotConstrained ? viewBox[1] : getShift(ya, yScaleFactor2);\n                } else if(matches.yaHash[ya._id]) {\n                    yScaleFactor2 = yScaleFactor;\n                    clipDy = viewBox[1] * ya._length / ya0._length;\n                } else if(matches.xaHash[ya._id]) {\n                    yScaleFactor2 = xScaleFactor;\n                    clipDy = xActive === 'ew' ?\n                        -viewBox[0] * ya._length / xa0._length :\n                        getShift(ya, yScaleFactor2, {e: 'right', w: 'left'}[xActive]);\n                } else {\n                    yScaleFactor2 = getLinkedScaleFactor(ya, xScaleFactor, yScaleFactor);\n                    clipDy = scaleAndGetShift(ya, yScaleFactor2);\n                }\n\n                if(yScaleFactor2 > 1 && (\n                    (ya.maxallowed !== undefined && editY === (ya.range[0] < ya.range[1] ? 'n' : 's')) ||\n                    (ya.minallowed !== undefined && editY === (ya.range[0] < ya.range[1] ? 's' : 'n'))\n                )) {\n                    yScaleFactor2 = 1;\n                    clipDy = 0;\n                }\n\n                // don't scale at all if neither axis is scalable here\n                if(!xScaleFactor2 && !yScaleFactor2) {\n                    continue;\n                }\n\n                // but if only one is, reset the other axis scaling\n                if(!xScaleFactor2) xScaleFactor2 = 1;\n                if(!yScaleFactor2) yScaleFactor2 = 1;\n\n                var plotDx = xa._offset - clipDx / xScaleFactor2;\n                var plotDy = ya._offset - clipDy / yScaleFactor2;\n\n                // TODO could be more efficient here:\n                // setTranslate and setScale do a lot of extra work\n                // when working independently, should perhaps combine\n                // them into a single routine.\n                sp.clipRect\n                    .call(Drawing.setTranslate, clipDx, clipDy)\n                    .call(Drawing.setScale, xScaleFactor2, yScaleFactor2);\n\n                sp.plot\n                    .call(Drawing.setTranslate, plotDx, plotDy)\n                    .call(Drawing.setScale, 1 / xScaleFactor2, 1 / yScaleFactor2);\n\n                // apply an inverse scale to individual points to counteract\n                // the scale of the trace group.\n                // apply only when scale changes, as adjusting the scale of\n                // all the points can be expansive.\n                if(xScaleFactor2 !== sp.xScaleFactor || yScaleFactor2 !== sp.yScaleFactor) {\n                    Drawing.setPointGroupScale(sp.zoomScalePts, xScaleFactor2, yScaleFactor2);\n                    Drawing.setTextPointsScale(sp.zoomScaleTxt, xScaleFactor2, yScaleFactor2);\n                }\n\n                Drawing.hideOutsideRangePoints(sp.clipOnAxisFalseTraces, sp);\n\n                // update x/y scaleFactor stash\n                sp.xScaleFactor = xScaleFactor2;\n                sp.yScaleFactor = yScaleFactor2;\n            }\n        }\n    }\n\n    // Find the appropriate scaling for this axis, if it's linked to the\n    // dragged axes by constraints. 0 is special, it means this axis shouldn't\n    // ever be scaled (will be converted to 1 if the other axis is scaled)\n    function getLinkedScaleFactor(ax, xScaleFactor, yScaleFactor) {\n        if(ax.fixedrange) return 0;\n\n        if(editX && links.xaHash[ax._id]) {\n            return xScaleFactor;\n        }\n        if(editY && (links.isSubplotConstrained ? links.xaHash : links.yaHash)[ax._id]) {\n            return yScaleFactor;\n        }\n        return 0;\n    }\n\n    function scaleAndGetShift(ax, scaleFactor) {\n        if(scaleFactor) {\n            ax.range = ax._r.slice();\n            scaleZoom(ax, scaleFactor);\n            return getShift(ax, scaleFactor);\n        }\n        return 0;\n    }\n\n    function getShift(ax, scaleFactor, from) {\n        return ax._length * (1 - scaleFactor) * FROM_TL[from || ax.constraintoward || 'middle'];\n    }\n\n    return dragger;\n}\n\nfunction makeDragger(plotinfo, nodeName, dragClass, cursor) {\n    var dragger3 = Lib.ensureSingle(plotinfo.draglayer, nodeName, dragClass, function(s) {\n        s.classed('drag', true)\n            .style({fill: 'transparent', 'stroke-width': 0})\n            .attr('data-subplot', plotinfo.id);\n    });\n\n    dragger3.call(setCursor, cursor);\n\n    return dragger3.node();\n}\n\nfunction makeRectDragger(plotinfo, dragClass, cursor, x, y, w, h) {\n    var dragger = makeDragger(plotinfo, 'rect', dragClass, cursor);\n    d3.select(dragger).call(Drawing.setRect, x, y, w, h);\n    return dragger;\n}\n\nfunction isDirectionActive(axList, activeVal) {\n    for(var i = 0; i < axList.length; i++) {\n        if(!axList[i].fixedrange) return activeVal;\n    }\n    return '';\n}\n\nfunction getEndText(ax, end) {\n    var initialVal = ax.range[end];\n    var diff = Math.abs(initialVal - ax.range[1 - end]);\n    var dig;\n\n    // TODO: this should basically be ax.r2d but we're doing extra\n    // rounding here... can we clean up at all?\n    if(ax.type === 'date') {\n        return initialVal;\n    } else if(ax.type === 'log') {\n        dig = Math.ceil(Math.max(0, -Math.log(diff) / Math.LN10)) + 3;\n        return numberFormat('.' + dig + 'g')(Math.pow(10, initialVal));\n    } else { // linear numeric (or category... but just show numbers here)\n        dig = Math.floor(Math.log(Math.abs(initialVal)) / Math.LN10) -\n            Math.floor(Math.log(diff) / Math.LN10) + 4;\n        return numberFormat('.' + String(dig) + 'g')(initialVal);\n    }\n}\n\nfunction zoomAxRanges(axList, r0Fraction, r1Fraction, updates, linkedAxes) {\n    for(var i = 0; i < axList.length; i++) {\n        var axi = axList[i];\n        if(axi.fixedrange) continue;\n\n        if(axi.rangebreaks) {\n            var isY = axi._id.charAt(0) === 'y';\n            var r0F = isY ? (1 - r0Fraction) : r0Fraction;\n            var r1F = isY ? (1 - r1Fraction) : r1Fraction;\n\n            updates[axi._name + '.range[0]'] = axi.l2r(axi.p2l(r0F * axi._length));\n            updates[axi._name + '.range[1]'] = axi.l2r(axi.p2l(r1F * axi._length));\n        } else {\n            var axRangeLinear0 = axi._rl[0];\n            var axRangeLinearSpan = axi._rl[1] - axRangeLinear0;\n            updates[axi._name + '.range[0]'] = axi.l2r(axRangeLinear0 + axRangeLinearSpan * r0Fraction);\n            updates[axi._name + '.range[1]'] = axi.l2r(axRangeLinear0 + axRangeLinearSpan * r1Fraction);\n        }\n    }\n\n    // zoom linked axes about their centers\n    if(linkedAxes && linkedAxes.length) {\n        var linkedR0Fraction = (r0Fraction + (1 - r1Fraction)) / 2;\n        zoomAxRanges(linkedAxes, linkedR0Fraction, 1 - linkedR0Fraction, updates, []);\n    }\n}\n\nfunction dragAxList(axList, pix) {\n    for(var i = 0; i < axList.length; i++) {\n        var axi = axList[i];\n        if(!axi.fixedrange) {\n            if(axi.rangebreaks) {\n                var p0 = 0;\n                var p1 = axi._length;\n                var d0 = axi.p2l(p0 + pix) - axi.p2l(p0);\n                var d1 = axi.p2l(p1 + pix) - axi.p2l(p1);\n                var delta = (d0 + d1) / 2;\n\n                axi.range = [\n                    axi.l2r(axi._rl[0] - delta),\n                    axi.l2r(axi._rl[1] - delta)\n                ];\n            } else {\n                axi.range = [\n                    axi.l2r(axi._rl[0] - pix / axi._m),\n                    axi.l2r(axi._rl[1] - pix / axi._m)\n                ];\n            }\n\n            if(axi.limitRange) axi.limitRange();\n        }\n    }\n}\n\n// common transform for dragging one end of an axis\n// d>0 is compressing scale (cursor is over the plot,\n//  the axis end should move with the cursor)\n// d<0 is expanding (cursor is off the plot, axis end moves\n//  nonlinearly so you can expand far)\nfunction dZoom(d) {\n    return 1 - ((d >= 0) ? Math.min(d, 0.9) :\n        1 / (1 / Math.max(d, -0.3) + 3.222));\n}\n\nfunction getDragCursor(nsew, dragmode, isMainDrag) {\n    if(!nsew) return 'pointer';\n    if(nsew === 'nsew') {\n        // in this case here, clear cursor and\n        // use the cursor style set on <g .draglayer>\n        if(isMainDrag) return '';\n        if(dragmode === 'pan') return 'move';\n        return 'crosshair';\n    }\n    return nsew.toLowerCase() + '-resize';\n}\n\nfunction makeZoombox(zoomlayer, lum, xs, ys, path0) {\n    return zoomlayer.append('path')\n        .attr('class', 'zoombox')\n        .style({\n            fill: lum > 0.2 ? 'rgba(0,0,0,0)' : 'rgba(255,255,255,0)',\n            'stroke-width': 0\n        })\n        .attr('transform', strTranslate(xs, ys))\n        .attr('d', path0 + 'Z');\n}\n\nfunction makeCorners(zoomlayer, xs, ys) {\n    return zoomlayer.append('path')\n        .attr('class', 'zoombox-corners')\n        .style({\n            fill: Color.background,\n            stroke: Color.defaultLine,\n            'stroke-width': 1,\n            opacity: 0\n        })\n        .attr('transform', strTranslate(xs, ys))\n        .attr('d', 'M0,0Z');\n}\n\nfunction updateZoombox(zb, corners, box, path0, dimmed, lum) {\n    zb.attr('d',\n        path0 + 'M' + (box.l) + ',' + (box.t) + 'v' + (box.h) +\n        'h' + (box.w) + 'v-' + (box.h) + 'h-' + (box.w) + 'Z');\n    transitionZoombox(zb, corners, dimmed, lum);\n}\n\nfunction transitionZoombox(zb, corners, dimmed, lum) {\n    if(!dimmed) {\n        zb.transition()\n            .style('fill', lum > 0.2 ? 'rgba(0,0,0,0.4)' :\n                'rgba(255,255,255,0.3)')\n            .duration(200);\n        corners.transition()\n            .style('opacity', 1)\n            .duration(200);\n    }\n}\n\nfunction removeZoombox(gd) {\n    d3.select(gd)\n        .selectAll('.zoombox,.js-zoombox-backdrop,.js-zoombox-menu,.zoombox-corners')\n        .remove();\n}\n\nfunction showDoubleClickNotifier(gd) {\n    if(SHOWZOOMOUTTIP && gd.data && gd._context.showTips) {\n        Lib.notifier(Lib._(gd, 'Double-click to zoom back out'), 'long');\n        SHOWZOOMOUTTIP = false;\n    }\n}\n\nfunction xCorners(box, y0) {\n    return 'M' +\n        (box.l - 0.5) + ',' + (y0 - MINZOOM - 0.5) +\n        'h-3v' + (2 * MINZOOM + 1) + 'h3ZM' +\n        (box.r + 0.5) + ',' + (y0 - MINZOOM - 0.5) +\n        'h3v' + (2 * MINZOOM + 1) + 'h-3Z';\n}\n\nfunction yCorners(box, x0) {\n    return 'M' +\n        (x0 - MINZOOM - 0.5) + ',' + (box.t - 0.5) +\n        'v-3h' + (2 * MINZOOM + 1) + 'v3ZM' +\n        (x0 - MINZOOM - 0.5) + ',' + (box.b + 0.5) +\n        'v3h' + (2 * MINZOOM + 1) + 'v-3Z';\n}\n\nfunction xyCorners(box) {\n    var clen = Math.floor(Math.min(box.b - box.t, box.r - box.l, MINZOOM) / 2);\n    return 'M' +\n        (box.l - 3.5) + ',' + (box.t - 0.5 + clen) + 'h3v' + (-clen) +\n            'h' + clen + 'v-3h-' + (clen + 3) + 'ZM' +\n        (box.r + 3.5) + ',' + (box.t - 0.5 + clen) + 'h-3v' + (-clen) +\n            'h' + (-clen) + 'v-3h' + (clen + 3) + 'ZM' +\n        (box.r + 3.5) + ',' + (box.b + 0.5 - clen) + 'h-3v' + clen +\n            'h' + (-clen) + 'v3h' + (clen + 3) + 'ZM' +\n        (box.l - 3.5) + ',' + (box.b + 0.5 - clen) + 'h3v' + clen +\n            'h' + clen + 'v3h-' + (clen + 3) + 'Z';\n}\n\nfunction calcLinks(gd, groups, xaHash, yaHash, exclude) {\n    var isSubplotConstrained = false;\n    var xLinks = {};\n    var yLinks = {};\n    var xID, yID, xLinkID, yLinkID;\n    var xExclude = (exclude || {}).xaHash;\n    var yExclude = (exclude || {}).yaHash;\n\n    for(var i = 0; i < groups.length; i++) {\n        var group = groups[i];\n        // check if any of the x axes we're dragging is in this constraint group\n        for(xID in xaHash) {\n            if(group[xID]) {\n                // put the rest of these axes into xLinks, if we're not already\n                // dragging them, so we know to scale these axes automatically too\n                // to match the changes in the dragged x axes\n                for(xLinkID in group) {\n                    if(\n                        !(exclude && (xExclude[xLinkID] || yExclude[xLinkID])) &&\n                        !(xLinkID.charAt(0) === 'x' ? xaHash : yaHash)[xLinkID]\n                    ) {\n                        xLinks[xLinkID] = xID;\n                    }\n                }\n\n                // check if the x and y axes of THIS drag are linked\n                for(yID in yaHash) {\n                    if(\n                        !(exclude && (xExclude[yID] || yExclude[yID])) &&\n                        group[yID]\n                    ) {\n                        isSubplotConstrained = true;\n                    }\n                }\n            }\n        }\n\n        // now check if any of the y axes we're dragging is in this constraint group\n        // only look for outside links, as we've already checked for links within the dragger\n        for(yID in yaHash) {\n            if(group[yID]) {\n                for(yLinkID in group) {\n                    if(\n                        !(exclude && (xExclude[yLinkID] || yExclude[yLinkID])) &&\n                        !(yLinkID.charAt(0) === 'x' ? xaHash : yaHash)[yLinkID]\n                    ) {\n                        yLinks[yLinkID] = yID;\n                    }\n                }\n            }\n        }\n    }\n\n    if(isSubplotConstrained) {\n        // merge xLinks and yLinks if the subplot is constrained,\n        // since we'll always apply both anyway and the two will contain\n        // duplicates\n        Lib.extendFlat(xLinks, yLinks);\n        yLinks = {};\n    }\n\n    var xaHashLinked = {};\n    var xaxesLinked = [];\n    for(xLinkID in xLinks) {\n        var xa = getFromId(gd, xLinkID);\n        xaxesLinked.push(xa);\n        xaHashLinked[xa._id] = xa;\n    }\n\n    var yaHashLinked = {};\n    var yaxesLinked = [];\n    for(yLinkID in yLinks) {\n        var ya = getFromId(gd, yLinkID);\n        yaxesLinked.push(ya);\n        yaHashLinked[ya._id] = ya;\n    }\n\n    return {\n        xaHash: xaHashLinked,\n        yaHash: yaHashLinked,\n        xaxes: xaxesLinked,\n        yaxes: yaxesLinked,\n        xLinks: xLinks,\n        yLinks: yLinks,\n        isSubplotConstrained: isSubplotConstrained\n    };\n}\n\n// still seems to be some confusion about onwheel vs onmousewheel...\nfunction attachWheelEventHandler(element, handler) {\n    if(!supportsPassive) {\n        if(element.onwheel !== undefined) element.onwheel = handler;\n        else if(element.onmousewheel !== undefined) element.onmousewheel = handler;\n        else if(!element.isAddedWheelEvent) {\n            element.isAddedWheelEvent = true;\n            element.addEventListener('wheel', handler, {passive: false});\n        }\n    } else {\n        var wheelEventName = element.onwheel !== undefined ? 'wheel' : 'mousewheel';\n\n        if(element._onwheel) {\n            element.removeEventListener(wheelEventName, element._onwheel);\n        }\n        element._onwheel = handler;\n\n        element.addEventListener(wheelEventName, handler, {passive: false});\n    }\n}\n\nfunction hashValues(hash) {\n    var out = [];\n    for(var k in hash) out.push(hash[k]);\n    return out;\n}\n\nmodule.exports = {\n    makeDragBox: makeDragBox,\n\n    makeDragger: makeDragger,\n    makeRectDragger: makeRectDragger,\n    makeZoombox: makeZoombox,\n    makeCorners: makeCorners,\n\n    updateZoombox: updateZoombox,\n    xyCorners: xyCorners,\n    transitionZoombox: transitionZoombox,\n    removeZoombox: removeZoombox,\n    showDoubleClickNotifier: showDoubleClickNotifier,\n\n    attachWheelEventHandler: attachWheelEventHandler\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}