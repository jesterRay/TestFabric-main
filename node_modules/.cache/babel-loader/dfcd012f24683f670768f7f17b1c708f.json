{"ast":null,"code":"'use strict';\n\nvar createLine = require('regl-line2d');\nvar Registry = require('../../registry');\nvar prepareRegl = require('../../lib/prepare_regl');\nvar getModuleCalcData = require('../../plots/get_data').getModuleCalcData;\nvar Cartesian = require('../../plots/cartesian');\nvar getFromId = require('../../plots/cartesian/axis_ids').getFromId;\nvar shouldShowZeroLine = require('../../plots/cartesian/axes').shouldShowZeroLine;\nvar SPLOM = 'splom';\nvar reglPrecompiled = {};\nfunction plot(gd) {\n  var fullLayout = gd._fullLayout;\n  var _module = Registry.getModule(SPLOM);\n  var splomCalcData = getModuleCalcData(gd.calcdata, _module)[0];\n  var success = prepareRegl(gd, ['ANGLE_instanced_arrays', 'OES_element_index_uint'], reglPrecompiled);\n  if (!success) return;\n  if (fullLayout._hasOnlyLargeSploms) {\n    updateGrid(gd);\n  }\n  _module.plot(gd, {}, splomCalcData);\n}\nfunction drag(gd) {\n  var cd = gd.calcdata;\n  var fullLayout = gd._fullLayout;\n  if (fullLayout._hasOnlyLargeSploms) {\n    updateGrid(gd);\n  }\n  for (var i = 0; i < cd.length; i++) {\n    var cd0 = cd[i][0];\n    var trace = cd0.trace;\n    var scene = fullLayout._splomScenes[trace.uid];\n    if (trace.type === 'splom' && scene && scene.matrix) {\n      dragOne(gd, trace, scene);\n    }\n  }\n}\nfunction dragOne(gd, trace, scene) {\n  var visibleLength = scene.matrixOptions.data.length;\n  var visibleDims = trace._visibleDims;\n  var ranges = scene.viewOpts.ranges = new Array(visibleLength);\n  for (var k = 0; k < visibleDims.length; k++) {\n    var i = visibleDims[k];\n    var rng = ranges[k] = new Array(4);\n    var xa = getFromId(gd, trace._diag[i][0]);\n    if (xa) {\n      rng[0] = xa.r2l(xa.range[0]);\n      rng[2] = xa.r2l(xa.range[1]);\n    }\n    var ya = getFromId(gd, trace._diag[i][1]);\n    if (ya) {\n      rng[1] = ya.r2l(ya.range[0]);\n      rng[3] = ya.r2l(ya.range[1]);\n    }\n  }\n  if (scene.selectBatch.length || scene.unselectBatch.length) {\n    scene.matrix.update({\n      ranges: ranges\n    }, {\n      ranges: ranges\n    });\n  } else {\n    scene.matrix.update({\n      ranges: ranges\n    });\n  }\n}\nfunction updateGrid(gd) {\n  var fullLayout = gd._fullLayout;\n  var regl = fullLayout._glcanvas.data()[0].regl;\n  var splomGrid = fullLayout._splomGrid;\n  if (!splomGrid) {\n    splomGrid = fullLayout._splomGrid = createLine(regl);\n  }\n  splomGrid.update(makeGridData(gd));\n}\nfunction makeGridData(gd) {\n  var plotGlPixelRatio = gd._context.plotGlPixelRatio;\n  var fullLayout = gd._fullLayout;\n  var gs = fullLayout._size;\n  var fullView = [0, 0, fullLayout.width * plotGlPixelRatio, fullLayout.height * plotGlPixelRatio];\n  var lookup = {};\n  var k;\n  function push(prefix, ax, x0, x1, y0, y1) {\n    x0 *= plotGlPixelRatio;\n    x1 *= plotGlPixelRatio;\n    y0 *= plotGlPixelRatio;\n    y1 *= plotGlPixelRatio;\n    var lcolor = ax[prefix + 'color'];\n    var lwidth = ax[prefix + 'width'];\n    var key = String(lcolor + lwidth);\n    if (key in lookup) {\n      lookup[key].data.push(NaN, NaN, x0, x1, y0, y1);\n    } else {\n      lookup[key] = {\n        data: [x0, x1, y0, y1],\n        join: 'rect',\n        thickness: lwidth * plotGlPixelRatio,\n        color: lcolor,\n        viewport: fullView,\n        range: fullView,\n        overlay: false\n      };\n    }\n  }\n  for (k in fullLayout._splomSubplots) {\n    var sp = fullLayout._plots[k];\n    var xa = sp.xaxis;\n    var ya = sp.yaxis;\n    var xVals = xa._gridVals;\n    var yVals = ya._gridVals;\n    var xOffset = xa._offset;\n    var xLength = xa._length;\n    var yLength = ya._length;\n\n    // ya.l2p assumes top-to-bottom coordinate system (a la SVG),\n    // we need to compute bottom-to-top offsets and slopes:\n    var yOffset = gs.b + ya.domain[0] * gs.h;\n    var ym = -ya._m;\n    var yb = -ym * ya.r2l(ya.range[0], ya.calendar);\n    var x, y;\n    if (xa.showgrid) {\n      for (k = 0; k < xVals.length; k++) {\n        x = xOffset + xa.l2p(xVals[k].x);\n        push('grid', xa, x, yOffset, x, yOffset + yLength);\n      }\n    }\n    if (ya.showgrid) {\n      for (k = 0; k < yVals.length; k++) {\n        y = yOffset + yb + ym * yVals[k].x;\n        push('grid', ya, xOffset, y, xOffset + xLength, y);\n      }\n    }\n    if (shouldShowZeroLine(gd, xa, ya)) {\n      x = xOffset + xa.l2p(0);\n      push('zeroline', xa, x, yOffset, x, yOffset + yLength);\n    }\n    if (shouldShowZeroLine(gd, ya, xa)) {\n      y = yOffset + yb + 0;\n      push('zeroline', ya, xOffset, y, xOffset + xLength, y);\n    }\n  }\n  var gridBatches = [];\n  for (k in lookup) {\n    gridBatches.push(lookup[k]);\n  }\n  return gridBatches;\n}\nfunction clean(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n  var lookup = {};\n  var i;\n  if (oldFullLayout._splomScenes) {\n    for (i = 0; i < newFullData.length; i++) {\n      var newTrace = newFullData[i];\n      if (newTrace.type === 'splom') {\n        lookup[newTrace.uid] = 1;\n      }\n    }\n    for (i = 0; i < oldFullData.length; i++) {\n      var oldTrace = oldFullData[i];\n      if (!lookup[oldTrace.uid]) {\n        var scene = oldFullLayout._splomScenes[oldTrace.uid];\n        if (scene && scene.destroy) scene.destroy();\n        // must first set scene to null in order to get garbage collected\n        oldFullLayout._splomScenes[oldTrace.uid] = null;\n        delete oldFullLayout._splomScenes[oldTrace.uid];\n      }\n    }\n  }\n  if (Object.keys(oldFullLayout._splomScenes || {}).length === 0) {\n    delete oldFullLayout._splomScenes;\n  }\n  if (oldFullLayout._splomGrid && !newFullLayout._hasOnlyLargeSploms && oldFullLayout._hasOnlyLargeSploms) {\n    // must first set scene to null in order to get garbage collected\n    oldFullLayout._splomGrid.destroy();\n    oldFullLayout._splomGrid = null;\n    delete oldFullLayout._splomGrid;\n  }\n  Cartesian.clean(newFullData, newFullLayout, oldFullData, oldFullLayout);\n}\nmodule.exports = {\n  name: SPLOM,\n  attr: Cartesian.attr,\n  attrRegex: Cartesian.attrRegex,\n  layoutAttributes: Cartesian.layoutAttributes,\n  supplyLayoutDefaults: Cartesian.supplyLayoutDefaults,\n  drawFramework: Cartesian.drawFramework,\n  plot: plot,\n  drag: drag,\n  updateGrid: updateGrid,\n  clean: clean,\n  updateFx: Cartesian.updateFx,\n  toSVG: Cartesian.toSVG,\n  reglPrecompiled: reglPrecompiled\n};","map":{"version":3,"names":["createLine","require","Registry","prepareRegl","getModuleCalcData","Cartesian","getFromId","shouldShowZeroLine","SPLOM","reglPrecompiled","plot","gd","fullLayout","_fullLayout","_module","getModule","splomCalcData","calcdata","success","_hasOnlyLargeSploms","updateGrid","drag","cd","i","length","cd0","trace","scene","_splomScenes","uid","type","matrix","dragOne","visibleLength","matrixOptions","data","visibleDims","_visibleDims","ranges","viewOpts","Array","k","rng","xa","_diag","r2l","range","ya","selectBatch","unselectBatch","update","regl","_glcanvas","splomGrid","_splomGrid","makeGridData","plotGlPixelRatio","_context","gs","_size","fullView","width","height","lookup","push","prefix","ax","x0","x1","y0","y1","lcolor","lwidth","key","String","NaN","join","thickness","color","viewport","overlay","_splomSubplots","sp","_plots","xaxis","yaxis","xVals","_gridVals","yVals","xOffset","_offset","xLength","_length","yLength","yOffset","b","domain","h","ym","_m","yb","calendar","x","y","showgrid","l2p","gridBatches","clean","newFullData","newFullLayout","oldFullData","oldFullLayout","newTrace","oldTrace","destroy","Object","keys","module","exports","name","attr","attrRegex","layoutAttributes","supplyLayoutDefaults","drawFramework","updateFx","toSVG"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/splom/base_plot.js"],"sourcesContent":["'use strict';\n\nvar createLine = require('regl-line2d');\n\nvar Registry = require('../../registry');\nvar prepareRegl = require('../../lib/prepare_regl');\nvar getModuleCalcData = require('../../plots/get_data').getModuleCalcData;\nvar Cartesian = require('../../plots/cartesian');\nvar getFromId = require('../../plots/cartesian/axis_ids').getFromId;\nvar shouldShowZeroLine = require('../../plots/cartesian/axes').shouldShowZeroLine;\n\nvar SPLOM = 'splom';\n\nvar reglPrecompiled = {};\n\nfunction plot(gd) {\n    var fullLayout = gd._fullLayout;\n    var _module = Registry.getModule(SPLOM);\n    var splomCalcData = getModuleCalcData(gd.calcdata, _module)[0];\n\n    var success = prepareRegl(gd, ['ANGLE_instanced_arrays', 'OES_element_index_uint'], reglPrecompiled);\n    if(!success) return;\n\n    if(fullLayout._hasOnlyLargeSploms) {\n        updateGrid(gd);\n    }\n\n    _module.plot(gd, {}, splomCalcData);\n}\n\nfunction drag(gd) {\n    var cd = gd.calcdata;\n    var fullLayout = gd._fullLayout;\n\n    if(fullLayout._hasOnlyLargeSploms) {\n        updateGrid(gd);\n    }\n\n    for(var i = 0; i < cd.length; i++) {\n        var cd0 = cd[i][0];\n        var trace = cd0.trace;\n        var scene = fullLayout._splomScenes[trace.uid];\n\n        if(trace.type === 'splom' && scene && scene.matrix) {\n            dragOne(gd, trace, scene);\n        }\n    }\n}\n\nfunction dragOne(gd, trace, scene) {\n    var visibleLength = scene.matrixOptions.data.length;\n    var visibleDims = trace._visibleDims;\n    var ranges = scene.viewOpts.ranges = new Array(visibleLength);\n\n    for(var k = 0; k < visibleDims.length; k++) {\n        var i = visibleDims[k];\n        var rng = ranges[k] = new Array(4);\n\n        var xa = getFromId(gd, trace._diag[i][0]);\n        if(xa) {\n            rng[0] = xa.r2l(xa.range[0]);\n            rng[2] = xa.r2l(xa.range[1]);\n        }\n\n        var ya = getFromId(gd, trace._diag[i][1]);\n        if(ya) {\n            rng[1] = ya.r2l(ya.range[0]);\n            rng[3] = ya.r2l(ya.range[1]);\n        }\n    }\n\n    if(scene.selectBatch.length || scene.unselectBatch.length) {\n        scene.matrix.update({ranges: ranges}, {ranges: ranges});\n    } else {\n        scene.matrix.update({ranges: ranges});\n    }\n}\n\nfunction updateGrid(gd) {\n    var fullLayout = gd._fullLayout;\n    var regl = fullLayout._glcanvas.data()[0].regl;\n    var splomGrid = fullLayout._splomGrid;\n\n    if(!splomGrid) {\n        splomGrid = fullLayout._splomGrid = createLine(regl);\n    }\n    splomGrid.update(makeGridData(gd));\n}\n\nfunction makeGridData(gd) {\n    var plotGlPixelRatio = gd._context.plotGlPixelRatio;\n    var fullLayout = gd._fullLayout;\n    var gs = fullLayout._size;\n    var fullView = [\n        0, 0,\n        fullLayout.width * plotGlPixelRatio,\n        fullLayout.height * plotGlPixelRatio\n    ];\n    var lookup = {};\n    var k;\n\n    function push(prefix, ax, x0, x1, y0, y1) {\n        x0 *= plotGlPixelRatio;\n        x1 *= plotGlPixelRatio;\n        y0 *= plotGlPixelRatio;\n        y1 *= plotGlPixelRatio;\n\n        var lcolor = ax[prefix + 'color'];\n        var lwidth = ax[prefix + 'width'];\n        var key = String(lcolor + lwidth);\n\n        if(key in lookup) {\n            lookup[key].data.push(NaN, NaN, x0, x1, y0, y1);\n        } else {\n            lookup[key] = {\n                data: [x0, x1, y0, y1],\n                join: 'rect',\n                thickness: lwidth * plotGlPixelRatio,\n                color: lcolor,\n                viewport: fullView,\n                range: fullView,\n                overlay: false\n            };\n        }\n    }\n\n    for(k in fullLayout._splomSubplots) {\n        var sp = fullLayout._plots[k];\n        var xa = sp.xaxis;\n        var ya = sp.yaxis;\n        var xVals = xa._gridVals;\n        var yVals = ya._gridVals;\n        var xOffset = xa._offset;\n        var xLength = xa._length;\n        var yLength = ya._length;\n\n        // ya.l2p assumes top-to-bottom coordinate system (a la SVG),\n        // we need to compute bottom-to-top offsets and slopes:\n        var yOffset = gs.b + ya.domain[0] * gs.h;\n        var ym = -ya._m;\n        var yb = -ym * ya.r2l(ya.range[0], ya.calendar);\n        var x, y;\n\n        if(xa.showgrid) {\n            for(k = 0; k < xVals.length; k++) {\n                x = xOffset + xa.l2p(xVals[k].x);\n                push('grid', xa, x, yOffset, x, yOffset + yLength);\n            }\n        }\n        if(ya.showgrid) {\n            for(k = 0; k < yVals.length; k++) {\n                y = yOffset + yb + ym * yVals[k].x;\n                push('grid', ya, xOffset, y, xOffset + xLength, y);\n            }\n        }\n        if(shouldShowZeroLine(gd, xa, ya)) {\n            x = xOffset + xa.l2p(0);\n            push('zeroline', xa, x, yOffset, x, yOffset + yLength);\n        }\n        if(shouldShowZeroLine(gd, ya, xa)) {\n            y = yOffset + yb + 0;\n            push('zeroline', ya, xOffset, y, xOffset + xLength, y);\n        }\n    }\n\n    var gridBatches = [];\n    for(k in lookup) {\n        gridBatches.push(lookup[k]);\n    }\n\n    return gridBatches;\n}\n\nfunction clean(newFullData, newFullLayout, oldFullData, oldFullLayout) {\n    var lookup = {};\n    var i;\n\n    if(oldFullLayout._splomScenes) {\n        for(i = 0; i < newFullData.length; i++) {\n            var newTrace = newFullData[i];\n            if(newTrace.type === 'splom') {\n                lookup[newTrace.uid] = 1;\n            }\n        }\n        for(i = 0; i < oldFullData.length; i++) {\n            var oldTrace = oldFullData[i];\n            if(!lookup[oldTrace.uid]) {\n                var scene = oldFullLayout._splomScenes[oldTrace.uid];\n                if(scene && scene.destroy) scene.destroy();\n                // must first set scene to null in order to get garbage collected\n                oldFullLayout._splomScenes[oldTrace.uid] = null;\n                delete oldFullLayout._splomScenes[oldTrace.uid];\n            }\n        }\n    }\n\n    if(Object.keys(oldFullLayout._splomScenes || {}).length === 0) {\n        delete oldFullLayout._splomScenes;\n    }\n\n    if(oldFullLayout._splomGrid &&\n        (!newFullLayout._hasOnlyLargeSploms && oldFullLayout._hasOnlyLargeSploms)) {\n        // must first set scene to null in order to get garbage collected\n        oldFullLayout._splomGrid.destroy();\n        oldFullLayout._splomGrid = null;\n        delete oldFullLayout._splomGrid;\n    }\n\n    Cartesian.clean(newFullData, newFullLayout, oldFullData, oldFullLayout);\n}\n\nmodule.exports = {\n    name: SPLOM,\n    attr: Cartesian.attr,\n    attrRegex: Cartesian.attrRegex,\n    layoutAttributes: Cartesian.layoutAttributes,\n    supplyLayoutDefaults: Cartesian.supplyLayoutDefaults,\n    drawFramework: Cartesian.drawFramework,\n    plot: plot,\n    drag: drag,\n    updateGrid: updateGrid,\n    clean: clean,\n    updateFx: Cartesian.updateFx,\n    toSVG: Cartesian.toSVG,\n    reglPrecompiled: reglPrecompiled\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}