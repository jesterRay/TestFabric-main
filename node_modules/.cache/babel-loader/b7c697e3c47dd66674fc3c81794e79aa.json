{"ast":null,"code":"'use strict';\n\nvar d3Hierarchy = require('d3-hierarchy');\nvar isNumeric = require('fast-isnumeric');\nvar Lib = require('../../lib');\nvar makeColorScaleFn = require('../../components/colorscale').makeColorScaleFuncFromTrace;\nvar makePullColorFn = require('../pie/calc').makePullColorFn;\nvar generateExtendedColors = require('../pie/calc').generateExtendedColors;\nvar colorscaleCalc = require('../../components/colorscale').calc;\nvar ALMOST_EQUAL = require('../../constants/numerical').ALMOST_EQUAL;\nvar sunburstExtendedColorWays = {};\nvar treemapExtendedColorWays = {};\nvar icicleExtendedColorWays = {};\nexports.calc = function (gd, trace) {\n  var fullLayout = gd._fullLayout;\n  var ids = trace.ids;\n  var hasIds = Lib.isArrayOrTypedArray(ids);\n  var labels = trace.labels;\n  var parents = trace.parents;\n  var values = trace.values;\n  var hasValues = Lib.isArrayOrTypedArray(values);\n  var cd = [];\n  var parent2children = {};\n  var refs = {};\n  var addToLookup = function (parent, v) {\n    if (parent2children[parent]) parent2children[parent].push(v);else parent2children[parent] = [v];\n    refs[v] = 1;\n  };\n\n  // treat number `0` as valid\n  var isValidKey = function (k) {\n    return k || typeof k === 'number';\n  };\n  var isValidVal = function (i) {\n    return !hasValues || isNumeric(values[i]) && values[i] >= 0;\n  };\n  var len;\n  var isValid;\n  var getId;\n  if (hasIds) {\n    len = Math.min(ids.length, parents.length);\n    isValid = function (i) {\n      return isValidKey(ids[i]) && isValidVal(i);\n    };\n    getId = function (i) {\n      return String(ids[i]);\n    };\n  } else {\n    len = Math.min(labels.length, parents.length);\n    isValid = function (i) {\n      return isValidKey(labels[i]) && isValidVal(i);\n    };\n    // TODO We could allow some label / parent duplication\n    //\n    // From AJ:\n    //  It would work OK for one level\n    //  (multiple rows with the same name and different parents -\n    //  or even the same parent) but if that name is then used as a parent\n    //  which one is it?\n    getId = function (i) {\n      return String(labels[i]);\n    };\n  }\n  if (hasValues) len = Math.min(len, values.length);\n  for (var i = 0; i < len; i++) {\n    if (isValid(i)) {\n      var id = getId(i);\n      var pid = isValidKey(parents[i]) ? String(parents[i]) : '';\n      var cdi = {\n        i: i,\n        id: id,\n        pid: pid,\n        label: isValidKey(labels[i]) ? String(labels[i]) : ''\n      };\n      if (hasValues) cdi.v = +values[i];\n      cd.push(cdi);\n      addToLookup(pid, id);\n    }\n  }\n  if (!parent2children['']) {\n    var impliedRoots = [];\n    var k;\n    for (k in parent2children) {\n      if (!refs[k]) {\n        impliedRoots.push(k);\n      }\n    }\n\n    // if an `id` has no ref in the `parents` array,\n    // take it as being the root node\n\n    if (impliedRoots.length === 1) {\n      k = impliedRoots[0];\n      cd.unshift({\n        hasImpliedRoot: true,\n        id: k,\n        pid: '',\n        label: k\n      });\n    } else {\n      return Lib.warn(['Multiple implied roots, cannot build', trace.type, 'hierarchy of', trace.name + '.', 'These roots include:', impliedRoots.join(', ')].join(' '));\n    }\n  } else if (parent2children[''].length > 1) {\n    var dummyId = Lib.randstr();\n\n    // if multiple rows linked to the root node,\n    // add dummy \"root of roots\" node to make d3 build the hierarchy successfully\n\n    for (var j = 0; j < cd.length; j++) {\n      if (cd[j].pid === '') {\n        cd[j].pid = dummyId;\n      }\n    }\n    cd.unshift({\n      hasMultipleRoots: true,\n      id: dummyId,\n      pid: '',\n      label: ''\n    });\n  }\n\n  // TODO might be better to replace stratify() with our own algorithm\n  var root;\n  try {\n    root = d3Hierarchy.stratify().id(function (d) {\n      return d.id;\n    }).parentId(function (d) {\n      return d.pid;\n    })(cd);\n  } catch (e) {\n    return Lib.warn(['Failed to build', trace.type, 'hierarchy of', trace.name + '.', 'Error:', e.message].join(' '));\n  }\n  var hierarchy = d3Hierarchy.hierarchy(root);\n  var failed = false;\n  if (hasValues) {\n    switch (trace.branchvalues) {\n      case 'remainder':\n        hierarchy.sum(function (d) {\n          return d.data.v;\n        });\n        break;\n      case 'total':\n        hierarchy.each(function (d) {\n          var cdi = d.data.data;\n          var v = cdi.v;\n          if (d.children) {\n            var partialSum = d.children.reduce(function (a, c) {\n              return a + c.data.data.v;\n            }, 0);\n\n            // N.B. we must fill in `value` for generated sectors\n            // with the partialSum to compute the correct partition\n            if (cdi.hasImpliedRoot || cdi.hasMultipleRoots) {\n              v = partialSum;\n            }\n            if (v < partialSum * ALMOST_EQUAL) {\n              failed = true;\n              return Lib.warn(['Total value for node', d.data.data.id, 'of', trace.name, 'is smaller than the sum of its children.', '\\nparent value =', v, '\\nchildren sum =', partialSum].join(' '));\n            }\n          }\n          d.value = v;\n        });\n        break;\n    }\n  } else {\n    countDescendants(hierarchy, trace, {\n      branches: trace.count.indexOf('branches') !== -1,\n      leaves: trace.count.indexOf('leaves') !== -1\n    });\n  }\n  if (failed) return;\n\n  // TODO add way to sort by height also?\n  if (trace.sort) {\n    hierarchy.sort(function (a, b) {\n      return b.value - a.value;\n    });\n  }\n  var pullColor;\n  var scaleColor;\n  var colors = trace.marker.colors || [];\n  var hasColors = !!colors.length;\n  if (trace._hasColorscale) {\n    if (!hasColors) {\n      colors = hasValues ? trace.values : trace._values;\n    }\n    colorscaleCalc(gd, trace, {\n      vals: colors,\n      containerStr: 'marker',\n      cLetter: 'c'\n    });\n    scaleColor = makeColorScaleFn(trace.marker);\n  } else {\n    pullColor = makePullColorFn(fullLayout['_' + trace.type + 'colormap']);\n  }\n\n  // TODO keep track of 'root-children' (i.e. branch) for hover info etc.\n\n  hierarchy.each(function (d) {\n    var cdi = d.data.data;\n    // N.B. this mutates items in `cd`\n    cdi.color = trace._hasColorscale ? scaleColor(colors[cdi.i]) : pullColor(colors[cdi.i], cdi.id);\n  });\n  cd[0].hierarchy = hierarchy;\n  return cd;\n};\n\n/*\n * `calc` filled in (and collated) explicit colors.\n * Now we need to propagate these explicit colors to other traces,\n * and fill in default colors.\n * This is done after sorting, so we pick defaults\n * in the order slices will be displayed\n */\nexports._runCrossTraceCalc = function (desiredType, gd) {\n  var fullLayout = gd._fullLayout;\n  var calcdata = gd.calcdata;\n  var colorWay = fullLayout[desiredType + 'colorway'];\n  var colorMap = fullLayout['_' + desiredType + 'colormap'];\n  if (fullLayout['extend' + desiredType + 'colors']) {\n    colorWay = generateExtendedColors(colorWay, desiredType === 'icicle' ? icicleExtendedColorWays : desiredType === 'treemap' ? treemapExtendedColorWays : sunburstExtendedColorWays);\n  }\n  var dfltColorCount = 0;\n  var rootColor;\n  function pickColor(d) {\n    var cdi = d.data.data;\n    var id = cdi.id;\n    if (cdi.color === false) {\n      if (colorMap[id]) {\n        // have we seen this label and assigned a color to it in a previous trace?\n        cdi.color = colorMap[id];\n      } else if (d.parent) {\n        if (d.parent.parent) {\n          // from third-level on, inherit from parent\n          cdi.color = d.parent.data.data.color;\n        } else {\n          // pick new color for second level\n          colorMap[id] = cdi.color = colorWay[dfltColorCount % colorWay.length];\n          dfltColorCount++;\n        }\n      } else {\n        // set root color. no coloring by default.\n        cdi.color = rootColor;\n      }\n    }\n  }\n  for (var i = 0; i < calcdata.length; i++) {\n    var cd = calcdata[i];\n    var cd0 = cd[0];\n    if (cd0.trace.type === desiredType && cd0.hierarchy) {\n      rootColor = cd0.trace.root.color;\n      cd0.hierarchy.each(pickColor);\n    }\n  }\n};\nexports.crossTraceCalc = function (gd) {\n  return exports._runCrossTraceCalc('sunburst', gd);\n};\nfunction countDescendants(node, trace, opts) {\n  var nChild = 0;\n  var children = node.children;\n  if (children) {\n    var len = children.length;\n    for (var i = 0; i < len; i++) {\n      nChild += countDescendants(children[i], trace, opts);\n    }\n    if (opts.branches) nChild++; // count this branch\n  } else {\n    if (opts.leaves) nChild++; // count this leaf\n  }\n\n  // save to the node\n  node.value = node.data.data.value = nChild;\n\n  // save to the trace\n  if (!trace._values) trace._values = [];\n  trace._values[node.data.data.i] = nChild;\n  return nChild;\n}","map":{"version":3,"names":["d3Hierarchy","require","isNumeric","Lib","makeColorScaleFn","makeColorScaleFuncFromTrace","makePullColorFn","generateExtendedColors","colorscaleCalc","calc","ALMOST_EQUAL","sunburstExtendedColorWays","treemapExtendedColorWays","icicleExtendedColorWays","exports","gd","trace","fullLayout","_fullLayout","ids","hasIds","isArrayOrTypedArray","labels","parents","values","hasValues","cd","parent2children","refs","addToLookup","parent","v","push","isValidKey","k","isValidVal","i","len","isValid","getId","Math","min","length","String","id","pid","cdi","label","impliedRoots","unshift","hasImpliedRoot","warn","type","name","join","dummyId","randstr","j","hasMultipleRoots","root","stratify","d","parentId","e","message","hierarchy","failed","branchvalues","sum","data","each","children","partialSum","reduce","a","c","value","countDescendants","branches","count","indexOf","leaves","sort","b","pullColor","scaleColor","colors","marker","hasColors","_hasColorscale","_values","vals","containerStr","cLetter","color","_runCrossTraceCalc","desiredType","calcdata","colorWay","colorMap","dfltColorCount","rootColor","pickColor","cd0","crossTraceCalc","node","opts","nChild"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/sunburst/calc.js"],"sourcesContent":["'use strict';\n\nvar d3Hierarchy = require('d3-hierarchy');\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\nvar makeColorScaleFn = require('../../components/colorscale').makeColorScaleFuncFromTrace;\nvar makePullColorFn = require('../pie/calc').makePullColorFn;\nvar generateExtendedColors = require('../pie/calc').generateExtendedColors;\nvar colorscaleCalc = require('../../components/colorscale').calc;\n\nvar ALMOST_EQUAL = require('../../constants/numerical').ALMOST_EQUAL;\n\nvar sunburstExtendedColorWays = {};\nvar treemapExtendedColorWays = {};\nvar icicleExtendedColorWays = {};\n\nexports.calc = function(gd, trace) {\n    var fullLayout = gd._fullLayout;\n    var ids = trace.ids;\n    var hasIds = Lib.isArrayOrTypedArray(ids);\n    var labels = trace.labels;\n    var parents = trace.parents;\n    var values = trace.values;\n    var hasValues = Lib.isArrayOrTypedArray(values);\n    var cd = [];\n\n    var parent2children = {};\n    var refs = {};\n    var addToLookup = function(parent, v) {\n        if(parent2children[parent]) parent2children[parent].push(v);\n        else parent2children[parent] = [v];\n        refs[v] = 1;\n    };\n\n    // treat number `0` as valid\n    var isValidKey = function(k) {\n        return k || typeof k === 'number';\n    };\n\n    var isValidVal = function(i) {\n        return !hasValues || (isNumeric(values[i]) && values[i] >= 0);\n    };\n\n    var len;\n    var isValid;\n    var getId;\n\n    if(hasIds) {\n        len = Math.min(ids.length, parents.length);\n        isValid = function(i) { return isValidKey(ids[i]) && isValidVal(i); };\n        getId = function(i) { return String(ids[i]); };\n    } else {\n        len = Math.min(labels.length, parents.length);\n        isValid = function(i) { return isValidKey(labels[i]) && isValidVal(i); };\n        // TODO We could allow some label / parent duplication\n        //\n        // From AJ:\n        //  It would work OK for one level\n        //  (multiple rows with the same name and different parents -\n        //  or even the same parent) but if that name is then used as a parent\n        //  which one is it?\n        getId = function(i) { return String(labels[i]); };\n    }\n\n    if(hasValues) len = Math.min(len, values.length);\n\n    for(var i = 0; i < len; i++) {\n        if(isValid(i)) {\n            var id = getId(i);\n            var pid = isValidKey(parents[i]) ? String(parents[i]) : '';\n\n            var cdi = {\n                i: i,\n                id: id,\n                pid: pid,\n                label: isValidKey(labels[i]) ? String(labels[i]) : ''\n            };\n\n            if(hasValues) cdi.v = +values[i];\n            cd.push(cdi);\n            addToLookup(pid, id);\n        }\n    }\n\n    if(!parent2children['']) {\n        var impliedRoots = [];\n        var k;\n        for(k in parent2children) {\n            if(!refs[k]) {\n                impliedRoots.push(k);\n            }\n        }\n\n        // if an `id` has no ref in the `parents` array,\n        // take it as being the root node\n\n        if(impliedRoots.length === 1) {\n            k = impliedRoots[0];\n            cd.unshift({\n                hasImpliedRoot: true,\n                id: k,\n                pid: '',\n                label: k\n            });\n        } else {\n            return Lib.warn([\n                'Multiple implied roots, cannot build', trace.type, 'hierarchy of', trace.name + '.',\n                'These roots include:', impliedRoots.join(', ')\n            ].join(' '));\n        }\n    } else if(parent2children[''].length > 1) {\n        var dummyId = Lib.randstr();\n\n        // if multiple rows linked to the root node,\n        // add dummy \"root of roots\" node to make d3 build the hierarchy successfully\n\n        for(var j = 0; j < cd.length; j++) {\n            if(cd[j].pid === '') {\n                cd[j].pid = dummyId;\n            }\n        }\n\n        cd.unshift({\n            hasMultipleRoots: true,\n            id: dummyId,\n            pid: '',\n            label: ''\n        });\n    }\n\n    // TODO might be better to replace stratify() with our own algorithm\n    var root;\n    try {\n        root = d3Hierarchy.stratify()\n            .id(function(d) { return d.id; })\n            .parentId(function(d) { return d.pid; })(cd);\n    } catch(e) {\n        return Lib.warn([\n            'Failed to build', trace.type, 'hierarchy of', trace.name + '.',\n            'Error:', e.message\n        ].join(' '));\n    }\n\n    var hierarchy = d3Hierarchy.hierarchy(root);\n    var failed = false;\n\n    if(hasValues) {\n        switch(trace.branchvalues) {\n            case 'remainder':\n                hierarchy.sum(function(d) { return d.data.v; });\n                break;\n            case 'total':\n                hierarchy.each(function(d) {\n                    var cdi = d.data.data;\n                    var v = cdi.v;\n\n                    if(d.children) {\n                        var partialSum = d.children.reduce(function(a, c) {\n                            return a + c.data.data.v;\n                        }, 0);\n\n                        // N.B. we must fill in `value` for generated sectors\n                        // with the partialSum to compute the correct partition\n                        if(cdi.hasImpliedRoot || cdi.hasMultipleRoots) {\n                            v = partialSum;\n                        }\n\n                        if(v < partialSum * ALMOST_EQUAL) {\n                            failed = true;\n                            return Lib.warn([\n                                'Total value for node', d.data.data.id, 'of', trace.name,\n                                'is smaller than the sum of its children.',\n                                '\\nparent value =', v,\n                                '\\nchildren sum =', partialSum\n                            ].join(' '));\n                        }\n                    }\n\n                    d.value = v;\n                });\n                break;\n        }\n    } else {\n        countDescendants(hierarchy, trace, {\n            branches: trace.count.indexOf('branches') !== -1,\n            leaves: trace.count.indexOf('leaves') !== -1\n        });\n    }\n\n    if(failed) return;\n\n    // TODO add way to sort by height also?\n    if(trace.sort) {\n        hierarchy.sort(function(a, b) { return b.value - a.value; });\n    }\n\n    var pullColor;\n    var scaleColor;\n    var colors = trace.marker.colors || [];\n    var hasColors = !!colors.length;\n\n    if(trace._hasColorscale) {\n        if(!hasColors) {\n            colors = hasValues ? trace.values : trace._values;\n        }\n\n        colorscaleCalc(gd, trace, {\n            vals: colors,\n            containerStr: 'marker',\n            cLetter: 'c'\n        });\n\n        scaleColor = makeColorScaleFn(trace.marker);\n    } else {\n        pullColor = makePullColorFn(fullLayout['_' + trace.type + 'colormap']);\n    }\n\n    // TODO keep track of 'root-children' (i.e. branch) for hover info etc.\n\n    hierarchy.each(function(d) {\n        var cdi = d.data.data;\n        // N.B. this mutates items in `cd`\n        cdi.color = trace._hasColorscale ?\n            scaleColor(colors[cdi.i]) :\n            pullColor(colors[cdi.i], cdi.id);\n    });\n\n    cd[0].hierarchy = hierarchy;\n\n    return cd;\n};\n\n/*\n * `calc` filled in (and collated) explicit colors.\n * Now we need to propagate these explicit colors to other traces,\n * and fill in default colors.\n * This is done after sorting, so we pick defaults\n * in the order slices will be displayed\n */\nexports._runCrossTraceCalc = function(desiredType, gd) {\n    var fullLayout = gd._fullLayout;\n    var calcdata = gd.calcdata;\n    var colorWay = fullLayout[desiredType + 'colorway'];\n    var colorMap = fullLayout['_' + desiredType + 'colormap'];\n\n    if(fullLayout['extend' + desiredType + 'colors']) {\n        colorWay = generateExtendedColors(colorWay,\n            desiredType === 'icicle' ? icicleExtendedColorWays :\n            desiredType === 'treemap' ? treemapExtendedColorWays :\n                sunburstExtendedColorWays\n        );\n    }\n    var dfltColorCount = 0;\n\n    var rootColor;\n    function pickColor(d) {\n        var cdi = d.data.data;\n        var id = cdi.id;\n\n        if(cdi.color === false) {\n            if(colorMap[id]) {\n                // have we seen this label and assigned a color to it in a previous trace?\n                cdi.color = colorMap[id];\n            } else if(d.parent) {\n                if(d.parent.parent) {\n                    // from third-level on, inherit from parent\n                    cdi.color = d.parent.data.data.color;\n                } else {\n                    // pick new color for second level\n                    colorMap[id] = cdi.color = colorWay[dfltColorCount % colorWay.length];\n                    dfltColorCount++;\n                }\n            } else {\n                // set root color. no coloring by default.\n                cdi.color = rootColor;\n            }\n        }\n    }\n\n    for(var i = 0; i < calcdata.length; i++) {\n        var cd = calcdata[i];\n        var cd0 = cd[0];\n        if(cd0.trace.type === desiredType && cd0.hierarchy) {\n            rootColor = cd0.trace.root.color;\n            cd0.hierarchy.each(pickColor);\n        }\n    }\n};\n\nexports.crossTraceCalc = function(gd) {\n    return exports._runCrossTraceCalc('sunburst', gd);\n};\n\nfunction countDescendants(node, trace, opts) {\n    var nChild = 0;\n\n    var children = node.children;\n    if(children) {\n        var len = children.length;\n\n        for(var i = 0; i < len; i++) {\n            nChild += countDescendants(children[i], trace, opts);\n        }\n\n        if(opts.branches) nChild++; // count this branch\n    } else {\n        if(opts.leaves) nChild++; // count this leaf\n    }\n\n    // save to the node\n    node.value = node.data.data.value = nChild;\n\n    // save to the trace\n    if(!trace._values) trace._values = [];\n    trace._values[node.data.data.i] = nChild;\n\n    return nChild;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}