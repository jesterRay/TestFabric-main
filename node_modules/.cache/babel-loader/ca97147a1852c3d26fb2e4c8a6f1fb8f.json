{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar Lib = require('../../lib');\nvar Color = require('../../components/color');\nvar Colorscale = require('../../components/colorscale');\nvar BADNUM = require('../../constants/numerical').BADNUM;\nvar makeBlank = require('../../lib/geojson_utils').makeBlank;\nmodule.exports = function convert(calcTrace) {\n  var trace = calcTrace[0].trace;\n  var isVisible = trace.visible === true && trace._length !== 0;\n  var heatmap = {\n    layout: {\n      visibility: 'none'\n    },\n    paint: {}\n  };\n  var opts = trace._opts = {\n    heatmap: heatmap,\n    geojson: makeBlank()\n  };\n\n  // early return if not visible or placeholder\n  if (!isVisible) return opts;\n  var features = [];\n  var i;\n  var z = trace.z;\n  var radius = trace.radius;\n  var hasZ = Lib.isArrayOrTypedArray(z) && z.length;\n  var hasArrayRadius = Lib.isArrayOrTypedArray(radius);\n  for (i = 0; i < calcTrace.length; i++) {\n    var cdi = calcTrace[i];\n    var lonlat = cdi.lonlat;\n    if (lonlat[0] !== BADNUM) {\n      var props = {};\n      if (hasZ) {\n        var zi = cdi.z;\n        props.z = zi !== BADNUM ? zi : 0;\n      }\n      if (hasArrayRadius) {\n        props.r = isNumeric(radius[i]) && radius[i] > 0 ? +radius[i] : 0;\n      }\n      features.push({\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: lonlat\n        },\n        properties: props\n      });\n    }\n  }\n  var cOpts = Colorscale.extractOpts(trace);\n  var scl = cOpts.reversescale ? Colorscale.flipScale(cOpts.colorscale) : cOpts.colorscale;\n\n  // Add alpha channel to first colorscale step.\n  // If not, we would essentially color the entire map.\n  // See https://docs.mapbox.com/mapbox-gl-js/example/heatmap-layer/\n  var scl01 = scl[0][1];\n  var color0 = Color.opacity(scl01) < 1 ? scl01 : Color.addOpacity(scl01, 0);\n  var heatmapColor = ['interpolate', ['linear'], ['heatmap-density'], 0, color0];\n  for (i = 1; i < scl.length; i++) {\n    heatmapColor.push(scl[i][0], scl[i][1]);\n  }\n\n  // Those \"weights\" have to be in [0, 1], we can do this either:\n  // - as here using a mapbox-gl expression\n  // - or, scale the 'z' property in the feature loop\n  var zExp = ['interpolate', ['linear'], ['get', 'z'], cOpts.min, 0, cOpts.max, 1];\n  Lib.extendFlat(opts.heatmap.paint, {\n    'heatmap-weight': hasZ ? zExp : 1 / (cOpts.max - cOpts.min),\n    'heatmap-color': heatmapColor,\n    'heatmap-radius': hasArrayRadius ? {\n      type: 'identity',\n      property: 'r'\n    } : trace.radius,\n    'heatmap-opacity': trace.opacity\n  });\n  opts.geojson = {\n    type: 'FeatureCollection',\n    features: features\n  };\n  opts.heatmap.layout.visibility = 'visible';\n  return opts;\n};","map":{"version":3,"names":["isNumeric","require","Lib","Color","Colorscale","BADNUM","makeBlank","module","exports","convert","calcTrace","trace","isVisible","visible","_length","heatmap","layout","visibility","paint","opts","_opts","geojson","features","i","z","radius","hasZ","isArrayOrTypedArray","length","hasArrayRadius","cdi","lonlat","props","zi","r","push","type","geometry","coordinates","properties","cOpts","extractOpts","scl","reversescale","flipScale","colorscale","scl01","color0","opacity","addOpacity","heatmapColor","zExp","min","max","extendFlat","property"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/densitymapbox/convert.js"],"sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\nvar Color = require('../../components/color');\nvar Colorscale = require('../../components/colorscale');\n\nvar BADNUM = require('../../constants/numerical').BADNUM;\nvar makeBlank = require('../../lib/geojson_utils').makeBlank;\n\nmodule.exports = function convert(calcTrace) {\n    var trace = calcTrace[0].trace;\n    var isVisible = (trace.visible === true && trace._length !== 0);\n\n    var heatmap = {\n        layout: {visibility: 'none'},\n        paint: {}\n    };\n\n    var opts = trace._opts = {\n        heatmap: heatmap,\n        geojson: makeBlank()\n    };\n\n    // early return if not visible or placeholder\n    if(!isVisible) return opts;\n\n    var features = [];\n    var i;\n\n    var z = trace.z;\n    var radius = trace.radius;\n    var hasZ = Lib.isArrayOrTypedArray(z) && z.length;\n    var hasArrayRadius = Lib.isArrayOrTypedArray(radius);\n\n    for(i = 0; i < calcTrace.length; i++) {\n        var cdi = calcTrace[i];\n        var lonlat = cdi.lonlat;\n\n        if(lonlat[0] !== BADNUM) {\n            var props = {};\n\n            if(hasZ) {\n                var zi = cdi.z;\n                props.z = zi !== BADNUM ? zi : 0;\n            }\n            if(hasArrayRadius) {\n                props.r = (isNumeric(radius[i]) && radius[i] > 0) ? +radius[i] : 0;\n            }\n\n            features.push({\n                type: 'Feature',\n                geometry: {type: 'Point', coordinates: lonlat},\n                properties: props\n            });\n        }\n    }\n\n    var cOpts = Colorscale.extractOpts(trace);\n    var scl = cOpts.reversescale ?\n        Colorscale.flipScale(cOpts.colorscale) :\n        cOpts.colorscale;\n\n    // Add alpha channel to first colorscale step.\n    // If not, we would essentially color the entire map.\n    // See https://docs.mapbox.com/mapbox-gl-js/example/heatmap-layer/\n    var scl01 = scl[0][1];\n    var color0 = Color.opacity(scl01) < 1 ? scl01 : Color.addOpacity(scl01, 0);\n\n    var heatmapColor = [\n        'interpolate', ['linear'],\n        ['heatmap-density'],\n        0, color0\n    ];\n    for(i = 1; i < scl.length; i++) {\n        heatmapColor.push(scl[i][0], scl[i][1]);\n    }\n\n    // Those \"weights\" have to be in [0, 1], we can do this either:\n    // - as here using a mapbox-gl expression\n    // - or, scale the 'z' property in the feature loop\n    var zExp = [\n        'interpolate', ['linear'],\n        ['get', 'z'],\n        cOpts.min, 0,\n        cOpts.max, 1\n    ];\n\n    Lib.extendFlat(opts.heatmap.paint, {\n        'heatmap-weight': hasZ ? zExp : 1 / (cOpts.max - cOpts.min),\n\n        'heatmap-color': heatmapColor,\n\n        'heatmap-radius': hasArrayRadius ?\n            {type: 'identity', property: 'r'} :\n            trace.radius,\n\n        'heatmap-opacity': trace.opacity\n    });\n\n    opts.geojson = {type: 'FeatureCollection', features: features};\n    opts.heatmap.layout.visibility = 'visible';\n\n    return opts;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}