{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar domparser_1 = __importDefault(require(\"./domparser\"));\nvar utilities_1 = require(\"./utilities\");\nvar DIRECTIVE_REGEX = /<(![a-zA-Z\\s]+)>/; // e.g., <!doctype html>\n/**\n * Parses HTML string to DOM nodes in browser.\n *\n * @param html - HTML markup.\n * @returns - DOM elements.\n */\nfunction HTMLDOMParser(html) {\n  if (typeof html !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n  if (!html) {\n    return [];\n  }\n  // match directive\n  var match = html.match(DIRECTIVE_REGEX);\n  var directive = match ? match[1] : undefined;\n  return (0, utilities_1.formatDOM)((0, domparser_1.default)(html), null, directive);\n}\nexports.default = HTMLDOMParser;","map":{"version":3,"sources":["../../src/client/html-to-dom.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,IAAA,WAAA,GAAA,eAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAEA,IAAM,eAAe,GAAG,kBAAkB,CAAC,CAAC;AAE5C;;;;;AAKG;AACH,SAAwB,aAAa,CAAC,IAAY,EAAA;EAChD,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;IAC5B,MAAM,IAAI,SAAS,CAAC,iCAAiC,CAAC;EACvD;EAED,IAAI,CAAC,IAAI,EAAE;IACT,OAAO,EAAE;EACV;EAED;EACA,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;EACzC,IAAM,SAAS,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,SAAS;EAE9C,OAAO,CAAA,CAAA,EAAA,WAAA,CAAA,SAAS,EAAC,CAAA,CAAA,EAAA,WAAA,CAAA,OAAS,EAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC;AACpD;AAdA,OAAA,CAAA,OAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar domparser_1 = __importDefault(require(\"./domparser\"));\nvar utilities_1 = require(\"./utilities\");\nvar DIRECTIVE_REGEX = /<(![a-zA-Z\\s]+)>/; // e.g., <!doctype html>\n/**\n * Parses HTML string to DOM nodes in browser.\n *\n * @param html - HTML markup.\n * @returns - DOM elements.\n */\nfunction HTMLDOMParser(html) {\n    if (typeof html !== 'string') {\n        throw new TypeError('First argument must be a string');\n    }\n    if (!html) {\n        return [];\n    }\n    // match directive\n    var match = html.match(DIRECTIVE_REGEX);\n    var directive = match ? match[1] : undefined;\n    return (0, utilities_1.formatDOM)((0, domparser_1.default)(html), null, directive);\n}\nexports.default = HTMLDOMParser;\n//# sourceMappingURL=html-to-dom.js.map"]},"metadata":{},"sourceType":"script"}