{"ast":null,"code":"'use strict';\n\nvar docs = require('../constants/docs');\nvar FORMAT_LINK = docs.FORMAT_LINK;\nvar DATE_FORMAT_LINK = docs.DATE_FORMAT_LINK;\nfunction templateFormatStringDescription(opts) {\n  var supportOther = opts && opts.supportOther;\n  return ['Variables are inserted using %{variable},', 'for example \"y: %{y}\"' + (supportOther ? ' as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown.' : '.'), 'Numbers are formatted using d3-format\\'s syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\".', FORMAT_LINK, 'for details on the formatting syntax.', 'Dates are formatted using d3-time-format\\'s syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\".', DATE_FORMAT_LINK, 'for details on the date formatting syntax.'].join(' ');\n}\nfunction shapeTemplateFormatStringDescription() {\n  return ['Variables are inserted using %{variable},', 'for example \"x0: %{x0}\".', 'Numbers are formatted using d3-format\\'s syntax %{variable:d3-format}, for example \"Price: %{x0:$.2f}\". See', FORMAT_LINK, 'for details on the formatting syntax.', 'Dates are formatted using d3-time-format\\'s syntax %{variable|d3-time-format}, for example \"Day: %{x0|%m %b %Y}\". See', DATE_FORMAT_LINK, 'for details on the date formatting syntax.', 'A single multiplication or division operation may be applied to numeric variables, and combined with', 'd3 number formatting, for example \"Length in cm: %{x0*2.54}\", \"%{slope*60:.1f} meters per second.\"', 'For log axes, variable values are given in log units.', 'For date axes, x/y coordinate variables and center variables use datetimes, while all other variable values use values in ms.'].join(' ');\n}\nfunction describeVariables(extra) {\n  var descPart = extra.description ? ' ' + extra.description : '';\n  var keys = extra.keys || [];\n  if (keys.length > 0) {\n    var quotedKeys = [];\n    for (var i = 0; i < keys.length; i++) {\n      quotedKeys[i] = '`' + keys[i] + '`';\n    }\n    descPart = descPart + 'Finally, the template string has access to ';\n    if (keys.length === 1) {\n      descPart = descPart + 'variable ' + quotedKeys[0];\n    } else {\n      descPart = descPart + 'variables ' + quotedKeys.slice(0, -1).join(', ') + ' and ' + quotedKeys.slice(-1) + '.';\n    }\n  }\n  return descPart;\n}\nexports.hovertemplateAttrs = function (opts, extra) {\n  opts = opts || {};\n  extra = extra || {};\n  var descPart = describeVariables(extra);\n  var hovertemplate = {\n    valType: 'string',\n    dflt: '',\n    editType: opts.editType || 'none',\n    description: ['Template string used for rendering the information that appear on hover box.', 'Note that this will override `hoverinfo`.', templateFormatStringDescription({\n      supportOther: true\n    }), 'The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data.', 'Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.', descPart, 'Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\".', 'To hide the secondary box completely, use an empty tag `<extra></extra>`.'].join(' ')\n  };\n  if (opts.arrayOk !== false) {\n    hovertemplate.arrayOk = true;\n  }\n  return hovertemplate;\n};\nexports.texttemplateAttrs = function (opts, extra) {\n  opts = opts || {};\n  extra = extra || {};\n  var descPart = describeVariables(extra);\n  var texttemplate = {\n    valType: 'string',\n    dflt: '',\n    editType: opts.editType || 'calc',\n    description: ['Template string used for rendering the information text that appear on points.', 'Note that this will override `textinfo`.', templateFormatStringDescription(), 'Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.', descPart].join(' ')\n  };\n  if (opts.arrayOk !== false) {\n    texttemplate.arrayOk = true;\n  }\n  return texttemplate;\n};\nexports.shapeTexttemplateAttrs = function (opts, extra) {\n  opts = opts || {};\n  extra = extra || {};\n  var newStr = opts.newshape ? 'new ' : '';\n  var descPart = describeVariables(extra);\n  var texttemplate = {\n    valType: 'string',\n    dflt: '',\n    editType: opts.editType || 'arraydraw',\n    description: ['Template string used for rendering the ' + newStr + 'shape\\'s label.', 'Note that this will override `text`.', shapeTemplateFormatStringDescription(), descPart].join(' ')\n  };\n  return texttemplate;\n};","map":{"version":3,"names":["docs","require","FORMAT_LINK","DATE_FORMAT_LINK","templateFormatStringDescription","opts","supportOther","join","shapeTemplateFormatStringDescription","describeVariables","extra","descPart","description","keys","length","quotedKeys","i","slice","exports","hovertemplateAttrs","hovertemplate","valType","dflt","editType","arrayOk","texttemplateAttrs","texttemplate","shapeTexttemplateAttrs","newStr","newshape"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/plots/template_attributes.js"],"sourcesContent":["'use strict';\n\nvar docs = require('../constants/docs');\nvar FORMAT_LINK = docs.FORMAT_LINK;\nvar DATE_FORMAT_LINK = docs.DATE_FORMAT_LINK;\n\nfunction templateFormatStringDescription(opts) {\n    var supportOther = opts && opts.supportOther;\n\n    return [\n        'Variables are inserted using %{variable},',\n        'for example \"y: %{y}\"' + (\n            supportOther ?\n                ' as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown.' :\n                '.'\n        ),\n        'Numbers are formatted using d3-format\\'s syntax %{variable:d3-format}, for example \"Price: %{y:$.2f}\".',\n        FORMAT_LINK,\n        'for details on the formatting syntax.',\n        'Dates are formatted using d3-time-format\\'s syntax %{variable|d3-time-format}, for example \"Day: %{2019-01-01|%A}\".',\n        DATE_FORMAT_LINK,\n        'for details on the date formatting syntax.'\n    ].join(' ');\n}\n\nfunction shapeTemplateFormatStringDescription() {\n    return [\n        'Variables are inserted using %{variable},',\n        'for example \"x0: %{x0}\".',\n        'Numbers are formatted using d3-format\\'s syntax %{variable:d3-format}, for example \"Price: %{x0:$.2f}\". See',\n        FORMAT_LINK,\n        'for details on the formatting syntax.',\n        'Dates are formatted using d3-time-format\\'s syntax %{variable|d3-time-format}, for example \"Day: %{x0|%m %b %Y}\". See',\n        DATE_FORMAT_LINK,\n        'for details on the date formatting syntax.',\n        'A single multiplication or division operation may be applied to numeric variables, and combined with',\n        'd3 number formatting, for example \"Length in cm: %{x0*2.54}\", \"%{slope*60:.1f} meters per second.\"',\n        'For log axes, variable values are given in log units.',\n        'For date axes, x/y coordinate variables and center variables use datetimes, while all other variable values use values in ms.',\n    ].join(' ');\n}\n\nfunction describeVariables(extra) {\n    var descPart = extra.description ? ' ' + extra.description : '';\n    var keys = extra.keys || [];\n    if(keys.length > 0) {\n        var quotedKeys = [];\n        for(var i = 0; i < keys.length; i++) {\n            quotedKeys[i] = '`' + keys[i] + '`';\n        }\n        descPart = descPart + 'Finally, the template string has access to ';\n        if(keys.length === 1) {\n            descPart = descPart + 'variable ' + quotedKeys[0];\n        } else {\n            descPart = descPart + 'variables ' + quotedKeys.slice(0, -1).join(', ') + ' and ' + quotedKeys.slice(-1) + '.';\n        }\n    }\n    return descPart;\n}\n\nexports.hovertemplateAttrs = function(opts, extra) {\n    opts = opts || {};\n    extra = extra || {};\n\n    var descPart = describeVariables(extra);\n\n    var hovertemplate = {\n        valType: 'string',\n        dflt: '',\n        editType: opts.editType || 'none',\n        description: [\n            'Template string used for rendering the information that appear on hover box.',\n            'Note that this will override `hoverinfo`.',\n            templateFormatStringDescription({supportOther: true}),\n            'The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data.',\n            'Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.',\n            descPart,\n            'Anything contained in tag `<extra>` is displayed in the secondary box, for example \"<extra>{fullData.name}</extra>\".',\n            'To hide the secondary box completely, use an empty tag `<extra></extra>`.'\n        ].join(' ')\n    };\n\n    if(opts.arrayOk !== false) {\n        hovertemplate.arrayOk = true;\n    }\n\n    return hovertemplate;\n};\n\nexports.texttemplateAttrs = function(opts, extra) {\n    opts = opts || {};\n    extra = extra || {};\n\n    var descPart = describeVariables(extra);\n\n    var texttemplate = {\n        valType: 'string',\n        dflt: '',\n        editType: opts.editType || 'calc',\n        description: [\n            'Template string used for rendering the information text that appear on points.',\n            'Note that this will override `textinfo`.',\n            templateFormatStringDescription(),\n            'Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.',\n            descPart\n        ].join(' ')\n    };\n\n    if(opts.arrayOk !== false) {\n        texttemplate.arrayOk = true;\n    }\n    return texttemplate;\n};\n\n\nexports.shapeTexttemplateAttrs = function(opts, extra) {\n    opts = opts || {};\n    extra = extra || {};\n\n    var newStr = opts.newshape ? 'new ' : '';\n\n    var descPart = describeVariables(extra);\n\n    var texttemplate = {\n        valType: 'string',\n        dflt: '',\n        editType: opts.editType || 'arraydraw',\n        description: [\n            'Template string used for rendering the ' + newStr + 'shape\\'s label.',\n            'Note that this will override `text`.',\n            shapeTemplateFormatStringDescription(),\n            descPart,\n        ].join(' ')\n    };\n    return texttemplate;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}