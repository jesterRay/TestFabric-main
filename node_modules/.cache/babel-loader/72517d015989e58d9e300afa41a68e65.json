{"ast":null,"code":"// Utils used to parse miaf-based files (avif/heic/heif)\n//\n//  - image collections are not supported (only last size is reported)\n//  - images with metadata encoded after image data are not supported\n//  - images without any `ispe` box are not supported\n//\n\n/* eslint-disable consistent-return */\n\n'use strict';\n\nvar str2arr = require('../common').str2arr;\nvar sliceEq = require('../common').sliceEq;\nvar readUInt32BE = require('../common').readUInt32BE;\nvar miaf = require('../miaf_utils');\nvar exif = require('../exif_utils');\nvar SIG_FTYP = str2arr('ftyp');\nmodule.exports = function (data) {\n  // ISO media file (avif format) starts with ftyp box:\n  // 0000 0020 6674 7970 6176 6966\n  //  (length)  f t  y p  a v  i f\n  //\n  if (!sliceEq(data, 4, SIG_FTYP)) return;\n  var firstBox = miaf.unbox(data, 0);\n  if (!firstBox) return;\n  var fileType = miaf.getMimeType(firstBox.data);\n  if (!fileType) return;\n  var meta,\n    offset = firstBox.end;\n  for (;;) {\n    var box = miaf.unbox(data, offset);\n    if (!box) break;\n    offset = box.end;\n\n    // mdat block SHOULD be last (but not strictly required),\n    // so it's unlikely that metadata is after it\n    if (box.boxtype === 'mdat') return;\n    if (box.boxtype === 'meta') {\n      meta = box.data;\n      break;\n    }\n  }\n  if (!meta) return;\n  var imgSize = miaf.readSizeFromMeta(meta);\n  if (!imgSize) return;\n  var result = {\n    width: imgSize.width,\n    height: imgSize.height,\n    type: fileType.type,\n    mime: fileType.mime,\n    wUnits: 'px',\n    hUnits: 'px'\n  };\n  if (imgSize.variants.length > 1) {\n    result.variants = imgSize.variants;\n  }\n  if (imgSize.orientation) {\n    result.orientation = imgSize.orientation;\n  }\n  if (imgSize.exif_location && imgSize.exif_location.offset + imgSize.exif_location.length <= data.length) {\n    var sig_offset = readUInt32BE(data, imgSize.exif_location.offset);\n    var exif_data = data.slice(imgSize.exif_location.offset + sig_offset + 4, imgSize.exif_location.offset + imgSize.exif_location.length);\n    var orientation = exif.get_orientation(exif_data);\n    if (orientation > 0) result.orientation = orientation;\n  }\n  return result;\n};","map":{"version":3,"names":["str2arr","require","sliceEq","readUInt32BE","miaf","exif","SIG_FTYP","module","exports","data","firstBox","unbox","fileType","getMimeType","meta","offset","end","box","boxtype","imgSize","readSizeFromMeta","result","width","height","type","mime","wUnits","hUnits","variants","length","orientation","exif_location","sig_offset","exif_data","slice","get_orientation"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/probe-image-size/lib/parse_sync/avif.js"],"sourcesContent":["// Utils used to parse miaf-based files (avif/heic/heif)\n//\n//  - image collections are not supported (only last size is reported)\n//  - images with metadata encoded after image data are not supported\n//  - images without any `ispe` box are not supported\n//\n\n/* eslint-disable consistent-return */\n\n'use strict';\n\n\nvar str2arr      = require('../common').str2arr;\nvar sliceEq      = require('../common').sliceEq;\nvar readUInt32BE = require('../common').readUInt32BE;\nvar miaf         = require('../miaf_utils');\nvar exif         = require('../exif_utils');\n\nvar SIG_FTYP = str2arr('ftyp');\n\n\nmodule.exports = function (data) {\n  // ISO media file (avif format) starts with ftyp box:\n  // 0000 0020 6674 7970 6176 6966\n  //  (length)  f t  y p  a v  i f\n  //\n  if (!sliceEq(data, 4, SIG_FTYP)) return;\n\n  var firstBox = miaf.unbox(data, 0);\n  if (!firstBox) return;\n\n  var fileType = miaf.getMimeType(firstBox.data);\n  if (!fileType) return;\n\n  var meta, offset = firstBox.end;\n\n  for (;;) {\n    var box = miaf.unbox(data, offset);\n    if (!box) break;\n    offset = box.end;\n\n    // mdat block SHOULD be last (but not strictly required),\n    // so it's unlikely that metadata is after it\n    if (box.boxtype === 'mdat') return;\n    if (box.boxtype === 'meta') {\n      meta = box.data;\n      break;\n    }\n  }\n\n  if (!meta) return;\n\n  var imgSize = miaf.readSizeFromMeta(meta);\n\n  if (!imgSize) return;\n\n  var result = {\n    width:    imgSize.width,\n    height:   imgSize.height,\n    type:     fileType.type,\n    mime:     fileType.mime,\n    wUnits:   'px',\n    hUnits:   'px'\n  };\n\n  if (imgSize.variants.length > 1) {\n    result.variants = imgSize.variants;\n  }\n\n  if (imgSize.orientation) {\n    result.orientation = imgSize.orientation;\n  }\n\n  if (imgSize.exif_location &&\n      imgSize.exif_location.offset + imgSize.exif_location.length <= data.length) {\n\n    var sig_offset = readUInt32BE(data, imgSize.exif_location.offset);\n    var exif_data = data.slice(\n      imgSize.exif_location.offset + sig_offset + 4,\n      imgSize.exif_location.offset + imgSize.exif_location.length);\n\n    var orientation = exif.get_orientation(exif_data);\n\n    if (orientation > 0) result.orientation = orientation;\n  }\n\n  return result;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,YAAY;;AAGZ,IAAIA,OAAO,GAAQC,OAAO,CAAC,WAAW,CAAC,CAACD,OAAO;AAC/C,IAAIE,OAAO,GAAQD,OAAO,CAAC,WAAW,CAAC,CAACC,OAAO;AAC/C,IAAIC,YAAY,GAAGF,OAAO,CAAC,WAAW,CAAC,CAACE,YAAY;AACpD,IAAIC,IAAI,GAAWH,OAAO,CAAC,eAAe,CAAC;AAC3C,IAAII,IAAI,GAAWJ,OAAO,CAAC,eAAe,CAAC;AAE3C,IAAIK,QAAQ,GAAGN,OAAO,CAAC,MAAM,CAAC;AAG9BO,MAAM,CAACC,OAAO,GAAG,UAAUC,IAAI,EAAE;EAC/B;EACA;EACA;EACA;EACA,IAAI,CAACP,OAAO,CAACO,IAAI,EAAE,CAAC,EAAEH,QAAQ,CAAC,EAAE;EAEjC,IAAII,QAAQ,GAAGN,IAAI,CAACO,KAAK,CAACF,IAAI,EAAE,CAAC,CAAC;EAClC,IAAI,CAACC,QAAQ,EAAE;EAEf,IAAIE,QAAQ,GAAGR,IAAI,CAACS,WAAW,CAACH,QAAQ,CAACD,IAAI,CAAC;EAC9C,IAAI,CAACG,QAAQ,EAAE;EAEf,IAAIE,IAAI;IAAEC,MAAM,GAAGL,QAAQ,CAACM,GAAG;EAE/B,SAAS;IACP,IAAIC,GAAG,GAAGb,IAAI,CAACO,KAAK,CAACF,IAAI,EAAEM,MAAM,CAAC;IAClC,IAAI,CAACE,GAAG,EAAE;IACVF,MAAM,GAAGE,GAAG,CAACD,GAAG;;IAEhB;IACA;IACA,IAAIC,GAAG,CAACC,OAAO,KAAK,MAAM,EAAE;IAC5B,IAAID,GAAG,CAACC,OAAO,KAAK,MAAM,EAAE;MAC1BJ,IAAI,GAAGG,GAAG,CAACR,IAAI;MACf;IACF;EACF;EAEA,IAAI,CAACK,IAAI,EAAE;EAEX,IAAIK,OAAO,GAAGf,IAAI,CAACgB,gBAAgB,CAACN,IAAI,CAAC;EAEzC,IAAI,CAACK,OAAO,EAAE;EAEd,IAAIE,MAAM,GAAG;IACXC,KAAK,EAAKH,OAAO,CAACG,KAAK;IACvBC,MAAM,EAAIJ,OAAO,CAACI,MAAM;IACxBC,IAAI,EAAMZ,QAAQ,CAACY,IAAI;IACvBC,IAAI,EAAMb,QAAQ,CAACa,IAAI;IACvBC,MAAM,EAAI,IAAI;IACdC,MAAM,EAAI;EACZ,CAAC;EAED,IAAIR,OAAO,CAACS,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IAC/BR,MAAM,CAACO,QAAQ,GAAGT,OAAO,CAACS,QAAQ;EACpC;EAEA,IAAIT,OAAO,CAACW,WAAW,EAAE;IACvBT,MAAM,CAACS,WAAW,GAAGX,OAAO,CAACW,WAAW;EAC1C;EAEA,IAAIX,OAAO,CAACY,aAAa,IACrBZ,OAAO,CAACY,aAAa,CAAChB,MAAM,GAAGI,OAAO,CAACY,aAAa,CAACF,MAAM,IAAIpB,IAAI,CAACoB,MAAM,EAAE;IAE9E,IAAIG,UAAU,GAAG7B,YAAY,CAACM,IAAI,EAAEU,OAAO,CAACY,aAAa,CAAChB,MAAM,CAAC;IACjE,IAAIkB,SAAS,GAAGxB,IAAI,CAACyB,KAAK,CACxBf,OAAO,CAACY,aAAa,CAAChB,MAAM,GAAGiB,UAAU,GAAG,CAAC,EAC7Cb,OAAO,CAACY,aAAa,CAAChB,MAAM,GAAGI,OAAO,CAACY,aAAa,CAACF,MAAM,CAAC;IAE9D,IAAIC,WAAW,GAAGzB,IAAI,CAAC8B,eAAe,CAACF,SAAS,CAAC;IAEjD,IAAIH,WAAW,GAAG,CAAC,EAAET,MAAM,CAACS,WAAW,GAAGA,WAAW;EACvD;EAEA,OAAOT,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}