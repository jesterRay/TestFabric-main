{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar plotApi = require('./plot_api');\nvar plots = require('../plots/plots');\nvar Lib = require('../lib');\nvar helpers = require('../snapshot/helpers');\nvar toSVG = require('../snapshot/tosvg');\nvar svgToImg = require('../snapshot/svgtoimg');\nvar version = require('../version').version;\nvar attrs = {\n  format: {\n    valType: 'enumerated',\n    values: ['png', 'jpeg', 'webp', 'svg', 'full-json'],\n    dflt: 'png',\n    description: 'Sets the format of exported image.'\n  },\n  width: {\n    valType: 'number',\n    min: 1,\n    description: ['Sets the exported image width.', 'Defaults to the value found in `layout.width`', 'If set to *null*, the exported image width will match the current graph width.'].join(' ')\n  },\n  height: {\n    valType: 'number',\n    min: 1,\n    description: ['Sets the exported image height.', 'Defaults to the value found in `layout.height`', 'If set to *null*, the exported image height will match the current graph height.'].join(' ')\n  },\n  scale: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    description: ['Sets a scaling for the generated image.', 'If set, all features of a graphs (e.g. text, line width)', 'are scaled, unlike simply setting', 'a bigger *width* and *height*.'].join(' ')\n  },\n  setBackground: {\n    valType: 'any',\n    dflt: false,\n    description: ['Sets the image background mode.', 'By default, the image background is determined by `layout.paper_bgcolor`,', 'the *transparent* mode.', 'One might consider setting `setBackground` to *opaque*', 'when exporting a *jpeg* image as JPEGs do not support opacity.'].join(' ')\n  },\n  imageDataOnly: {\n    valType: 'boolean',\n    dflt: false,\n    description: ['Determines whether or not the return value is prefixed by', 'the image format\\'s corresponding \\'data:image;\\' spec.'].join(' ')\n  }\n};\n\n/** Plotly.toImage\n *\n * @param {object | string | HTML div} gd\n *   can either be a data/layout/config object\n *   or an existing graph <div>\n *   or an id to an existing graph <div>\n * @param {object} opts (see above)\n * @return {promise}\n */\nfunction toImage(gd, opts) {\n  opts = opts || {};\n  var data;\n  var layout;\n  var config;\n  var fullLayout;\n  if (Lib.isPlainObject(gd)) {\n    data = gd.data || [];\n    layout = gd.layout || {};\n    config = gd.config || {};\n    fullLayout = {};\n  } else {\n    gd = Lib.getGraphDiv(gd);\n    data = Lib.extendDeep([], gd.data);\n    layout = Lib.extendDeep({}, gd.layout);\n    config = gd._context;\n    fullLayout = gd._fullLayout || {};\n  }\n  function isImpliedOrValid(attr) {\n    return !(attr in opts) || Lib.validate(opts[attr], attrs[attr]);\n  }\n  if (!isImpliedOrValid('width') && opts.width !== null || !isImpliedOrValid('height') && opts.height !== null) {\n    throw new Error('Height and width should be pixel values.');\n  }\n  if (!isImpliedOrValid('format')) {\n    throw new Error('Export format is not ' + Lib.join2(attrs.format.values, ', ', ' or ') + '.');\n  }\n  var fullOpts = {};\n  function coerce(attr, dflt) {\n    return Lib.coerce(opts, fullOpts, attrs, attr, dflt);\n  }\n  var format = coerce('format');\n  var width = coerce('width');\n  var height = coerce('height');\n  var scale = coerce('scale');\n  var setBackground = coerce('setBackground');\n  var imageDataOnly = coerce('imageDataOnly');\n\n  // put the cloned div somewhere off screen before attaching to DOM\n  var clonedGd = document.createElement('div');\n  clonedGd.style.position = 'absolute';\n  clonedGd.style.left = '-5000px';\n  document.body.appendChild(clonedGd);\n\n  // extend layout with image options\n  var layoutImage = Lib.extendFlat({}, layout);\n  if (width) {\n    layoutImage.width = width;\n  } else if (opts.width === null && isNumeric(fullLayout.width)) {\n    layoutImage.width = fullLayout.width;\n  }\n  if (height) {\n    layoutImage.height = height;\n  } else if (opts.height === null && isNumeric(fullLayout.height)) {\n    layoutImage.height = fullLayout.height;\n  }\n\n  // extend config for static plot\n  var configImage = Lib.extendFlat({}, config, {\n    _exportedPlot: true,\n    staticPlot: true,\n    setBackground: setBackground\n  });\n  var redrawFunc = helpers.getRedrawFunc(clonedGd);\n  function wait() {\n    return new Promise(function (resolve) {\n      setTimeout(resolve, helpers.getDelay(clonedGd._fullLayout));\n    });\n  }\n  function convert() {\n    return new Promise(function (resolve, reject) {\n      var svg = toSVG(clonedGd, format, scale);\n      var width = clonedGd._fullLayout.width;\n      var height = clonedGd._fullLayout.height;\n      function cleanup() {\n        plotApi.purge(clonedGd);\n        document.body.removeChild(clonedGd);\n      }\n      if (format === 'full-json') {\n        var json = plots.graphJson(clonedGd, false, 'keepdata', 'object', true, true);\n        json.version = version;\n        json = JSON.stringify(json);\n        cleanup();\n        if (imageDataOnly) {\n          return resolve(json);\n        } else {\n          return resolve(helpers.encodeJSON(json));\n        }\n      }\n      cleanup();\n      if (format === 'svg') {\n        if (imageDataOnly) {\n          return resolve(svg);\n        } else {\n          return resolve(helpers.encodeSVG(svg));\n        }\n      }\n      var canvas = document.createElement('canvas');\n      canvas.id = Lib.randstr();\n      svgToImg({\n        format: format,\n        width: width,\n        height: height,\n        scale: scale,\n        canvas: canvas,\n        svg: svg,\n        // ask svgToImg to return a Promise\n        //  rather than EventEmitter\n        //  leave EventEmitter for backward\n        //  compatibility\n        promise: true\n      }).then(resolve).catch(reject);\n    });\n  }\n  function urlToImageData(url) {\n    if (imageDataOnly) {\n      return url.replace(helpers.IMAGE_URL_PREFIX, '');\n    } else {\n      return url;\n    }\n  }\n  return new Promise(function (resolve, reject) {\n    plotApi.newPlot(clonedGd, data, layoutImage, configImage).then(redrawFunc).then(wait).then(convert).then(function (url) {\n      resolve(urlToImageData(url));\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\nmodule.exports = toImage;","map":{"version":3,"names":["isNumeric","require","plotApi","plots","Lib","helpers","toSVG","svgToImg","version","attrs","format","valType","values","dflt","description","width","min","join","height","scale","setBackground","imageDataOnly","toImage","gd","opts","data","layout","config","fullLayout","isPlainObject","getGraphDiv","extendDeep","_context","_fullLayout","isImpliedOrValid","attr","validate","Error","join2","fullOpts","coerce","clonedGd","document","createElement","style","position","left","body","appendChild","layoutImage","extendFlat","configImage","_exportedPlot","staticPlot","redrawFunc","getRedrawFunc","wait","Promise","resolve","setTimeout","getDelay","convert","reject","svg","cleanup","purge","removeChild","json","graphJson","JSON","stringify","encodeJSON","encodeSVG","canvas","id","randstr","promise","then","catch","urlToImageData","url","replace","IMAGE_URL_PREFIX","newPlot","err","module","exports"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/plot_api/to_image.js"],"sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar plotApi = require('./plot_api');\nvar plots = require('../plots/plots');\nvar Lib = require('../lib');\n\nvar helpers = require('../snapshot/helpers');\nvar toSVG = require('../snapshot/tosvg');\nvar svgToImg = require('../snapshot/svgtoimg');\nvar version = require('../version').version;\n\nvar attrs = {\n    format: {\n        valType: 'enumerated',\n        values: ['png', 'jpeg', 'webp', 'svg', 'full-json'],\n        dflt: 'png',\n        description: 'Sets the format of exported image.'\n    },\n    width: {\n        valType: 'number',\n        min: 1,\n        description: [\n            'Sets the exported image width.',\n            'Defaults to the value found in `layout.width`',\n            'If set to *null*, the exported image width will match the current graph width.'\n        ].join(' ')\n    },\n    height: {\n        valType: 'number',\n        min: 1,\n        description: [\n            'Sets the exported image height.',\n            'Defaults to the value found in `layout.height`',\n            'If set to *null*, the exported image height will match the current graph height.'\n        ].join(' ')\n    },\n    scale: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        description: [\n            'Sets a scaling for the generated image.',\n            'If set, all features of a graphs (e.g. text, line width)',\n            'are scaled, unlike simply setting',\n            'a bigger *width* and *height*.'\n        ].join(' ')\n    },\n    setBackground: {\n        valType: 'any',\n        dflt: false,\n        description: [\n            'Sets the image background mode.',\n            'By default, the image background is determined by `layout.paper_bgcolor`,',\n            'the *transparent* mode.',\n            'One might consider setting `setBackground` to *opaque*',\n            'when exporting a *jpeg* image as JPEGs do not support opacity.'\n        ].join(' ')\n    },\n    imageDataOnly: {\n        valType: 'boolean',\n        dflt: false,\n        description: [\n            'Determines whether or not the return value is prefixed by',\n            'the image format\\'s corresponding \\'data:image;\\' spec.'\n        ].join(' ')\n    }\n};\n\n/** Plotly.toImage\n *\n * @param {object | string | HTML div} gd\n *   can either be a data/layout/config object\n *   or an existing graph <div>\n *   or an id to an existing graph <div>\n * @param {object} opts (see above)\n * @return {promise}\n */\nfunction toImage(gd, opts) {\n    opts = opts || {};\n\n    var data;\n    var layout;\n    var config;\n    var fullLayout;\n\n    if(Lib.isPlainObject(gd)) {\n        data = gd.data || [];\n        layout = gd.layout || {};\n        config = gd.config || {};\n        fullLayout = {};\n    } else {\n        gd = Lib.getGraphDiv(gd);\n        data = Lib.extendDeep([], gd.data);\n        layout = Lib.extendDeep({}, gd.layout);\n        config = gd._context;\n        fullLayout = gd._fullLayout || {};\n    }\n\n    function isImpliedOrValid(attr) {\n        return !(attr in opts) || Lib.validate(opts[attr], attrs[attr]);\n    }\n\n    if((!isImpliedOrValid('width') && opts.width !== null) ||\n        (!isImpliedOrValid('height') && opts.height !== null)) {\n        throw new Error('Height and width should be pixel values.');\n    }\n\n    if(!isImpliedOrValid('format')) {\n        throw new Error('Export format is not ' + Lib.join2(attrs.format.values, ', ', ' or ') + '.');\n    }\n\n    var fullOpts = {};\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(opts, fullOpts, attrs, attr, dflt);\n    }\n\n    var format = coerce('format');\n    var width = coerce('width');\n    var height = coerce('height');\n    var scale = coerce('scale');\n    var setBackground = coerce('setBackground');\n    var imageDataOnly = coerce('imageDataOnly');\n\n    // put the cloned div somewhere off screen before attaching to DOM\n    var clonedGd = document.createElement('div');\n    clonedGd.style.position = 'absolute';\n    clonedGd.style.left = '-5000px';\n    document.body.appendChild(clonedGd);\n\n    // extend layout with image options\n    var layoutImage = Lib.extendFlat({}, layout);\n    if(width) {\n        layoutImage.width = width;\n    } else if(opts.width === null && isNumeric(fullLayout.width)) {\n        layoutImage.width = fullLayout.width;\n    }\n    if(height) {\n        layoutImage.height = height;\n    } else if(opts.height === null && isNumeric(fullLayout.height)) {\n        layoutImage.height = fullLayout.height;\n    }\n\n    // extend config for static plot\n    var configImage = Lib.extendFlat({}, config, {\n        _exportedPlot: true,\n        staticPlot: true,\n        setBackground: setBackground\n    });\n\n    var redrawFunc = helpers.getRedrawFunc(clonedGd);\n\n    function wait() {\n        return new Promise(function(resolve) {\n            setTimeout(resolve, helpers.getDelay(clonedGd._fullLayout));\n        });\n    }\n\n    function convert() {\n        return new Promise(function(resolve, reject) {\n            var svg = toSVG(clonedGd, format, scale);\n            var width = clonedGd._fullLayout.width;\n            var height = clonedGd._fullLayout.height;\n\n            function cleanup() {\n                plotApi.purge(clonedGd);\n                document.body.removeChild(clonedGd);\n            }\n\n            if(format === 'full-json') {\n                var json = plots.graphJson(clonedGd, false, 'keepdata', 'object', true, true);\n                json.version = version;\n                json = JSON.stringify(json);\n                cleanup();\n                if(imageDataOnly) {\n                    return resolve(json);\n                } else {\n                    return resolve(helpers.encodeJSON(json));\n                }\n            }\n\n            cleanup();\n\n            if(format === 'svg') {\n                if(imageDataOnly) {\n                    return resolve(svg);\n                } else {\n                    return resolve(helpers.encodeSVG(svg));\n                }\n            }\n\n            var canvas = document.createElement('canvas');\n            canvas.id = Lib.randstr();\n\n            svgToImg({\n                format: format,\n                width: width,\n                height: height,\n                scale: scale,\n                canvas: canvas,\n                svg: svg,\n                // ask svgToImg to return a Promise\n                //  rather than EventEmitter\n                //  leave EventEmitter for backward\n                //  compatibility\n                promise: true\n            })\n            .then(resolve)\n            .catch(reject);\n        });\n    }\n\n    function urlToImageData(url) {\n        if(imageDataOnly) {\n            return url.replace(helpers.IMAGE_URL_PREFIX, '');\n        } else {\n            return url;\n        }\n    }\n\n    return new Promise(function(resolve, reject) {\n        plotApi.newPlot(clonedGd, data, layoutImage, configImage)\n            .then(redrawFunc)\n            .then(wait)\n            .then(convert)\n            .then(function(url) { resolve(urlToImageData(url)); })\n            .catch(function(err) { reject(err); });\n    });\n}\n\nmodule.exports = toImage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}