{"ast":null,"code":"'use strict';\n\nvar baseAttrs = require('../../plots/attributes');\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\nvar pieAttrs = require('../pie/attributes');\nvar constants = require('./constants');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar pattern = require('../../components/drawing/attributes').pattern;\nmodule.exports = {\n  labels: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the labels of each of the sectors.'].join(' ')\n  },\n  parents: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the parent sectors for each of the sectors.', 'Empty string items \\'\\' are understood to reference', 'the root node in the hierarchy.', 'If `ids` is filled, `parents` items are understood to be \"ids\" themselves.', 'When `ids` is not set, plotly attempts to find matching items in `labels`,', 'but beware they must be unique.'].join(' ')\n  },\n  values: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the values associated with each of the sectors.', 'Use with `branchvalues` to determine how the values are summed.'].join(' ')\n  },\n  branchvalues: {\n    valType: 'enumerated',\n    values: ['remainder', 'total'],\n    dflt: 'remainder',\n    editType: 'calc',\n    description: ['Determines how the items in `values` are summed.', 'When set to *total*, items in `values` are taken to be value of all its descendants.', 'When set to *remainder*, items in `values` corresponding to the root and the branches sectors', 'are taken to be the extra part not part of the sum of the values at their leaves.'].join(' ')\n  },\n  count: {\n    valType: 'flaglist',\n    flags: ['branches', 'leaves'],\n    dflt: 'leaves',\n    editType: 'calc',\n    description: ['Determines default for `values` when it is not provided,', 'by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.'].join(' ')\n  },\n  level: {\n    valType: 'any',\n    editType: 'plot',\n    anim: true,\n    description: ['Sets the level from which this trace hierarchy is rendered.', 'Set `level` to `\\'\\'` to start from the root node in the hierarchy.', 'Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching', 'item in `labels`.'].join(' ')\n  },\n  maxdepth: {\n    valType: 'integer',\n    editType: 'plot',\n    dflt: -1,\n    description: ['Sets the number of rendered sectors from any given `level`.', 'Set `maxdepth` to *-1* to render all the levels in the hierarchy.'].join(' ')\n  },\n  marker: extendFlat({\n    colors: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the color of each sector of this trace.', 'If not specified, the default trace color set is used', 'to pick the sector colors.'].join(' ')\n    },\n    // colorinheritance: {\n    //     valType: 'enumerated',\n    //     values: ['per-branch', 'per-label', false]\n    // },\n\n    line: {\n      color: extendFlat({}, pieAttrs.marker.line.color, {\n        dflt: null,\n        description: ['Sets the color of the line enclosing each sector.', 'Defaults to the `paper_bgcolor` value.'].join(' ')\n      }),\n      width: extendFlat({}, pieAttrs.marker.line.width, {\n        dflt: 1\n      }),\n      editType: 'calc'\n    },\n    pattern: pattern,\n    editType: 'calc'\n  }, colorScaleAttrs('marker', {\n    colorAttr: 'colors',\n    anim: false // TODO: set to anim: true?\n  })),\n  leaf: {\n    opacity: {\n      valType: 'number',\n      editType: 'style',\n      min: 0,\n      max: 1,\n      description: ['Sets the opacity of the leaves. With colorscale', 'it is defaulted to 1; otherwise it is defaulted to 0.7'].join(' ')\n    },\n    editType: 'plot'\n  },\n  text: pieAttrs.text,\n  textinfo: {\n    valType: 'flaglist',\n    flags: ['label', 'text', 'value', 'current path', 'percent root', 'percent entry', 'percent parent'],\n    extras: ['none'],\n    editType: 'plot',\n    description: ['Determines which trace information appear on the graph.'].join(' ')\n  },\n  // TODO: incorporate `label` and `value` in the eventData\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: constants.eventDataKeys.concat(['label', 'value'])\n  }),\n  hovertext: pieAttrs.hovertext,\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['label', 'text', 'value', 'name', 'current path', 'percent root', 'percent entry', 'percent parent'],\n    dflt: 'label+text+value+name'\n  }),\n  hovertemplate: hovertemplateAttrs({}, {\n    keys: constants.eventDataKeys\n  }),\n  textfont: pieAttrs.textfont,\n  insidetextorientation: pieAttrs.insidetextorientation,\n  insidetextfont: pieAttrs.insidetextfont,\n  outsidetextfont: extendFlat({}, pieAttrs.outsidetextfont, {\n    description: ['Sets the font used for `textinfo` lying outside the sector.', 'This option refers to the root of the hierarchy', 'presented at the center of a sunburst graph.', 'Please note that if a hierarchy has multiple root nodes,', 'this option won\\'t have any effect and `insidetextfont` would be used.'].join(' ')\n  }),\n  rotation: {\n    valType: 'angle',\n    dflt: 0,\n    editType: 'plot',\n    description: ['Rotates the whole diagram counterclockwise by some angle.', 'By default the first slice starts at 3 o\\'clock.'].join(' ')\n  },\n  sort: pieAttrs.sort,\n  root: {\n    color: {\n      valType: 'color',\n      editType: 'calc',\n      dflt: 'rgba(0,0,0,0)',\n      description: ['sets the color of the root node for a sunburst/treemap/icicle trace.', 'this has no effect when a colorscale is used to set the markers.'].join(' ')\n    },\n    editType: 'calc'\n  },\n  domain: domainAttrs({\n    name: 'sunburst',\n    trace: true,\n    editType: 'calc'\n  })\n};","map":{"version":3,"names":["baseAttrs","require","hovertemplateAttrs","texttemplateAttrs","colorScaleAttrs","domainAttrs","attributes","pieAttrs","constants","extendFlat","pattern","module","exports","labels","valType","editType","description","join","parents","values","branchvalues","dflt","count","flags","level","anim","maxdepth","marker","colors","line","color","width","colorAttr","leaf","opacity","min","max","text","textinfo","extras","texttemplate","keys","eventDataKeys","concat","hovertext","hoverinfo","hovertemplate","textfont","insidetextorientation","insidetextfont","outsidetextfont","rotation","sort","root","domain","name","trace"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/sunburst/attributes.js"],"sourcesContent":["'use strict';\n\nvar baseAttrs = require('../../plots/attributes');\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\n\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar domainAttrs = require('../../plots/domain').attributes;\nvar pieAttrs = require('../pie/attributes');\nvar constants = require('./constants');\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar pattern = require('../../components/drawing/attributes').pattern;\n\nmodule.exports = {\n    labels: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the labels of each of the sectors.'\n        ].join(' ')\n    },\n    parents: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the parent sectors for each of the sectors.',\n            'Empty string items \\'\\' are understood to reference',\n            'the root node in the hierarchy.',\n            'If `ids` is filled, `parents` items are understood to be \"ids\" themselves.',\n            'When `ids` is not set, plotly attempts to find matching items in `labels`,',\n            'but beware they must be unique.'\n        ].join(' ')\n    },\n\n    values: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the values associated with each of the sectors.',\n            'Use with `branchvalues` to determine how the values are summed.'\n        ].join(' ')\n    },\n    branchvalues: {\n        valType: 'enumerated',\n        values: ['remainder', 'total'],\n        dflt: 'remainder',\n        editType: 'calc',\n        description: [\n            'Determines how the items in `values` are summed.',\n            'When set to *total*, items in `values` are taken to be value of all its descendants.',\n            'When set to *remainder*, items in `values` corresponding to the root and the branches sectors',\n            'are taken to be the extra part not part of the sum of the values at their leaves.'\n        ].join(' ')\n    },\n    count: {\n        valType: 'flaglist',\n        flags: [\n            'branches',\n            'leaves'\n        ],\n        dflt: 'leaves',\n        editType: 'calc',\n        description: [\n            'Determines default for `values` when it is not provided,',\n            'by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.'\n        ].join(' ')\n    },\n\n    level: {\n        valType: 'any',\n        editType: 'plot',\n        anim: true,\n        description: [\n            'Sets the level from which this trace hierarchy is rendered.',\n            'Set `level` to `\\'\\'` to start from the root node in the hierarchy.',\n            'Must be an \"id\" if `ids` is filled in, otherwise plotly attempts to find a matching',\n            'item in `labels`.'\n        ].join(' ')\n    },\n    maxdepth: {\n        valType: 'integer',\n        editType: 'plot',\n        dflt: -1,\n        description: [\n            'Sets the number of rendered sectors from any given `level`.',\n            'Set `maxdepth` to *-1* to render all the levels in the hierarchy.'\n        ].join(' ')\n    },\n\n    marker: extendFlat({\n        colors: {\n            valType: 'data_array',\n            editType: 'calc',\n            description: [\n                'Sets the color of each sector of this trace.',\n                'If not specified, the default trace color set is used',\n                'to pick the sector colors.'\n            ].join(' ')\n        },\n\n        // colorinheritance: {\n        //     valType: 'enumerated',\n        //     values: ['per-branch', 'per-label', false]\n        // },\n\n        line: {\n            color: extendFlat({}, pieAttrs.marker.line.color, {\n                dflt: null,\n                description: [\n                    'Sets the color of the line enclosing each sector.',\n                    'Defaults to the `paper_bgcolor` value.'\n                ].join(' ')\n            }),\n            width: extendFlat({}, pieAttrs.marker.line.width, {dflt: 1}),\n            editType: 'calc'\n        },\n        pattern: pattern,\n        editType: 'calc'\n    },\n        colorScaleAttrs('marker', {\n            colorAttr: 'colors',\n            anim: false // TODO: set to anim: true?\n        })\n    ),\n\n    leaf: {\n        opacity: {\n            valType: 'number',\n            editType: 'style',\n            min: 0,\n            max: 1,\n            description: [\n                'Sets the opacity of the leaves. With colorscale',\n                'it is defaulted to 1; otherwise it is defaulted to 0.7'\n            ].join(' ')\n        },\n        editType: 'plot'\n    },\n\n    text: pieAttrs.text,\n    textinfo: {\n        valType: 'flaglist',\n        flags: [\n            'label',\n            'text',\n            'value',\n            'current path',\n            'percent root',\n            'percent entry',\n            'percent parent'\n        ],\n        extras: ['none'],\n        editType: 'plot',\n        description: [\n            'Determines which trace information appear on the graph.'\n        ].join(' ')\n    },\n\n    // TODO: incorporate `label` and `value` in the eventData\n    texttemplate: texttemplateAttrs({editType: 'plot'}, {\n        keys: constants.eventDataKeys.concat(['label', 'value'])\n    }),\n\n    hovertext: pieAttrs.hovertext,\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n        flags: [\n            'label',\n            'text',\n            'value',\n            'name',\n            'current path',\n            'percent root',\n            'percent entry',\n            'percent parent'\n        ],\n        dflt: 'label+text+value+name'\n    }),\n    hovertemplate: hovertemplateAttrs({}, {\n        keys: constants.eventDataKeys\n    }),\n\n    textfont: pieAttrs.textfont,\n    insidetextorientation: pieAttrs.insidetextorientation,\n    insidetextfont: pieAttrs.insidetextfont,\n    outsidetextfont: extendFlat({}, pieAttrs.outsidetextfont, {\n        description: [\n            'Sets the font used for `textinfo` lying outside the sector.',\n            'This option refers to the root of the hierarchy',\n            'presented at the center of a sunburst graph.',\n            'Please note that if a hierarchy has multiple root nodes,',\n            'this option won\\'t have any effect and `insidetextfont` would be used.'\n        ].join(' ')\n    }),\n    rotation: {\n        valType: 'angle',\n        dflt: 0,\n        editType: 'plot',\n        description: [\n            'Rotates the whole diagram counterclockwise by some angle.',\n            'By default the first slice starts at 3 o\\'clock.'\n        ].join(' ')\n    },\n    sort: pieAttrs.sort,\n\n    root: {\n        color: {\n            valType: 'color',\n            editType: 'calc',\n            dflt: 'rgba(0,0,0,0)',\n            description: [\n                'sets the color of the root node for a sunburst/treemap/icicle trace.',\n                'this has no effect when a colorscale is used to set the markers.'\n            ].join(' ')\n        },\n        editType: 'calc'\n    },\n\n    domain: domainAttrs({name: 'sunburst', trace: true, editType: 'calc'})\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}