{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar Lib = require('../../lib');\nvar BADNUM = require('../../constants/numerical').BADNUM;\nvar isArrayOrTypedArray = Lib.isArrayOrTypedArray;\nvar isDateTime = Lib.isDateTime;\nvar cleanNumber = Lib.cleanNumber;\nvar round = Math.round;\nmodule.exports = function autoType(array, calendar, opts) {\n  var a = array;\n  var noMultiCategory = opts.noMultiCategory;\n  if (isArrayOrTypedArray(a) && !a.length) return '-';\n  if (!noMultiCategory && multiCategory(a)) return 'multicategory';\n  if (noMultiCategory && Array.isArray(a[0])) {\n    // no need to flat typed arrays here\n    var b = [];\n    for (var i = 0; i < a.length; i++) {\n      if (isArrayOrTypedArray(a[i])) {\n        for (var j = 0; j < a[i].length; j++) {\n          b.push(a[i][j]);\n        }\n      }\n    }\n    a = b;\n  }\n  if (moreDates(a, calendar)) return 'date';\n  var convertNumeric = opts.autotypenumbers !== 'strict'; // compare against strict, just in case autotypenumbers was not provided in opts\n  if (category(a, convertNumeric)) return 'category';\n  if (linearOK(a, convertNumeric)) return 'linear';\n  return '-';\n};\nfunction hasTypeNumber(v, convertNumeric) {\n  return convertNumeric ? isNumeric(v) : typeof v === 'number';\n}\n\n// is there at least one number in array? If not, we should leave\n// ax.type empty so it can be autoset later\nfunction linearOK(a, convertNumeric) {\n  var len = a.length;\n  for (var i = 0; i < len; i++) {\n    if (hasTypeNumber(a[i], convertNumeric)) return true;\n  }\n  return false;\n}\n\n// does the array a have mostly dates rather than numbers?\n// note: some values can be neither (such as blanks, text)\n// 2- or 4-digit integers can be both, so require twice as many\n// dates as non-dates, to exclude cases with mostly 2 & 4 digit\n// numbers and a few dates\n// as with categories, consider DISTINCT values only.\nfunction moreDates(a, calendar) {\n  var len = a.length;\n  var inc = getIncrement(len);\n  var dats = 0;\n  var nums = 0;\n  var seen = {};\n  for (var f = 0; f < len; f += inc) {\n    var i = round(f);\n    var ai = a[i];\n    var stri = String(ai);\n    if (seen[stri]) continue;\n    seen[stri] = 1;\n    if (isDateTime(ai, calendar)) dats++;\n    if (isNumeric(ai)) nums++;\n  }\n  return dats > nums * 2;\n}\n\n// return increment to test at most 1000 points, evenly spaced\nfunction getIncrement(len) {\n  return Math.max(1, (len - 1) / 1000);\n}\n\n// are the (x,y)-values in gd.data mostly text?\n// require twice as many DISTINCT categories as distinct numbers\nfunction category(a, convertNumeric) {\n  var len = a.length;\n  var inc = getIncrement(len);\n  var nums = 0;\n  var cats = 0;\n  var seen = {};\n  for (var f = 0; f < len; f += inc) {\n    var i = round(f);\n    var ai = a[i];\n    var stri = String(ai);\n    if (seen[stri]) continue;\n    seen[stri] = 1;\n    var t = typeof ai;\n    if (t === 'boolean') cats++;else if (convertNumeric ? cleanNumber(ai) !== BADNUM : t === 'number') nums++;else if (t === 'string') cats++;\n  }\n  return cats > nums * 2;\n}\n\n// very-loose requirements for multicategory,\n// trace modules that should never auto-type to multicategory\n// should be declared with 'noMultiCategory'\nfunction multiCategory(a) {\n  return isArrayOrTypedArray(a[0]) && isArrayOrTypedArray(a[1]);\n}","map":{"version":3,"names":["isNumeric","require","Lib","BADNUM","isArrayOrTypedArray","isDateTime","cleanNumber","round","Math","module","exports","autoType","array","calendar","opts","a","noMultiCategory","length","multiCategory","Array","isArray","b","i","j","push","moreDates","convertNumeric","autotypenumbers","category","linearOK","hasTypeNumber","v","len","inc","getIncrement","dats","nums","seen","f","ai","stri","String","max","cats","t"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/plots/cartesian/axis_autotype.js"],"sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\n\nvar Lib = require('../../lib');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nvar isArrayOrTypedArray = Lib.isArrayOrTypedArray;\nvar isDateTime = Lib.isDateTime;\nvar cleanNumber = Lib.cleanNumber;\nvar round = Math.round;\n\nmodule.exports = function autoType(array, calendar, opts) {\n    var a = array;\n\n    var noMultiCategory = opts.noMultiCategory;\n    if(isArrayOrTypedArray(a) && !a.length) return '-';\n    if(!noMultiCategory && multiCategory(a)) return 'multicategory';\n    if(noMultiCategory && Array.isArray(a[0])) { // no need to flat typed arrays here\n        var b = [];\n        for(var i = 0; i < a.length; i++) {\n            if(isArrayOrTypedArray(a[i])) {\n                for(var j = 0; j < a[i].length; j++) {\n                    b.push(a[i][j]);\n                }\n            }\n        }\n        a = b;\n    }\n\n    if(moreDates(a, calendar)) return 'date';\n\n    var convertNumeric = opts.autotypenumbers !== 'strict'; // compare against strict, just in case autotypenumbers was not provided in opts\n    if(category(a, convertNumeric)) return 'category';\n    if(linearOK(a, convertNumeric)) return 'linear';\n\n    return '-';\n};\n\nfunction hasTypeNumber(v, convertNumeric) {\n    return convertNumeric ? isNumeric(v) : typeof v === 'number';\n}\n\n// is there at least one number in array? If not, we should leave\n// ax.type empty so it can be autoset later\nfunction linearOK(a, convertNumeric) {\n    var len = a.length;\n\n    for(var i = 0; i < len; i++) {\n        if(hasTypeNumber(a[i], convertNumeric)) return true;\n    }\n\n    return false;\n}\n\n// does the array a have mostly dates rather than numbers?\n// note: some values can be neither (such as blanks, text)\n// 2- or 4-digit integers can be both, so require twice as many\n// dates as non-dates, to exclude cases with mostly 2 & 4 digit\n// numbers and a few dates\n// as with categories, consider DISTINCT values only.\nfunction moreDates(a, calendar) {\n    var len = a.length;\n\n    var inc = getIncrement(len);\n    var dats = 0;\n    var nums = 0;\n    var seen = {};\n\n    for(var f = 0; f < len; f += inc) {\n        var i = round(f);\n        var ai = a[i];\n        var stri = String(ai);\n        if(seen[stri]) continue;\n        seen[stri] = 1;\n\n        if(isDateTime(ai, calendar)) dats++;\n        if(isNumeric(ai)) nums++;\n    }\n\n    return dats > nums * 2;\n}\n\n// return increment to test at most 1000 points, evenly spaced\nfunction getIncrement(len) {\n    return Math.max(1, (len - 1) / 1000);\n}\n\n// are the (x,y)-values in gd.data mostly text?\n// require twice as many DISTINCT categories as distinct numbers\nfunction category(a, convertNumeric) {\n    var len = a.length;\n\n    var inc = getIncrement(len);\n    var nums = 0;\n    var cats = 0;\n    var seen = {};\n\n    for(var f = 0; f < len; f += inc) {\n        var i = round(f);\n        var ai = a[i];\n        var stri = String(ai);\n        if(seen[stri]) continue;\n        seen[stri] = 1;\n\n        var t = typeof ai;\n        if(t === 'boolean') cats++;\n        else if(convertNumeric ? cleanNumber(ai) !== BADNUM : t === 'number') nums++;\n        else if(t === 'string') cats++;\n    }\n\n    return cats > nums * 2;\n}\n\n// very-loose requirements for multicategory,\n// trace modules that should never auto-type to multicategory\n// should be declared with 'noMultiCategory'\nfunction multiCategory(a) {\n    return isArrayOrTypedArray(a[0]) && isArrayOrTypedArray(a[1]);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}