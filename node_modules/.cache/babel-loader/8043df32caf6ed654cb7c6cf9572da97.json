{"ast":null,"code":"'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\nvar makeFillcolorAttr = require('../scatter/fillcolor_attribute');\nvar scatterAttrs = require('../scatter/attributes');\nvar baseAttrs = require('../../plots/attributes');\nvar colorAttributes = require('../../components/colorscale/attributes');\nvar dash = require('../../components/drawing/attributes').dash;\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar scatterMarkerAttrs = scatterAttrs.marker;\nvar scatterLineAttrs = scatterAttrs.line;\nvar scatterMarkerLineAttrs = scatterMarkerAttrs.line;\nmodule.exports = overrideAll({\n  lon: {\n    valType: 'data_array',\n    description: 'Sets the longitude coordinates (in degrees East).'\n  },\n  lat: {\n    valType: 'data_array',\n    description: 'Sets the latitude coordinates (in degrees North).'\n  },\n  locations: {\n    valType: 'data_array',\n    description: ['Sets the coordinates via location IDs or names.', 'Coordinates correspond to the centroid of each location given.', 'See `locationmode` for more info.'].join(' ')\n  },\n  locationmode: {\n    valType: 'enumerated',\n    values: ['ISO-3', 'USA-states', 'country names', 'geojson-id'],\n    dflt: 'ISO-3',\n    description: ['Determines the set of locations used to match entries in `locations`', 'to regions on the map.', 'Values *ISO-3*, *USA-states*, *country names* correspond to features on', 'the base map and value *geojson-id* corresponds to features from a custom', 'GeoJSON linked to the `geojson` attribute.'].join(' ')\n  },\n  geojson: {\n    valType: 'any',\n    editType: 'calc',\n    description: ['Sets optional GeoJSON data associated with this trace.', 'If not given, the features on the base map are used when `locations` is set.', 'It can be set as a valid GeoJSON object or as a URL string.', 'Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature*', 'with geometries of type *Polygon* or *MultiPolygon*.'\n\n    // TODO add topojson support with additional 'topojsonobject' attr?\n    // https://github.com/topojson/topojson-specification/blob/master/README.md\n    ].join(' ')\n  },\n  featureidkey: {\n    valType: 'string',\n    editType: 'calc',\n    dflt: 'id',\n    description: ['Sets the key in GeoJSON features which is used as id to match the items', 'included in the `locations` array.', 'Only has an effect when `geojson` is set.', 'Support nested property, for example *properties.name*.'].join(' ')\n  },\n  mode: extendFlat({}, scatterAttrs.mode, {\n    dflt: 'markers'\n  }),\n  text: extendFlat({}, scatterAttrs.text, {\n    description: ['Sets text elements associated with each (lon,lat) pair', 'or item in `locations`.', 'If a single string, the same string appears over', 'all the data points.', 'If an array of string, the items are mapped in order to the', 'this trace\\'s (lon,lat) or `locations` coordinates.', 'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,', 'these elements will be seen in the hover labels.'].join(' ')\n  }),\n  texttemplate: texttemplateAttrs({\n    editType: 'plot'\n  }, {\n    keys: ['lat', 'lon', 'location', 'text']\n  }),\n  hovertext: extendFlat({}, scatterAttrs.hovertext, {\n    description: ['Sets hover text elements associated with each (lon,lat) pair', 'or item in `locations`.', 'If a single string, the same string appears over', 'all the data points.', 'If an array of string, the items are mapped in order to the', 'this trace\\'s (lon,lat) or `locations` coordinates.', 'To be seen, trace `hoverinfo` must contain a *text* flag.'].join(' ')\n  }),\n  textfont: scatterAttrs.textfont,\n  textposition: scatterAttrs.textposition,\n  line: {\n    color: scatterLineAttrs.color,\n    width: scatterLineAttrs.width,\n    dash: dash\n  },\n  connectgaps: scatterAttrs.connectgaps,\n  marker: extendFlat({\n    symbol: scatterMarkerAttrs.symbol,\n    opacity: scatterMarkerAttrs.opacity,\n    angle: scatterMarkerAttrs.angle,\n    angleref: extendFlat({}, scatterMarkerAttrs.angleref, {\n      values: ['previous', 'up', 'north'],\n      description: ['Sets the reference for marker angle.', 'With *previous*, angle 0 points along the line from the previous point to this one.', 'With *up*, angle 0 points toward the top of the screen.', 'With *north*, angle 0 points north based on the current map projection.'].join(' ')\n    }),\n    standoff: scatterMarkerAttrs.standoff,\n    size: scatterMarkerAttrs.size,\n    sizeref: scatterMarkerAttrs.sizeref,\n    sizemin: scatterMarkerAttrs.sizemin,\n    sizemode: scatterMarkerAttrs.sizemode,\n    colorbar: scatterMarkerAttrs.colorbar,\n    line: extendFlat({\n      width: scatterMarkerLineAttrs.width\n    }, colorAttributes('marker.line')),\n    gradient: scatterMarkerAttrs.gradient\n  }, colorAttributes('marker')),\n  fill: {\n    valType: 'enumerated',\n    values: ['none', 'toself'],\n    dflt: 'none',\n    description: ['Sets the area to fill with a solid color.', 'Use with `fillcolor` if not *none*.', '*toself* connects the endpoints of the trace (or each segment', 'of the trace if it has gaps) into a closed shape.'].join(' ')\n  },\n  fillcolor: makeFillcolorAttr(),\n  selected: scatterAttrs.selected,\n  unselected: scatterAttrs.unselected,\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['lon', 'lat', 'location', 'text', 'name']\n  }),\n  hovertemplate: hovertemplateAttrs()\n}, 'calc', 'nested');","map":{"version":3,"names":["hovertemplateAttrs","require","texttemplateAttrs","makeFillcolorAttr","scatterAttrs","baseAttrs","colorAttributes","dash","extendFlat","overrideAll","scatterMarkerAttrs","marker","scatterLineAttrs","line","scatterMarkerLineAttrs","module","exports","lon","valType","description","lat","locations","join","locationmode","values","dflt","geojson","editType","featureidkey","mode","text","texttemplate","keys","hovertext","textfont","textposition","color","width","connectgaps","symbol","opacity","angle","angleref","standoff","size","sizeref","sizemin","sizemode","colorbar","gradient","fill","fillcolor","selected","unselected","hoverinfo","flags","hovertemplate"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/scattergeo/attributes.js"],"sourcesContent":["'use strict';\n\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar texttemplateAttrs = require('../../plots/template_attributes').texttemplateAttrs;\nvar makeFillcolorAttr = require('../scatter/fillcolor_attribute');\nvar scatterAttrs = require('../scatter/attributes');\nvar baseAttrs = require('../../plots/attributes');\nvar colorAttributes = require('../../components/colorscale/attributes');\nvar dash = require('../../components/drawing/attributes').dash;\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar scatterMarkerAttrs = scatterAttrs.marker;\nvar scatterLineAttrs = scatterAttrs.line;\nvar scatterMarkerLineAttrs = scatterMarkerAttrs.line;\n\nmodule.exports = overrideAll({\n    lon: {\n        valType: 'data_array',\n        description: 'Sets the longitude coordinates (in degrees East).'\n    },\n    lat: {\n        valType: 'data_array',\n        description: 'Sets the latitude coordinates (in degrees North).'\n    },\n\n    locations: {\n        valType: 'data_array',\n        description: [\n            'Sets the coordinates via location IDs or names.',\n            'Coordinates correspond to the centroid of each location given.',\n            'See `locationmode` for more info.'\n        ].join(' ')\n    },\n    locationmode: {\n        valType: 'enumerated',\n        values: ['ISO-3', 'USA-states', 'country names', 'geojson-id'],\n        dflt: 'ISO-3',\n        description: [\n            'Determines the set of locations used to match entries in `locations`',\n            'to regions on the map.',\n            'Values *ISO-3*, *USA-states*, *country names* correspond to features on',\n            'the base map and value *geojson-id* corresponds to features from a custom',\n            'GeoJSON linked to the `geojson` attribute.'\n        ].join(' ')\n    },\n\n    geojson: {\n        valType: 'any',\n        editType: 'calc',\n        description: [\n            'Sets optional GeoJSON data associated with this trace.',\n            'If not given, the features on the base map are used when `locations` is set.',\n\n            'It can be set as a valid GeoJSON object or as a URL string.',\n            'Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature*',\n            'with geometries of type *Polygon* or *MultiPolygon*.'\n\n            // TODO add topojson support with additional 'topojsonobject' attr?\n            // https://github.com/topojson/topojson-specification/blob/master/README.md\n        ].join(' ')\n    },\n    featureidkey: {\n        valType: 'string',\n        editType: 'calc',\n        dflt: 'id',\n        description: [\n            'Sets the key in GeoJSON features which is used as id to match the items',\n            'included in the `locations` array.',\n            'Only has an effect when `geojson` is set.',\n            'Support nested property, for example *properties.name*.'\n        ].join(' ')\n    },\n\n    mode: extendFlat({}, scatterAttrs.mode, {dflt: 'markers'}),\n\n    text: extendFlat({}, scatterAttrs.text, {\n        description: [\n            'Sets text elements associated with each (lon,lat) pair',\n            'or item in `locations`.',\n            'If a single string, the same string appears over',\n            'all the data points.',\n            'If an array of string, the items are mapped in order to the',\n            'this trace\\'s (lon,lat) or `locations` coordinates.',\n            'If trace `hoverinfo` contains a *text* flag and *hovertext* is not set,',\n            'these elements will be seen in the hover labels.'\n        ].join(' ')\n    }),\n    texttemplate: texttemplateAttrs({editType: 'plot'}, {\n        keys: ['lat', 'lon', 'location', 'text']\n    }),\n    hovertext: extendFlat({}, scatterAttrs.hovertext, {\n        description: [\n            'Sets hover text elements associated with each (lon,lat) pair',\n            'or item in `locations`.',\n            'If a single string, the same string appears over',\n            'all the data points.',\n            'If an array of string, the items are mapped in order to the',\n            'this trace\\'s (lon,lat) or `locations` coordinates.',\n            'To be seen, trace `hoverinfo` must contain a *text* flag.'\n        ].join(' ')\n    }),\n\n    textfont: scatterAttrs.textfont,\n    textposition: scatterAttrs.textposition,\n\n    line: {\n        color: scatterLineAttrs.color,\n        width: scatterLineAttrs.width,\n        dash: dash\n    },\n    connectgaps: scatterAttrs.connectgaps,\n\n    marker: extendFlat({\n        symbol: scatterMarkerAttrs.symbol,\n        opacity: scatterMarkerAttrs.opacity,\n        angle: scatterMarkerAttrs.angle,\n        angleref: extendFlat({}, scatterMarkerAttrs.angleref, {\n            values: ['previous', 'up', 'north'],\n            description: [\n                'Sets the reference for marker angle.',\n                'With *previous*, angle 0 points along the line from the previous point to this one.',\n                'With *up*, angle 0 points toward the top of the screen.',\n                'With *north*, angle 0 points north based on the current map projection.',\n            ].join(' ')\n        }),\n        standoff: scatterMarkerAttrs.standoff,\n        size: scatterMarkerAttrs.size,\n        sizeref: scatterMarkerAttrs.sizeref,\n        sizemin: scatterMarkerAttrs.sizemin,\n        sizemode: scatterMarkerAttrs.sizemode,\n        colorbar: scatterMarkerAttrs.colorbar,\n        line: extendFlat({\n            width: scatterMarkerLineAttrs.width\n        },\n            colorAttributes('marker.line')\n        ),\n        gradient: scatterMarkerAttrs.gradient\n    },\n        colorAttributes('marker')\n    ),\n\n    fill: {\n        valType: 'enumerated',\n        values: ['none', 'toself'],\n        dflt: 'none',\n        description: [\n            'Sets the area to fill with a solid color.',\n            'Use with `fillcolor` if not *none*.',\n            '*toself* connects the endpoints of the trace (or each segment',\n            'of the trace if it has gaps) into a closed shape.'\n        ].join(' ')\n    },\n    fillcolor: makeFillcolorAttr(),\n\n    selected: scatterAttrs.selected,\n    unselected: scatterAttrs.unselected,\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n        flags: ['lon', 'lat', 'location', 'text', 'name']\n    }),\n    hovertemplate: hovertemplateAttrs(),\n}, 'calc', 'nested');\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}