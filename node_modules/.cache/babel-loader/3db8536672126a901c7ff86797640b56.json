{"ast":null,"code":"'use strict';\n\nvar cluster = require('@plotly/point-cluster');\nvar isNumeric = require('fast-isnumeric');\nvar scatterglPlot = require('../scattergl/plot');\nvar sceneUpdate = require('../scattergl/scene_update');\nvar convert = require('../scattergl/convert');\nvar Lib = require('../../lib');\nvar TOO_MANY_POINTS = require('../scattergl/constants').TOO_MANY_POINTS;\nvar reglPrecompiled = {};\nmodule.exports = function plot(gd, subplot, cdata) {\n  if (!cdata.length) return;\n  var radialAxis = subplot.radialAxis;\n  var angularAxis = subplot.angularAxis;\n  var scene = sceneUpdate(gd, subplot);\n  cdata.forEach(function (cdscatter) {\n    if (!cdscatter || !cdscatter[0] || !cdscatter[0].trace) return;\n    var cd = cdscatter[0];\n    var trace = cd.trace;\n    var stash = cd.t;\n    var len = trace._length;\n    var rArray = stash.r;\n    var thetaArray = stash.theta;\n    var opts = stash.opts;\n    var i;\n    var subRArray = rArray.slice();\n    var subThetaArray = thetaArray.slice();\n\n    // filter out by range\n    for (i = 0; i < rArray.length; i++) {\n      if (!subplot.isPtInside({\n        r: rArray[i],\n        theta: thetaArray[i]\n      })) {\n        subRArray[i] = NaN;\n        subThetaArray[i] = NaN;\n      }\n    }\n    var positions = new Array(len * 2);\n    var x = Array(len);\n    var y = Array(len);\n    for (i = 0; i < len; i++) {\n      var r = subRArray[i];\n      var xx, yy;\n      if (isNumeric(r)) {\n        var rg = radialAxis.c2g(r);\n        var thetag = angularAxis.c2g(subThetaArray[i], trace.thetaunit);\n        xx = rg * Math.cos(thetag);\n        yy = rg * Math.sin(thetag);\n      } else {\n        xx = yy = NaN;\n      }\n      x[i] = positions[i * 2] = xx;\n      y[i] = positions[i * 2 + 1] = yy;\n    }\n    stash.tree = cluster(positions);\n\n    // FIXME: see scattergl.js#109\n    if (opts.marker && len >= TOO_MANY_POINTS) {\n      opts.marker.cluster = stash.tree;\n    }\n    if (opts.marker) {\n      opts.markerSel.positions = opts.markerUnsel.positions = opts.marker.positions = positions;\n    }\n    if (opts.line && positions.length > 1) {\n      Lib.extendFlat(opts.line, convert.linePositions(gd, trace, positions));\n    }\n    if (opts.text) {\n      Lib.extendFlat(opts.text, {\n        positions: positions\n      }, convert.textPosition(gd, trace, opts.text, opts.marker));\n      Lib.extendFlat(opts.textSel, {\n        positions: positions\n      }, convert.textPosition(gd, trace, opts.text, opts.markerSel));\n      Lib.extendFlat(opts.textUnsel, {\n        positions: positions\n      }, convert.textPosition(gd, trace, opts.text, opts.markerUnsel));\n    }\n    if (opts.fill && !scene.fill2d) scene.fill2d = true;\n    if (opts.marker && !scene.scatter2d) scene.scatter2d = true;\n    if (opts.line && !scene.line2d) scene.line2d = true;\n    if (opts.text && !scene.glText) scene.glText = true;\n    scene.lineOptions.push(opts.line);\n    scene.fillOptions.push(opts.fill);\n    scene.markerOptions.push(opts.marker);\n    scene.markerSelectedOptions.push(opts.markerSel);\n    scene.markerUnselectedOptions.push(opts.markerUnsel);\n    scene.textOptions.push(opts.text);\n    scene.textSelectedOptions.push(opts.textSel);\n    scene.textUnselectedOptions.push(opts.textUnsel);\n    scene.selectBatch.push([]);\n    scene.unselectBatch.push([]);\n    stash.x = x;\n    stash.y = y;\n    stash.rawx = x;\n    stash.rawy = y;\n    stash.r = rArray;\n    stash.theta = thetaArray;\n    stash.positions = positions;\n    stash._scene = scene;\n    stash.index = scene.count;\n    scene.count++;\n  });\n  return scatterglPlot(gd, subplot, cdata);\n};\nmodule.exports.reglPrecompiled = reglPrecompiled;","map":{"version":3,"names":["cluster","require","isNumeric","scatterglPlot","sceneUpdate","convert","Lib","TOO_MANY_POINTS","reglPrecompiled","module","exports","plot","gd","subplot","cdata","length","radialAxis","angularAxis","scene","forEach","cdscatter","trace","cd","stash","t","len","_length","rArray","r","thetaArray","theta","opts","i","subRArray","slice","subThetaArray","isPtInside","NaN","positions","Array","x","y","xx","yy","rg","c2g","thetag","thetaunit","Math","cos","sin","tree","marker","markerSel","markerUnsel","line","extendFlat","linePositions","text","textPosition","textSel","textUnsel","fill","fill2d","scatter2d","line2d","glText","lineOptions","push","fillOptions","markerOptions","markerSelectedOptions","markerUnselectedOptions","textOptions","textSelectedOptions","textUnselectedOptions","selectBatch","unselectBatch","rawx","rawy","_scene","index","count"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/scatterpolargl/plot.js"],"sourcesContent":["'use strict';\n\nvar cluster = require('@plotly/point-cluster');\nvar isNumeric = require('fast-isnumeric');\n\nvar scatterglPlot = require('../scattergl/plot');\nvar sceneUpdate = require('../scattergl/scene_update');\nvar convert = require('../scattergl/convert');\n\nvar Lib = require('../../lib');\n\nvar TOO_MANY_POINTS = require('../scattergl/constants').TOO_MANY_POINTS;\n\nvar reglPrecompiled = {};\n\nmodule.exports = function plot(gd, subplot, cdata) {\n    if(!cdata.length) return;\n\n    var radialAxis = subplot.radialAxis;\n    var angularAxis = subplot.angularAxis;\n    var scene = sceneUpdate(gd, subplot);\n\n    cdata.forEach(function(cdscatter) {\n        if(!cdscatter || !cdscatter[0] || !cdscatter[0].trace) return;\n        var cd = cdscatter[0];\n        var trace = cd.trace;\n        var stash = cd.t;\n        var len = trace._length;\n        var rArray = stash.r;\n        var thetaArray = stash.theta;\n        var opts = stash.opts;\n        var i;\n\n        var subRArray = rArray.slice();\n        var subThetaArray = thetaArray.slice();\n\n        // filter out by range\n        for(i = 0; i < rArray.length; i++) {\n            if(!subplot.isPtInside({r: rArray[i], theta: thetaArray[i]})) {\n                subRArray[i] = NaN;\n                subThetaArray[i] = NaN;\n            }\n        }\n\n        var positions = new Array(len * 2);\n        var x = Array(len);\n        var y = Array(len);\n\n        for(i = 0; i < len; i++) {\n            var r = subRArray[i];\n            var xx, yy;\n\n            if(isNumeric(r)) {\n                var rg = radialAxis.c2g(r);\n                var thetag = angularAxis.c2g(subThetaArray[i], trace.thetaunit);\n                xx = rg * Math.cos(thetag);\n                yy = rg * Math.sin(thetag);\n            } else {\n                xx = yy = NaN;\n            }\n            x[i] = positions[i * 2] = xx;\n            y[i] = positions[i * 2 + 1] = yy;\n        }\n\n        stash.tree = cluster(positions);\n\n        // FIXME: see scattergl.js#109\n        if(opts.marker && len >= TOO_MANY_POINTS) {\n            opts.marker.cluster = stash.tree;\n        }\n\n        if(opts.marker) {\n            opts.markerSel.positions = opts.markerUnsel.positions = opts.marker.positions = positions;\n        }\n\n        if(opts.line && positions.length > 1) {\n            Lib.extendFlat(\n                opts.line,\n                convert.linePositions(gd, trace, positions)\n            );\n        }\n\n        if(opts.text) {\n            Lib.extendFlat(\n                opts.text,\n                {positions: positions},\n                convert.textPosition(gd, trace, opts.text, opts.marker)\n            );\n            Lib.extendFlat(\n                opts.textSel,\n                {positions: positions},\n                convert.textPosition(gd, trace, opts.text, opts.markerSel)\n            );\n            Lib.extendFlat(\n                opts.textUnsel,\n                {positions: positions},\n                convert.textPosition(gd, trace, opts.text, opts.markerUnsel)\n            );\n        }\n\n        if(opts.fill && !scene.fill2d) scene.fill2d = true;\n        if(opts.marker && !scene.scatter2d) scene.scatter2d = true;\n        if(opts.line && !scene.line2d) scene.line2d = true;\n        if(opts.text && !scene.glText) scene.glText = true;\n\n        scene.lineOptions.push(opts.line);\n        scene.fillOptions.push(opts.fill);\n        scene.markerOptions.push(opts.marker);\n        scene.markerSelectedOptions.push(opts.markerSel);\n        scene.markerUnselectedOptions.push(opts.markerUnsel);\n        scene.textOptions.push(opts.text);\n        scene.textSelectedOptions.push(opts.textSel);\n        scene.textUnselectedOptions.push(opts.textUnsel);\n        scene.selectBatch.push([]);\n        scene.unselectBatch.push([]);\n\n        stash.x = x;\n        stash.y = y;\n        stash.rawx = x;\n        stash.rawy = y;\n        stash.r = rArray;\n        stash.theta = thetaArray;\n        stash.positions = positions;\n        stash._scene = scene;\n        stash.index = scene.count;\n        scene.count++;\n    });\n\n    return scatterglPlot(gd, subplot, cdata);\n};\n\nmodule.exports.reglPrecompiled = reglPrecompiled;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}