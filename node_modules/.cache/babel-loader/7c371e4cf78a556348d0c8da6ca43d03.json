{"ast":null,"code":"'use strict';\n\nvar fontAttrs = require('../font_attributes');\nvar colorAttrs = require('../../components/color/attributes');\nvar dash = require('../../components/drawing/attributes').dash;\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\nvar descriptionWithDates = require('../../plots/cartesian/axis_format_attributes').descriptionWithDates;\nvar ONEDAY = require('../../constants/numerical').ONEDAY;\nvar constants = require('./constants');\nvar HOUR = constants.HOUR_PATTERN;\nvar DAY_OF_WEEK = constants.WEEKDAY_PATTERN;\nvar minorTickmode = {\n  valType: 'enumerated',\n  values: ['auto', 'linear', 'array'],\n  editType: 'ticks',\n  impliedEdits: {\n    tick0: undefined,\n    dtick: undefined\n  },\n  description: ['Sets the tick mode for this axis.', 'If *auto*, the number of ticks is set via `nticks`.', 'If *linear*, the placement of the ticks is determined by', 'a starting position `tick0` and a tick step `dtick`', '(*linear* is the default value if `tick0` and `dtick` are provided).', 'If *array*, the placement of the ticks is set via `tickvals`', 'and the tick text is `ticktext`.', '(*array* is the default value if `tickvals` is provided).'].join(' ')\n};\nvar tickmode = extendFlat({}, minorTickmode, {\n  values: minorTickmode.values.slice().concat(['sync']),\n  description: [minorTickmode.description, 'If *sync*, the number of ticks will sync with the overlayed axis', 'set by `overlaying` property.'].join(' ')\n});\nfunction makeNticks(minor) {\n  return {\n    valType: 'integer',\n    min: 0,\n    dflt: minor ? 5 : 0,\n    editType: 'ticks',\n    description: ['Specifies the maximum number of ticks for the particular axis.', 'The actual number of ticks will be chosen automatically to be', 'less than or equal to `nticks`.', 'Has an effect only if `tickmode` is set to *auto*.'].join(' ')\n  };\n}\nvar tick0 = {\n  valType: 'any',\n  editType: 'ticks',\n  impliedEdits: {\n    tickmode: 'linear'\n  },\n  description: ['Sets the placement of the first tick on this axis.', 'Use with `dtick`.', 'If the axis `type` is *log*, then you must take the log of your starting tick', '(e.g. to set the starting tick to 100, set the `tick0` to 2)', 'except when `dtick`=*L<f>* (see `dtick` for more info).', 'If the axis `type` is *date*, it should be a date string, like date data.', 'If the axis `type` is *category*, it should be a number, using the scale where', 'each category is assigned a serial number from zero in the order it appears.'].join(' ')\n};\nvar dtick = {\n  valType: 'any',\n  editType: 'ticks',\n  impliedEdits: {\n    tickmode: 'linear'\n  },\n  description: ['Sets the step in-between ticks on this axis. Use with `tick0`.', 'Must be a positive number, or special strings available to *log* and *date* axes.', 'If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n', 'is the tick number. For example,', 'to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1.', 'To set tick marks at 1, 100, 10000, ... set dtick to 2.', 'To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433.', '*log* has several special values; *L<f>*, where `f` is a positive number,', 'gives ticks linearly spaced in value (but not position).', 'For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc.', 'To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5).', '`tick0` is ignored for *D1* and *D2*.', 'If the axis `type` is *date*, then you must convert the time to milliseconds.', 'For example, to set the interval between ticks to one day,', 'set `dtick` to 86400000.0.', '*date* also has special values *M<n>* gives ticks spaced by a number of months.', '`n` must be a positive integer.', 'To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*.', 'To set ticks every 4 years, set `dtick` to *M48*'].join(' ')\n};\nvar tickvals = {\n  valType: 'data_array',\n  editType: 'ticks',\n  description: ['Sets the values at which ticks on this axis appear.', 'Only has an effect if `tickmode` is set to *array*.', 'Used with `ticktext`.'].join(' ')\n};\nvar ticks = {\n  valType: 'enumerated',\n  values: ['outside', 'inside', ''],\n  editType: 'ticks',\n  description: ['Determines whether ticks are drawn or not.', 'If **, this axis\\' ticks are not drawn.', 'If *outside* (*inside*), this axis\\' are drawn outside (inside)', 'the axis lines.'].join(' ')\n};\nfunction makeTicklen(minor) {\n  var obj = {\n    valType: 'number',\n    min: 0,\n    editType: 'ticks',\n    description: 'Sets the tick length (in px).'\n  };\n  if (!minor) obj.dflt = 5;\n  return obj;\n}\nfunction makeTickwidth(minor) {\n  var obj = {\n    valType: 'number',\n    min: 0,\n    editType: 'ticks',\n    description: 'Sets the tick width (in px).'\n  };\n  if (!minor) obj.dflt = 1;\n  return obj;\n}\nvar tickcolor = {\n  valType: 'color',\n  dflt: colorAttrs.defaultLine,\n  editType: 'ticks',\n  description: 'Sets the tick color.'\n};\nvar gridcolor = {\n  valType: 'color',\n  dflt: colorAttrs.lightLine,\n  editType: 'ticks',\n  description: 'Sets the color of the grid lines.'\n};\nfunction makeGridwidth(minor) {\n  var obj = {\n    valType: 'number',\n    min: 0,\n    editType: 'ticks',\n    description: 'Sets the width (in px) of the grid lines.'\n  };\n  if (!minor) obj.dflt = 1;\n  return obj;\n}\nvar griddash = extendFlat({}, dash, {\n  editType: 'ticks'\n});\nvar showgrid = {\n  valType: 'boolean',\n  editType: 'ticks',\n  description: ['Determines whether or not grid lines are drawn.', 'If *true*, the grid lines are drawn at every tick mark.'].join(' ')\n};\nmodule.exports = {\n  visible: {\n    valType: 'boolean',\n    editType: 'plot',\n    description: ['A single toggle to hide the axis while preserving interaction like dragging.', 'Default is true when a cheater plot is present on the axis, otherwise', 'false'].join(' ')\n  },\n  color: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    editType: 'ticks',\n    description: ['Sets default for all colors associated with this axis', 'all at once: line, font, tick, and grid colors.', 'Grid color is lightened by blending this with the plot background', 'Individual pieces can override this.'].join(' ')\n  },\n  title: {\n    text: {\n      valType: 'string',\n      editType: 'ticks',\n      description: ['Sets the title of this axis.', 'Note that before the existence of `title.text`, the title\\'s', 'contents used to be defined as the `title` attribute itself.', 'This behavior has been deprecated.'].join(' ')\n    },\n    font: fontAttrs({\n      editType: 'ticks',\n      description: ['Sets this axis\\' title font.', 'Note that the title\\'s font used to be customized', 'by the now deprecated `titlefont` attribute.'].join(' ')\n    }),\n    standoff: {\n      valType: 'number',\n      min: 0,\n      editType: 'ticks',\n      description: ['Sets the standoff distance (in px) between the axis labels and the title text', 'The default value is a function of the axis tick labels, the title `font.size`', 'and the axis `linewidth`.', 'Note that the axis title position is always constrained within the margins,', 'so the actual standoff distance is always less than the set or default value.', 'By setting `standoff` and turning on `automargin`, plotly.js will push the', 'margins to fit the axis title at given standoff distance.'].join(' ')\n    },\n    editType: 'ticks'\n  },\n  type: {\n    valType: 'enumerated',\n    // '-' means we haven't yet run autotype or couldn't find any data\n    // it gets turned into linear in gd._fullLayout but not copied back\n    // to gd.data like the others are.\n    values: ['-', 'linear', 'log', 'date', 'category', 'multicategory'],\n    dflt: '-',\n    editType: 'calc',\n    // we forget when an axis has been autotyped, just writing the auto\n    // value back to the input - so it doesn't make sense to template this.\n    // Note: we do NOT prohibit this in `coerce`, so if someone enters a\n    // type in the template explicitly it will be honored as the default.\n    _noTemplating: true,\n    description: ['Sets the axis type.', 'By default, plotly attempts to determined the axis type', 'by looking into the data of the traces that referenced', 'the axis in question.'].join(' ')\n  },\n  autotypenumbers: {\n    valType: 'enumerated',\n    values: ['convert types', 'strict'],\n    dflt: 'convert types',\n    editType: 'calc',\n    description: ['Using *strict* a numeric string in trace data is not converted to a number.', 'Using *convert types* a numeric string in trace data may be', 'treated as a number during automatic axis `type` detection.', 'Defaults to layout.autotypenumbers.'].join(' ')\n  },\n  autorange: {\n    valType: 'enumerated',\n    values: [true, false, 'reversed', 'min reversed', 'max reversed', 'min', 'max'],\n    dflt: true,\n    editType: 'axrange',\n    impliedEdits: {\n      'range[0]': undefined,\n      'range[1]': undefined\n    },\n    description: ['Determines whether or not the range of this axis is', 'computed in relation to the input data.', 'See `rangemode` for more info.', 'If `range` is provided and it has a value for both the', 'lower and upper bound, `autorange` is set to *false*.', 'Using *min* applies autorange only to set the minimum.', 'Using *max* applies autorange only to set the maximum.', 'Using *min reversed* applies autorange only to set the minimum on a reversed axis.', 'Using *max reversed* applies autorange only to set the maximum on a reversed axis.', 'Using *reversed* applies autorange on both ends and reverses the axis direction.'].join(' ')\n  },\n  autorangeoptions: {\n    minallowed: {\n      valType: 'any',\n      editType: 'plot',\n      impliedEdits: {\n        'range[0]': undefined,\n        'range[1]': undefined\n      },\n      description: ['Use this value exactly as autorange minimum.'].join(' ')\n    },\n    maxallowed: {\n      valType: 'any',\n      editType: 'plot',\n      impliedEdits: {\n        'range[0]': undefined,\n        'range[1]': undefined\n      },\n      description: ['Use this value exactly as autorange maximum.'].join(' ')\n    },\n    clipmin: {\n      valType: 'any',\n      editType: 'plot',\n      impliedEdits: {\n        'range[0]': undefined,\n        'range[1]': undefined\n      },\n      description: ['Clip autorange minimum if it goes beyond this value.', 'Has no effect when `autorangeoptions.minallowed` is provided.'].join(' ')\n    },\n    clipmax: {\n      valType: 'any',\n      editType: 'plot',\n      impliedEdits: {\n        'range[0]': undefined,\n        'range[1]': undefined\n      },\n      description: ['Clip autorange maximum if it goes beyond this value.', 'Has no effect when `autorangeoptions.maxallowed` is provided.'].join(' ')\n    },\n    include: {\n      valType: 'any',\n      arrayOk: true,\n      editType: 'plot',\n      impliedEdits: {\n        'range[0]': undefined,\n        'range[1]': undefined\n      },\n      description: ['Ensure this value is included in autorange.'].join(' ')\n    },\n    editType: 'plot'\n  },\n  rangemode: {\n    valType: 'enumerated',\n    values: ['normal', 'tozero', 'nonnegative'],\n    dflt: 'normal',\n    editType: 'plot',\n    description: ['If *normal*, the range is computed in relation to the extrema', 'of the input data.', 'If *tozero*`, the range extends to 0,', 'regardless of the input data', 'If *nonnegative*, the range is non-negative,', 'regardless of the input data.', 'Applies only to linear axes.'].join(' ')\n  },\n  range: {\n    valType: 'info_array',\n    items: [{\n      valType: 'any',\n      editType: 'axrange',\n      impliedEdits: {\n        '^autorange': false\n      },\n      anim: true\n    }, {\n      valType: 'any',\n      editType: 'axrange',\n      impliedEdits: {\n        '^autorange': false\n      },\n      anim: true\n    }],\n    editType: 'axrange',\n    impliedEdits: {\n      autorange: false\n    },\n    anim: true,\n    description: ['Sets the range of this axis.', 'If the axis `type` is *log*, then you must take the log of your', 'desired range (e.g. to set the range from 1 to 100,', 'set the range from 0 to 2).', 'If the axis `type` is *date*, it should be date strings,', 'like date data, though Date objects and unix milliseconds', 'will be accepted and converted to strings.', 'If the axis `type` is *category*, it should be numbers,', 'using the scale where each category is assigned a serial', 'number from zero in the order it appears.', 'Leaving either or both elements `null` impacts the default `autorange`.'].join(' ')\n  },\n  minallowed: {\n    valType: 'any',\n    editType: 'plot',\n    impliedEdits: {\n      '^autorange': false\n    },\n    description: ['Determines the minimum range of this axis.'].join(' ')\n  },\n  maxallowed: {\n    valType: 'any',\n    editType: 'plot',\n    impliedEdits: {\n      '^autorange': false\n    },\n    description: ['Determines the maximum range of this axis.'].join(' ')\n  },\n  fixedrange: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'calc',\n    description: ['Determines whether or not this axis is zoom-able.', 'If true, then zoom is disabled.'].join(' ')\n  },\n  insiderange: {\n    valType: 'info_array',\n    items: [{\n      valType: 'any',\n      editType: 'plot'\n    }, {\n      valType: 'any',\n      editType: 'plot'\n    }],\n    editType: 'plot',\n    description: ['Could be used to set the desired inside range of this axis', '(excluding the labels) when `ticklabelposition` of', 'the anchored axis has *inside*.', 'Not implemented for axes with `type` *log*.', 'This would be ignored when `range` is provided.'].join(' ')\n  },\n  // scaleanchor: not used directly, just put here for reference\n  // values are any opposite-letter axis id, or `false`.\n  scaleanchor: {\n    valType: 'enumerated',\n    values: [constants.idRegex.x.toString(), constants.idRegex.y.toString(), false],\n    editType: 'plot',\n    description: ['If set to another axis id (e.g. `x2`, `y`), the range of this axis', 'changes together with the range of the corresponding axis', 'such that the scale of pixels per unit is in a constant ratio.', 'Both axes are still zoomable, but when you zoom one, the other will', 'zoom the same amount, keeping a fixed midpoint.', '`constrain` and `constraintoward` determine how we enforce the constraint.', 'You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}`', 'but you can only link axes of the same `type`.', 'The linked axis can have the opposite letter (to constrain the aspect ratio)', 'or the same letter (to match scales across subplots).', 'Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant', 'and the last constraint encountered will be ignored to avoid possible', 'inconsistent constraints via `scaleratio`.', 'Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint', 'is currently forbidden.', 'Setting `false` allows to remove a default constraint (occasionally,', 'you may need to prevent a default `scaleanchor` constraint from', 'being applied, eg. when having an image trace `yaxis: {scaleanchor: \"x\"}`', 'is set automatically in order for pixels to be rendered as squares,', 'setting `yaxis: {scaleanchor: false}` allows to remove the constraint).'].join(' ')\n  },\n  scaleratio: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    editType: 'plot',\n    description: ['If this axis is linked to another by `scaleanchor`, this determines the pixel', 'to unit scale ratio. For example, if this value is 10, then every unit on', 'this axis spans 10 times the number of pixels as a unit on the linked axis.', 'Use this for example to create an elevation profile where the vertical scale', 'is exaggerated a fixed amount with respect to the horizontal.'].join(' ')\n  },\n  constrain: {\n    valType: 'enumerated',\n    values: ['range', 'domain'],\n    editType: 'plot',\n    description: ['If this axis needs to be compressed (either due to its own `scaleanchor` and', '`scaleratio` or those of the other axis), determines how that happens:', 'by increasing the *range*, or by decreasing the *domain*.', 'Default is *domain* for axes containing image traces, *range* otherwise.'].join(' ')\n  },\n  // constraintoward: not used directly, just put here for reference\n  constraintoward: {\n    valType: 'enumerated',\n    values: ['left', 'center', 'right', 'top', 'middle', 'bottom'],\n    editType: 'plot',\n    description: ['If this axis needs to be compressed (either due to its own `scaleanchor` and', '`scaleratio` or those of the other axis), determines which direction we push', 'the originally specified plot area. Options are *left*, *center* (default),', 'and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.'].join(' ')\n  },\n  matches: {\n    valType: 'enumerated',\n    values: [constants.idRegex.x.toString(), constants.idRegex.y.toString()],\n    editType: 'calc',\n    description: ['If set to another axis id (e.g. `x2`, `y`), the range of this axis', 'will match the range of the corresponding axis in data-coordinates space.', 'Moreover, matching axes share auto-range values, category lists and', 'histogram auto-bins.', 'Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint', 'is currently forbidden.', 'Moreover, note that matching axes must have the same `type`.'].join(' ')\n  },\n  rangebreaks: templatedArray('rangebreak', {\n    enabled: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'calc',\n      description: ['Determines whether this axis rangebreak is enabled or disabled.', 'Please note that `rangebreaks` only work for *date* axis type.'].join(' ')\n    },\n    bounds: {\n      valType: 'info_array',\n      items: [{\n        valType: 'any',\n        editType: 'calc'\n      }, {\n        valType: 'any',\n        editType: 'calc'\n      }],\n      editType: 'calc',\n      description: ['Sets the lower and upper bounds of this axis rangebreak.', 'Can be used with `pattern`.'].join(' ')\n    },\n    pattern: {\n      valType: 'enumerated',\n      values: [DAY_OF_WEEK, HOUR, ''],\n      editType: 'calc',\n      description: ['Determines a pattern on the time line that generates breaks.', 'If *' + DAY_OF_WEEK + '* - days of the week in English e.g. \\'Sunday\\' or `\\sun\\`', '(matching is case-insensitive and considers only the first three characters),', 'as well as Sunday-based integers between 0 and 6.', 'If *' + HOUR + '* - hour (24-hour clock) as decimal numbers between 0 and 24.', 'for more info.', 'Examples:', '- { pattern: \\'' + DAY_OF_WEEK + '\\', bounds: [6, 1] }', ' or simply { bounds: [\\'sat\\', \\'mon\\'] }', '  breaks from Saturday to Monday (i.e. skips the weekends).', '- { pattern: \\'' + HOUR + '\\', bounds: [17, 8] }', '  breaks from 5pm to 8am (i.e. skips non-work hours).'].join(' ')\n    },\n    values: {\n      valType: 'info_array',\n      freeLength: true,\n      editType: 'calc',\n      items: {\n        valType: 'any',\n        editType: 'calc'\n      },\n      description: ['Sets the coordinate values corresponding to the rangebreaks.', 'An alternative to `bounds`.', 'Use `dvalue` to set the size of the values along the axis.'].join(' ')\n    },\n    dvalue: {\n      // TODO could become 'any' to add support for 'months', 'years'\n      valType: 'number',\n      editType: 'calc',\n      min: 0,\n      dflt: ONEDAY,\n      description: ['Sets the size of each `values` item.', 'The default is one day in milliseconds.'].join(' ')\n    },\n    /*\n    gap: {\n        valType: 'number',\n        min: 0,\n        dflt: 0, // for *date* axes, maybe something else for *linear*\n        editType: 'calc',\n        description: [\n            'Sets the gap distance between the start and the end of this rangebreak.',\n            'Use with `gapmode` to set the unit of measurement.'\n        ].join(' ')\n    },\n    gapmode: {\n        valType: 'enumerated',\n        values: ['pixels', 'fraction'],\n        dflt: 'pixels',\n        editType: 'calc',\n        description: [\n            'Determines if the `gap` value corresponds to a pixel length',\n            'or a fraction of the plot area.'\n        ].join(' ')\n    },\n    */\n\n    // To complete https://github.com/plotly/plotly.js/issues/4210\n    // we additionally need `gap` and make this work on *linear*, and\n    // possibly all other cartesian axis types. We possibly would also need\n    // some style attributes controlling the zig-zag on the corresponding\n    // axis.\n\n    editType: 'calc'\n  }),\n  // ticks\n  tickmode: tickmode,\n  nticks: makeNticks(),\n  tick0: tick0,\n  dtick: dtick,\n  ticklabelstep: {\n    valType: 'integer',\n    min: 1,\n    dflt: 1,\n    editType: 'ticks',\n    description: ['Sets the spacing between tick labels as compared to the spacing between ticks.', 'A value of 1 (default) means each tick gets a label.', 'A value of 2 means shows every 2nd label.', 'A larger value n means only every nth tick is labeled.', '`tick0` determines which labels are shown.', 'Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.'].join(' ')\n  },\n  tickvals: tickvals,\n  ticktext: {\n    valType: 'data_array',\n    editType: 'ticks',\n    description: ['Sets the text displayed at the ticks position via `tickvals`.', 'Only has an effect if `tickmode` is set to *array*.', 'Used with `tickvals`.'].join(' ')\n  },\n  ticks: ticks,\n  tickson: {\n    valType: 'enumerated',\n    values: ['labels', 'boundaries'],\n    dflt: 'labels',\n    editType: 'ticks',\n    description: ['Determines where ticks and grid lines are drawn with respect to their', 'corresponding tick labels.', 'Only has an effect for axes of `type` *category* or *multicategory*.', 'When set to *boundaries*, ticks and grid lines are drawn half a category', 'to the left/bottom of labels.'].join(' ')\n  },\n  ticklabelmode: {\n    valType: 'enumerated',\n    values: ['instant', 'period'],\n    dflt: 'instant',\n    editType: 'ticks',\n    description: ['Determines where tick labels are drawn with respect to their', 'corresponding ticks and grid lines.', 'Only has an effect for axes of `type` *date*', 'When set to *period*, tick labels are drawn in the middle of the period', 'between ticks.'].join(' ')\n  },\n  // ticklabelposition: not used directly, as values depend on direction (similar to side)\n  // left/right options are for x axes, and top/bottom options are for y axes\n  ticklabelposition: {\n    valType: 'enumerated',\n    values: ['outside', 'inside', 'outside top', 'inside top', 'outside left', 'inside left', 'outside right', 'inside right', 'outside bottom', 'inside bottom'],\n    dflt: 'outside',\n    editType: 'calc',\n    description: ['Determines where tick labels are drawn with respect to the axis', 'Please note that', 'top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*.', 'Similarly', 'left or right has no effect on y axes or when `ticklabelmode` is set to *period*.', 'Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*.', 'When used on axes linked by `matches` or `scaleanchor`,', 'no extra padding for inside labels would be added by autorange,', 'so that the scales could match.'].join(' ')\n  },\n  ticklabeloverflow: {\n    valType: 'enumerated',\n    values: ['allow', 'hide past div', 'hide past domain'],\n    editType: 'calc',\n    description: ['Determines how we handle tick labels that would overflow either the graph div or the domain of the axis.', 'The default value for inside tick labels is *hide past domain*.', 'Otherwise on *category* and *multicategory* axes the default is *allow*.', 'In other cases the default is *hide past div*.'].join(' ')\n  },\n  ticklabelshift: {\n    valType: 'integer',\n    dflt: 0,\n    editType: 'ticks',\n    description: ['Shifts the tick labels by the specified number of pixels in parallel to the axis.', 'Positive values move the labels in the positive direction of the axis.'].join(' ')\n  },\n  ticklabelstandoff: {\n    valType: 'integer',\n    dflt: 0,\n    editType: 'ticks',\n    description: ['Sets the standoff distance (in px) between the axis tick labels and their default position.', 'A positive `ticklabelstandoff` moves the labels farther away from the plot area', 'if `ticklabelposition` is *outside*, and deeper into the plot area if', '`ticklabelposition` is *inside*. A negative `ticklabelstandoff` works in the opposite', 'direction, moving outside ticks towards the plot area and inside ticks towards', 'the outside. If the negative value is large enough, inside ticks can even end up', 'outside and vice versa.'].join(' ')\n  },\n  ticklabelindex: {\n    // in the future maybe add `extras: ['all', 'minor']` to allow showing labels for all ticks\n    // or for all minor ticks.\n    valType: 'integer',\n    arrayOk: true,\n    editType: 'calc',\n    description: ['Only for axes with `type` *date* or *linear*.', 'Instead of drawing the major tick label, draw the label for the minor tick', 'that is n positions away from the major tick. E.g. to always draw the label for the', 'minor tick before each major tick, choose `ticklabelindex` -1. This is useful for date', 'axes with `ticklabelmode` *period* if you want to label the period that ends with each', 'major tick instead of the period that begins there.'].join(' ')\n  },\n  mirror: {\n    valType: 'enumerated',\n    values: [true, 'ticks', false, 'all', 'allticks'],\n    dflt: false,\n    editType: 'ticks+layoutstyle',\n    description: ['Determines if the axis lines or/and ticks are mirrored to', 'the opposite side of the plotting area.', 'If *true*, the axis lines are mirrored.', 'If *ticks*, the axis lines and ticks are mirrored.', 'If *false*, mirroring is disable.', 'If *all*, axis lines are mirrored on all shared-axes subplots.', 'If *allticks*, axis lines and ticks are mirrored', 'on all shared-axes subplots.'].join(' ')\n  },\n  ticklen: makeTicklen(),\n  tickwidth: makeTickwidth(),\n  tickcolor: tickcolor,\n  showticklabels: {\n    valType: 'boolean',\n    dflt: true,\n    editType: 'ticks',\n    description: 'Determines whether or not the tick labels are drawn.'\n  },\n  labelalias: {\n    valType: 'any',\n    dflt: false,\n    editType: 'ticks',\n    description: ['Replacement text for specific tick or hover labels.', 'For example using {US: \\'USA\\', CA: \\'Canada\\'} changes US to USA', 'and CA to Canada. The labels we would have shown must match', 'the keys exactly, after adding any tickprefix or ticksuffix.', 'For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash.', 'That means you need to use −1 instead of -1.', 'labelalias can be used with any axis type, and both keys (if needed)', 'and values (if desired) can include html-like tags or MathJax.'].join(' ')\n  },\n  automargin: {\n    valType: 'flaglist',\n    flags: ['height', 'width', 'left', 'right', 'top', 'bottom'],\n    extras: [true, false],\n    dflt: false,\n    editType: 'ticks',\n    description: ['Determines whether long tick labels automatically grow the figure', 'margins.'].join(' ')\n  },\n  showspikes: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'modebar',\n    description: ['Determines whether or not spikes (aka droplines) are drawn for this axis.', 'Note: This only takes affect when hovermode = closest'].join(' ')\n  },\n  spikecolor: {\n    valType: 'color',\n    dflt: null,\n    editType: 'none',\n    description: 'Sets the spike color. If undefined, will use the series color'\n  },\n  spikethickness: {\n    valType: 'number',\n    dflt: 3,\n    editType: 'none',\n    description: 'Sets the width (in px) of the zero line.'\n  },\n  spikedash: extendFlat({}, dash, {\n    dflt: 'dash',\n    editType: 'none'\n  }),\n  spikemode: {\n    valType: 'flaglist',\n    flags: ['toaxis', 'across', 'marker'],\n    dflt: 'toaxis',\n    editType: 'none',\n    description: ['Determines the drawing mode for the spike line', 'If *toaxis*, the line is drawn from the data point to the axis the ', 'series is plotted on.', 'If *across*, the line is drawn across the entire plot area, and', 'supercedes *toaxis*.', 'If *marker*, then a marker dot is drawn on the axis the series is', 'plotted on'].join(' ')\n  },\n  spikesnap: {\n    valType: 'enumerated',\n    values: ['data', 'cursor', 'hovered data'],\n    dflt: 'hovered data',\n    editType: 'none',\n    description: 'Determines whether spikelines are stuck to the cursor or to the closest datapoints.'\n  },\n  tickfont: fontAttrs({\n    editType: 'ticks',\n    description: 'Sets the tick font.'\n  }),\n  tickangle: {\n    valType: 'angle',\n    dflt: 'auto',\n    editType: 'ticks',\n    description: ['Sets the angle of the tick labels with respect to the horizontal.', 'For example, a `tickangle` of -90 draws the tick labels', 'vertically.'].join(' ')\n  },\n  autotickangles: {\n    valType: 'info_array',\n    freeLength: true,\n    items: {\n      valType: 'angle'\n    },\n    dflt: [0, 30, 90],\n    editType: 'ticks',\n    description: ['When `tickangle` is set to *auto*, it will be set to the first', 'angle in this array that is large enough to prevent label', 'overlap.'].join(' ')\n  },\n  tickprefix: {\n    valType: 'string',\n    dflt: '',\n    editType: 'ticks',\n    description: 'Sets a tick label prefix.'\n  },\n  showtickprefix: {\n    valType: 'enumerated',\n    values: ['all', 'first', 'last', 'none'],\n    dflt: 'all',\n    editType: 'ticks',\n    description: ['If *all*, all tick labels are displayed with a prefix.', 'If *first*, only the first tick is displayed with a prefix.', 'If *last*, only the last tick is displayed with a suffix.', 'If *none*, tick prefixes are hidden.'].join(' ')\n  },\n  ticksuffix: {\n    valType: 'string',\n    dflt: '',\n    editType: 'ticks',\n    description: 'Sets a tick label suffix.'\n  },\n  showticksuffix: {\n    valType: 'enumerated',\n    values: ['all', 'first', 'last', 'none'],\n    dflt: 'all',\n    editType: 'ticks',\n    description: 'Same as `showtickprefix` but for tick suffixes.'\n  },\n  showexponent: {\n    valType: 'enumerated',\n    values: ['all', 'first', 'last', 'none'],\n    dflt: 'all',\n    editType: 'ticks',\n    description: ['If *all*, all exponents are shown besides their significands.', 'If *first*, only the exponent of the first tick is shown.', 'If *last*, only the exponent of the last tick is shown.', 'If *none*, no exponents appear.'].join(' ')\n  },\n  exponentformat: {\n    valType: 'enumerated',\n    values: ['none', 'e', 'E', 'power', 'SI', 'B'],\n    dflt: 'B',\n    editType: 'ticks',\n    description: ['Determines a formatting rule for the tick exponents.', 'For example, consider the number 1,000,000,000.', 'If *none*, it appears as 1,000,000,000.', 'If *e*, 1e+9.', 'If *E*, 1E+9.', 'If *power*, 1x10^9 (with 9 in a super script).', 'If *SI*, 1G.', 'If *B*, 1B.'].join(' ')\n  },\n  minexponent: {\n    valType: 'number',\n    dflt: 3,\n    min: 0,\n    editType: 'ticks',\n    description: ['Hide SI prefix for 10^n if |n| is below this number.', 'This only has an effect when `tickformat` is *SI* or *B*.'].join(' ')\n  },\n  separatethousands: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'ticks',\n    description: ['If \"true\", even 4-digit integers are separated'].join(' ')\n  },\n  tickformat: {\n    valType: 'string',\n    dflt: '',\n    editType: 'ticks',\n    description: descriptionWithDates('tick label')\n  },\n  tickformatstops: templatedArray('tickformatstop', {\n    enabled: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'ticks',\n      description: ['Determines whether or not this stop is used.', 'If `false`, this stop is ignored even within its `dtickrange`.'].join(' ')\n    },\n    dtickrange: {\n      valType: 'info_array',\n      items: [{\n        valType: 'any',\n        editType: 'ticks'\n      }, {\n        valType: 'any',\n        editType: 'ticks'\n      }],\n      editType: 'ticks',\n      description: ['range [*min*, *max*], where *min*, *max* - dtick values', 'which describe some zoom level, it is possible to omit *min*', 'or *max* value by passing *null*'].join(' ')\n    },\n    value: {\n      valType: 'string',\n      dflt: '',\n      editType: 'ticks',\n      description: ['string - dtickformat for described zoom level, the same as *tickformat*'].join(' ')\n    },\n    editType: 'ticks'\n  }),\n  hoverformat: {\n    valType: 'string',\n    dflt: '',\n    editType: 'none',\n    description: descriptionWithDates('hover text')\n  },\n  // lines and grids\n  showline: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'ticks+layoutstyle',\n    description: ['Determines whether or not a line bounding this axis is drawn.'].join(' ')\n  },\n  linecolor: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    editType: 'layoutstyle',\n    description: 'Sets the axis line color.'\n  },\n  linewidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    editType: 'ticks+layoutstyle',\n    description: 'Sets the width (in px) of the axis line.'\n  },\n  showgrid: showgrid,\n  gridcolor: gridcolor,\n  gridwidth: makeGridwidth(),\n  griddash: griddash,\n  zeroline: {\n    valType: 'boolean',\n    editType: 'ticks',\n    description: ['Determines whether or not a line is drawn at along the 0 value', 'of this axis.', 'If *true*, the zero line is drawn on top of the grid lines.'].join(' ')\n  },\n  zerolinecolor: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    editType: 'ticks',\n    description: 'Sets the line color of the zero line.'\n  },\n  zerolinewidth: {\n    valType: 'number',\n    dflt: 1,\n    editType: 'ticks',\n    description: 'Sets the width (in px) of the zero line.'\n  },\n  showdividers: {\n    valType: 'boolean',\n    dflt: true,\n    editType: 'ticks',\n    description: ['Determines whether or not a dividers are drawn', 'between the category levels of this axis.', 'Only has an effect on *multicategory* axes.'].join(' ')\n  },\n  dividercolor: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    editType: 'ticks',\n    description: ['Sets the color of the dividers', 'Only has an effect on *multicategory* axes.'].join(' ')\n  },\n  dividerwidth: {\n    valType: 'number',\n    dflt: 1,\n    editType: 'ticks',\n    description: ['Sets the width (in px) of the dividers', 'Only has an effect on *multicategory* axes.'].join(' ')\n  },\n  // TODO dividerlen: that would override \"to label base\" length?\n\n  // positioning attributes\n  // anchor: not used directly, just put here for reference\n  // values are any opposite-letter axis id\n  anchor: {\n    valType: 'enumerated',\n    values: ['free', constants.idRegex.x.toString(), constants.idRegex.y.toString()],\n    editType: 'plot',\n    description: ['If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to', 'the corresponding opposite-letter axis.', 'If set to *free*, this axis\\' position is determined by `position`.'].join(' ')\n  },\n  // side: not used directly, as values depend on direction\n  // values are top, bottom for x axes, and left, right for y\n  side: {\n    valType: 'enumerated',\n    values: ['top', 'bottom', 'left', 'right'],\n    editType: 'plot',\n    description: ['Determines whether a x (y) axis is positioned', 'at the *bottom* (*left*) or *top* (*right*)', 'of the plotting area.'].join(' ')\n  },\n  // overlaying: not used directly, just put here for reference\n  // values are false and any other same-letter axis id that's not\n  // itself overlaying anything\n  overlaying: {\n    valType: 'enumerated',\n    values: ['free', constants.idRegex.x.toString(), constants.idRegex.y.toString()],\n    editType: 'plot',\n    description: ['If set a same-letter axis id, this axis is overlaid on top of', 'the corresponding same-letter axis, with traces and axes visible for both', 'axes.', 'If *false*, this axis does not overlay any same-letter axes.', 'In this case, for axes with overlapping domains only the highest-numbered', 'axis will be visible.'].join(' ')\n  },\n  minor: {\n    tickmode: minorTickmode,\n    nticks: makeNticks('minor'),\n    tick0: tick0,\n    dtick: dtick,\n    tickvals: tickvals,\n    ticks: ticks,\n    ticklen: makeTicklen('minor'),\n    tickwidth: makeTickwidth('minor'),\n    tickcolor: tickcolor,\n    gridcolor: gridcolor,\n    gridwidth: makeGridwidth('minor'),\n    griddash: griddash,\n    showgrid: showgrid,\n    editType: 'ticks'\n  },\n  layer: {\n    valType: 'enumerated',\n    values: ['above traces', 'below traces'],\n    dflt: 'above traces',\n    editType: 'plot',\n    description: ['Sets the layer on which this axis is displayed.', 'If *above traces*, this axis is displayed above all the subplot\\'s traces', 'If *below traces*, this axis is displayed below all the subplot\\'s traces,', 'but above the grid lines.', 'Useful when used together with scatter-like traces with `cliponaxis`', 'set to *false* to show markers and/or text nodes above this axis.'].join(' ')\n  },\n  domain: {\n    valType: 'info_array',\n    items: [{\n      valType: 'number',\n      min: 0,\n      max: 1,\n      editType: 'plot'\n    }, {\n      valType: 'number',\n      min: 0,\n      max: 1,\n      editType: 'plot'\n    }],\n    dflt: [0, 1],\n    editType: 'plot',\n    description: ['Sets the domain of this axis (in plot fraction).'].join(' ')\n  },\n  position: {\n    valType: 'number',\n    min: 0,\n    max: 1,\n    dflt: 0,\n    editType: 'plot',\n    description: ['Sets the position of this axis in the plotting space', '(in normalized coordinates).', 'Only has an effect if `anchor` is set to *free*.'].join(' ')\n  },\n  autoshift: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'plot',\n    description: ['Automatically reposition the axis to avoid', 'overlap with other axes with the same `overlaying` value.', 'This repositioning will account for any `shift` amount applied to other', 'axes on the same side with `autoshift` is set to true.', 'Only has an effect if `anchor` is set to *free*.'].join(' ')\n  },\n  shift: {\n    valType: 'number',\n    editType: 'plot',\n    description: ['Moves the axis a given number of pixels from where it would have been otherwise.', 'Accepts both positive and negative values, which will shift the axis either right', 'or left, respectively.', 'If `autoshift` is set to true, then this defaults to a padding of -3 if `side` is set to *left*.', 'and defaults to +3 if `side` is set to *right*. Defaults to 0 if `autoshift` is set to false.', 'Only has an effect if `anchor` is set to *free*.'].join(' ')\n  },\n  categoryorder: {\n    valType: 'enumerated',\n    values: ['trace', 'category ascending', 'category descending', 'array', 'total ascending', 'total descending', 'min ascending', 'min descending', 'max ascending', 'max descending', 'sum ascending', 'sum descending', 'mean ascending', 'mean descending', 'geometric mean ascending', 'geometric mean descending', 'median ascending', 'median descending'],\n    dflt: 'trace',\n    editType: 'calc',\n    description: ['Specifies the ordering logic for the case of categorical variables.', 'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.', 'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by', 'the alphanumerical order of the category names.', 'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category', 'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to', 'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.', 'Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the', 'numerical order of the values.', 'Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.'].join(' ')\n  },\n  categoryarray: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the order in which categories on this axis appear.', 'Only has an effect if `categoryorder` is set to *array*.', 'Used with `categoryorder`.'].join(' ')\n  },\n  uirevision: {\n    valType: 'any',\n    editType: 'none',\n    description: ['Controls persistence of user-driven changes in axis `range`,', '`autorange`, and `title` if in `editable: true` configuration.', 'Defaults to `layout.uirevision`.'].join(' ')\n  },\n  editType: 'calc',\n  _deprecated: {\n    autotick: {\n      valType: 'boolean',\n      editType: 'ticks',\n      description: ['Obsolete.', 'Set `tickmode` to *auto* for old `autotick` *true* behavior.', 'Set `tickmode` to *linear* for `autotick` *false*.'].join(' ')\n    },\n    title: {\n      valType: 'string',\n      editType: 'ticks',\n      description: ['Value of `title` is no longer a simple *string* but a set of sub-attributes.', 'To set the axis\\' title, please use `title.text` now.'].join(' ')\n    },\n    titlefont: fontAttrs({\n      editType: 'ticks',\n      description: ['Former `titlefont` is now the sub-attribute `font` of `title`.', 'To customize title font properties, please use `title.font` now.'].join(' ')\n    })\n  }\n};","map":{"version":3,"names":["fontAttrs","require","colorAttrs","dash","extendFlat","templatedArray","descriptionWithDates","ONEDAY","constants","HOUR","HOUR_PATTERN","DAY_OF_WEEK","WEEKDAY_PATTERN","minorTickmode","valType","values","editType","impliedEdits","tick0","undefined","dtick","description","join","tickmode","slice","concat","makeNticks","minor","min","dflt","tickvals","ticks","makeTicklen","obj","makeTickwidth","tickcolor","defaultLine","gridcolor","lightLine","makeGridwidth","griddash","showgrid","module","exports","visible","color","title","text","font","standoff","type","_noTemplating","autotypenumbers","autorange","autorangeoptions","minallowed","maxallowed","clipmin","clipmax","include","arrayOk","rangemode","range","items","anim","fixedrange","insiderange","scaleanchor","idRegex","x","toString","y","scaleratio","constrain","constraintoward","matches","rangebreaks","enabled","bounds","pattern","freeLength","dvalue","nticks","ticklabelstep","ticktext","tickson","ticklabelmode","ticklabelposition","ticklabeloverflow","ticklabelshift","ticklabelstandoff","ticklabelindex","mirror","ticklen","tickwidth","showticklabels","labelalias","automargin","flags","extras","showspikes","spikecolor","spikethickness","spikedash","spikemode","spikesnap","tickfont","tickangle","autotickangles","tickprefix","showtickprefix","ticksuffix","showticksuffix","showexponent","exponentformat","minexponent","separatethousands","tickformat","tickformatstops","dtickrange","value","hoverformat","showline","linecolor","linewidth","gridwidth","zeroline","zerolinecolor","zerolinewidth","showdividers","dividercolor","dividerwidth","anchor","side","overlaying","layer","domain","max","position","autoshift","shift","categoryorder","categoryarray","uirevision","_deprecated","autotick","titlefont"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/plots/cartesian/layout_attributes.js"],"sourcesContent":["'use strict';\n\nvar fontAttrs = require('../font_attributes');\nvar colorAttrs = require('../../components/color/attributes');\nvar dash = require('../../components/drawing/attributes').dash;\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar templatedArray = require('../../plot_api/plot_template').templatedArray;\nvar descriptionWithDates = require('../../plots/cartesian/axis_format_attributes').descriptionWithDates;\n\nvar ONEDAY = require('../../constants/numerical').ONEDAY;\nvar constants = require('./constants');\nvar HOUR = constants.HOUR_PATTERN;\nvar DAY_OF_WEEK = constants.WEEKDAY_PATTERN;\n\nvar minorTickmode = {\n    valType: 'enumerated',\n    values: ['auto', 'linear', 'array'],\n    editType: 'ticks',\n    impliedEdits: {tick0: undefined, dtick: undefined},\n    description: [\n        'Sets the tick mode for this axis.',\n        'If *auto*, the number of ticks is set via `nticks`.',\n        'If *linear*, the placement of the ticks is determined by',\n        'a starting position `tick0` and a tick step `dtick`',\n        '(*linear* is the default value if `tick0` and `dtick` are provided).',\n        'If *array*, the placement of the ticks is set via `tickvals`',\n        'and the tick text is `ticktext`.',\n        '(*array* is the default value if `tickvals` is provided).'\n    ].join(' ')\n};\n\nvar tickmode = extendFlat({}, minorTickmode, {\n    values: minorTickmode.values.slice().concat(['sync']),\n    description: [\n        minorTickmode.description,\n        'If *sync*, the number of ticks will sync with the overlayed axis',\n        'set by `overlaying` property.'\n    ].join(' ')\n});\n\nfunction makeNticks(minor) {\n    return {\n        valType: 'integer',\n        min: 0,\n        dflt: minor ? 5 : 0,\n        editType: 'ticks',\n        description: [\n            'Specifies the maximum number of ticks for the particular axis.',\n            'The actual number of ticks will be chosen automatically to be',\n            'less than or equal to `nticks`.',\n            'Has an effect only if `tickmode` is set to *auto*.'\n        ].join(' ')\n    };\n}\n\nvar tick0 = {\n    valType: 'any',\n    editType: 'ticks',\n    impliedEdits: {tickmode: 'linear'},\n    description: [\n        'Sets the placement of the first tick on this axis.',\n        'Use with `dtick`.',\n        'If the axis `type` is *log*, then you must take the log of your starting tick',\n        '(e.g. to set the starting tick to 100, set the `tick0` to 2)',\n        'except when `dtick`=*L<f>* (see `dtick` for more info).',\n        'If the axis `type` is *date*, it should be a date string, like date data.',\n        'If the axis `type` is *category*, it should be a number, using the scale where',\n        'each category is assigned a serial number from zero in the order it appears.'\n    ].join(' ')\n};\n\nvar dtick = {\n    valType: 'any',\n    editType: 'ticks',\n    impliedEdits: {tickmode: 'linear'},\n    description: [\n        'Sets the step in-between ticks on this axis. Use with `tick0`.',\n        'Must be a positive number, or special strings available to *log* and *date* axes.',\n        'If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n',\n        'is the tick number. For example,',\n        'to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1.',\n        'To set tick marks at 1, 100, 10000, ... set dtick to 2.',\n        'To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433.',\n        '*log* has several special values; *L<f>*, where `f` is a positive number,',\n        'gives ticks linearly spaced in value (but not position).',\n        'For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc.',\n        'To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5).',\n        '`tick0` is ignored for *D1* and *D2*.',\n        'If the axis `type` is *date*, then you must convert the time to milliseconds.',\n        'For example, to set the interval between ticks to one day,',\n        'set `dtick` to 86400000.0.',\n        '*date* also has special values *M<n>* gives ticks spaced by a number of months.',\n        '`n` must be a positive integer.',\n        'To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*.',\n        'To set ticks every 4 years, set `dtick` to *M48*'\n    ].join(' ')\n};\n\nvar tickvals = {\n    valType: 'data_array',\n    editType: 'ticks',\n    description: [\n        'Sets the values at which ticks on this axis appear.',\n        'Only has an effect if `tickmode` is set to *array*.',\n        'Used with `ticktext`.'\n    ].join(' ')\n};\n\nvar ticks = {\n    valType: 'enumerated',\n    values: ['outside', 'inside', ''],\n    editType: 'ticks',\n    description: [\n        'Determines whether ticks are drawn or not.',\n        'If **, this axis\\' ticks are not drawn.',\n        'If *outside* (*inside*), this axis\\' are drawn outside (inside)',\n        'the axis lines.'\n    ].join(' ')\n};\n\nfunction makeTicklen(minor) {\n    var obj = {\n        valType: 'number',\n        min: 0,\n        editType: 'ticks',\n        description: 'Sets the tick length (in px).'\n    };\n\n    if(!minor) obj.dflt = 5;\n\n    return obj;\n}\n\nfunction makeTickwidth(minor) {\n    var obj = {\n        valType: 'number',\n        min: 0,\n        editType: 'ticks',\n        description: 'Sets the tick width (in px).'\n    };\n\n    if(!minor) obj.dflt = 1;\n\n    return obj;\n}\n\nvar tickcolor = {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    editType: 'ticks',\n    description: 'Sets the tick color.'\n};\n\nvar gridcolor = {\n    valType: 'color',\n    dflt: colorAttrs.lightLine,\n    editType: 'ticks',\n    description: 'Sets the color of the grid lines.'\n};\n\nfunction makeGridwidth(minor) {\n    var obj = {\n        valType: 'number',\n        min: 0,\n        editType: 'ticks',\n        description: 'Sets the width (in px) of the grid lines.'\n    };\n\n    if(!minor) obj.dflt = 1;\n\n    return obj;\n}\n\nvar griddash = extendFlat({}, dash, {editType: 'ticks'});\n\nvar showgrid = {\n    valType: 'boolean',\n    editType: 'ticks',\n    description: [\n        'Determines whether or not grid lines are drawn.',\n        'If *true*, the grid lines are drawn at every tick mark.'\n    ].join(' ')\n};\n\nmodule.exports = {\n    visible: {\n        valType: 'boolean',\n        editType: 'plot',\n        description: [\n            'A single toggle to hide the axis while preserving interaction like dragging.',\n            'Default is true when a cheater plot is present on the axis, otherwise',\n            'false'\n        ].join(' ')\n    },\n    color: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        editType: 'ticks',\n        description: [\n            'Sets default for all colors associated with this axis',\n            'all at once: line, font, tick, and grid colors.',\n            'Grid color is lightened by blending this with the plot background',\n            'Individual pieces can override this.'\n        ].join(' ')\n    },\n    title: {\n        text: {\n            valType: 'string',\n            editType: 'ticks',\n            description: [\n                'Sets the title of this axis.',\n                'Note that before the existence of `title.text`, the title\\'s',\n                'contents used to be defined as the `title` attribute itself.',\n                'This behavior has been deprecated.'\n            ].join(' ')\n        },\n        font: fontAttrs({\n            editType: 'ticks',\n            description: [\n                'Sets this axis\\' title font.',\n                'Note that the title\\'s font used to be customized',\n                'by the now deprecated `titlefont` attribute.'\n            ].join(' ')\n        }),\n        standoff: {\n            valType: 'number',\n            min: 0,\n            editType: 'ticks',\n            description: [\n                'Sets the standoff distance (in px) between the axis labels and the title text',\n                'The default value is a function of the axis tick labels, the title `font.size`',\n                'and the axis `linewidth`.',\n                'Note that the axis title position is always constrained within the margins,',\n                'so the actual standoff distance is always less than the set or default value.',\n                'By setting `standoff` and turning on `automargin`, plotly.js will push the',\n                'margins to fit the axis title at given standoff distance.'\n            ].join(' ')\n        },\n        editType: 'ticks'\n    },\n    type: {\n        valType: 'enumerated',\n        // '-' means we haven't yet run autotype or couldn't find any data\n        // it gets turned into linear in gd._fullLayout but not copied back\n        // to gd.data like the others are.\n        values: ['-', 'linear', 'log', 'date', 'category', 'multicategory'],\n        dflt: '-',\n        editType: 'calc',\n        // we forget when an axis has been autotyped, just writing the auto\n        // value back to the input - so it doesn't make sense to template this.\n        // Note: we do NOT prohibit this in `coerce`, so if someone enters a\n        // type in the template explicitly it will be honored as the default.\n        _noTemplating: true,\n        description: [\n            'Sets the axis type.',\n            'By default, plotly attempts to determined the axis type',\n            'by looking into the data of the traces that referenced',\n            'the axis in question.'\n        ].join(' ')\n    },\n    autotypenumbers: {\n        valType: 'enumerated',\n        values: ['convert types', 'strict'],\n        dflt: 'convert types',\n        editType: 'calc',\n        description: [\n            'Using *strict* a numeric string in trace data is not converted to a number.',\n            'Using *convert types* a numeric string in trace data may be',\n            'treated as a number during automatic axis `type` detection.',\n            'Defaults to layout.autotypenumbers.'\n        ].join(' ')\n    },\n    autorange: {\n        valType: 'enumerated',\n        values: [true, false, 'reversed', 'min reversed', 'max reversed', 'min', 'max'],\n        dflt: true,\n        editType: 'axrange',\n        impliedEdits: {'range[0]': undefined, 'range[1]': undefined},\n        description: [\n            'Determines whether or not the range of this axis is',\n            'computed in relation to the input data.',\n            'See `rangemode` for more info.',\n            'If `range` is provided and it has a value for both the',\n            'lower and upper bound, `autorange` is set to *false*.',\n            'Using *min* applies autorange only to set the minimum.',\n            'Using *max* applies autorange only to set the maximum.',\n            'Using *min reversed* applies autorange only to set the minimum on a reversed axis.',\n            'Using *max reversed* applies autorange only to set the maximum on a reversed axis.',\n            'Using *reversed* applies autorange on both ends and reverses the axis direction.',\n        ].join(' ')\n    },\n    autorangeoptions: {\n        minallowed: {\n            valType: 'any',\n            editType: 'plot',\n            impliedEdits: {'range[0]': undefined, 'range[1]': undefined},\n            description: [\n                'Use this value exactly as autorange minimum.'\n            ].join(' ')\n        },\n        maxallowed: {\n            valType: 'any',\n            editType: 'plot',\n            impliedEdits: {'range[0]': undefined, 'range[1]': undefined},\n            description: [\n                'Use this value exactly as autorange maximum.'\n            ].join(' ')\n        },\n        clipmin: {\n            valType: 'any',\n            editType: 'plot',\n            impliedEdits: {'range[0]': undefined, 'range[1]': undefined},\n            description: [\n                'Clip autorange minimum if it goes beyond this value.',\n                'Has no effect when `autorangeoptions.minallowed` is provided.'\n            ].join(' ')\n        },\n        clipmax: {\n            valType: 'any',\n            editType: 'plot',\n            impliedEdits: {'range[0]': undefined, 'range[1]': undefined},\n            description: [\n                'Clip autorange maximum if it goes beyond this value.',\n                'Has no effect when `autorangeoptions.maxallowed` is provided.'\n            ].join(' ')\n        },\n        include: {\n            valType: 'any',\n            arrayOk: true,\n            editType: 'plot',\n            impliedEdits: {'range[0]': undefined, 'range[1]': undefined},\n            description: [\n                'Ensure this value is included in autorange.'\n            ].join(' ')\n        },\n        editType: 'plot'\n    },\n    rangemode: {\n        valType: 'enumerated',\n        values: ['normal', 'tozero', 'nonnegative'],\n        dflt: 'normal',\n        editType: 'plot',\n        description: [\n            'If *normal*, the range is computed in relation to the extrema',\n            'of the input data.',\n            'If *tozero*`, the range extends to 0,',\n            'regardless of the input data',\n            'If *nonnegative*, the range is non-negative,',\n            'regardless of the input data.',\n            'Applies only to linear axes.'\n        ].join(' ')\n    },\n    range: {\n        valType: 'info_array',\n        items: [\n            {valType: 'any', editType: 'axrange', impliedEdits: {'^autorange': false}, anim: true},\n            {valType: 'any', editType: 'axrange', impliedEdits: {'^autorange': false}, anim: true}\n        ],\n        editType: 'axrange',\n        impliedEdits: {autorange: false},\n        anim: true,\n        description: [\n            'Sets the range of this axis.',\n            'If the axis `type` is *log*, then you must take the log of your',\n            'desired range (e.g. to set the range from 1 to 100,',\n            'set the range from 0 to 2).',\n            'If the axis `type` is *date*, it should be date strings,',\n            'like date data, though Date objects and unix milliseconds',\n            'will be accepted and converted to strings.',\n            'If the axis `type` is *category*, it should be numbers,',\n            'using the scale where each category is assigned a serial',\n            'number from zero in the order it appears.',\n            'Leaving either or both elements `null` impacts the default `autorange`.',\n        ].join(' ')\n    },\n    minallowed: {\n        valType: 'any',\n        editType: 'plot',\n        impliedEdits: {'^autorange': false},\n        description: [\n            'Determines the minimum range of this axis.'\n        ].join(' ')\n    },\n    maxallowed: {\n        valType: 'any',\n        editType: 'plot',\n        impliedEdits: {'^autorange': false},\n        description: [\n            'Determines the maximum range of this axis.'\n        ].join(' ')\n    },\n    fixedrange: {\n        valType: 'boolean',\n        dflt: false,\n        editType: 'calc',\n        description: [\n            'Determines whether or not this axis is zoom-able.',\n            'If true, then zoom is disabled.'\n        ].join(' ')\n    },\n    insiderange: {\n        valType: 'info_array',\n        items: [\n            {valType: 'any', editType: 'plot'},\n            {valType: 'any', editType: 'plot'}\n        ],\n        editType: 'plot',\n        description: [\n            'Could be used to set the desired inside range of this axis',\n            '(excluding the labels) when `ticklabelposition` of',\n            'the anchored axis has *inside*.',\n            'Not implemented for axes with `type` *log*.',\n            'This would be ignored when `range` is provided.'\n        ].join(' ')\n    },\n    // scaleanchor: not used directly, just put here for reference\n    // values are any opposite-letter axis id, or `false`.\n    scaleanchor: {\n        valType: 'enumerated',\n        values: [\n            constants.idRegex.x.toString(),\n            constants.idRegex.y.toString(),\n            false\n        ],\n        editType: 'plot',\n        description: [\n            'If set to another axis id (e.g. `x2`, `y`), the range of this axis',\n            'changes together with the range of the corresponding axis',\n            'such that the scale of pixels per unit is in a constant ratio.',\n            'Both axes are still zoomable, but when you zoom one, the other will',\n            'zoom the same amount, keeping a fixed midpoint.',\n            '`constrain` and `constraintoward` determine how we enforce the constraint.',\n            'You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}`',\n            'but you can only link axes of the same `type`.',\n            'The linked axis can have the opposite letter (to constrain the aspect ratio)',\n            'or the same letter (to match scales across subplots).',\n            'Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant',\n            'and the last constraint encountered will be ignored to avoid possible',\n            'inconsistent constraints via `scaleratio`.',\n            'Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint',\n            'is currently forbidden.',\n            'Setting `false` allows to remove a default constraint (occasionally,',\n            'you may need to prevent a default `scaleanchor` constraint from',\n            'being applied, eg. when having an image trace `yaxis: {scaleanchor: \"x\"}`',\n            'is set automatically in order for pixels to be rendered as squares,',\n            'setting `yaxis: {scaleanchor: false}` allows to remove the constraint).'\n        ].join(' ')\n    },\n    scaleratio: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        editType: 'plot',\n        description: [\n            'If this axis is linked to another by `scaleanchor`, this determines the pixel',\n            'to unit scale ratio. For example, if this value is 10, then every unit on',\n            'this axis spans 10 times the number of pixels as a unit on the linked axis.',\n            'Use this for example to create an elevation profile where the vertical scale',\n            'is exaggerated a fixed amount with respect to the horizontal.'\n        ].join(' ')\n    },\n    constrain: {\n        valType: 'enumerated',\n        values: ['range', 'domain'],\n        editType: 'plot',\n        description: [\n            'If this axis needs to be compressed (either due to its own `scaleanchor` and',\n            '`scaleratio` or those of the other axis), determines how that happens:',\n            'by increasing the *range*, or by decreasing the *domain*.',\n            'Default is *domain* for axes containing image traces, *range* otherwise.'\n        ].join(' ')\n    },\n    // constraintoward: not used directly, just put here for reference\n    constraintoward: {\n        valType: 'enumerated',\n        values: ['left', 'center', 'right', 'top', 'middle', 'bottom'],\n        editType: 'plot',\n        description: [\n            'If this axis needs to be compressed (either due to its own `scaleanchor` and',\n            '`scaleratio` or those of the other axis), determines which direction we push',\n            'the originally specified plot area. Options are *left*, *center* (default),',\n            'and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.'\n        ].join(' ')\n    },\n    matches: {\n        valType: 'enumerated',\n        values: [\n            constants.idRegex.x.toString(),\n            constants.idRegex.y.toString()\n        ],\n        editType: 'calc',\n        description: [\n            'If set to another axis id (e.g. `x2`, `y`), the range of this axis',\n            'will match the range of the corresponding axis in data-coordinates space.',\n            'Moreover, matching axes share auto-range values, category lists and',\n            'histogram auto-bins.',\n            'Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint',\n            'is currently forbidden.',\n            'Moreover, note that matching axes must have the same `type`.'\n        ].join(' ')\n    },\n\n    rangebreaks: templatedArray('rangebreak', {\n        enabled: {\n            valType: 'boolean',\n            dflt: true,\n            editType: 'calc',\n            description: [\n                'Determines whether this axis rangebreak is enabled or disabled.',\n                'Please note that `rangebreaks` only work for *date* axis type.'\n            ].join(' ')\n        },\n\n        bounds: {\n            valType: 'info_array',\n            items: [\n                {valType: 'any', editType: 'calc'},\n                {valType: 'any', editType: 'calc'}\n            ],\n            editType: 'calc',\n            description: [\n                'Sets the lower and upper bounds of this axis rangebreak.',\n                'Can be used with `pattern`.'\n            ].join(' ')\n        },\n\n        pattern: {\n            valType: 'enumerated',\n            values: [DAY_OF_WEEK, HOUR, ''],\n            editType: 'calc',\n            description: [\n                'Determines a pattern on the time line that generates breaks.',\n                'If *' + DAY_OF_WEEK + '* - days of the week in English e.g. \\'Sunday\\' or `\\sun\\`',\n                '(matching is case-insensitive and considers only the first three characters),',\n                'as well as Sunday-based integers between 0 and 6.',\n                'If *' + HOUR + '* - hour (24-hour clock) as decimal numbers between 0 and 24.',\n                'for more info.',\n                'Examples:',\n                '- { pattern: \\'' + DAY_OF_WEEK + '\\', bounds: [6, 1] }',\n                ' or simply { bounds: [\\'sat\\', \\'mon\\'] }',\n                '  breaks from Saturday to Monday (i.e. skips the weekends).',\n                '- { pattern: \\'' + HOUR + '\\', bounds: [17, 8] }',\n                '  breaks from 5pm to 8am (i.e. skips non-work hours).'\n            ].join(' ')\n        },\n\n        values: {\n            valType: 'info_array',\n            freeLength: true,\n            editType: 'calc',\n            items: {\n                valType: 'any',\n                editType: 'calc'\n            },\n            description: [\n                'Sets the coordinate values corresponding to the rangebreaks.',\n                'An alternative to `bounds`.',\n                'Use `dvalue` to set the size of the values along the axis.'\n            ].join(' ')\n        },\n        dvalue: {\n            // TODO could become 'any' to add support for 'months', 'years'\n            valType: 'number',\n            editType: 'calc',\n            min: 0,\n            dflt: ONEDAY,\n            description: [\n                'Sets the size of each `values` item.',\n                'The default is one day in milliseconds.'\n            ].join(' ')\n        },\n\n        /*\n        gap: {\n            valType: 'number',\n            min: 0,\n            dflt: 0, // for *date* axes, maybe something else for *linear*\n            editType: 'calc',\n            description: [\n                'Sets the gap distance between the start and the end of this rangebreak.',\n                'Use with `gapmode` to set the unit of measurement.'\n            ].join(' ')\n        },\n        gapmode: {\n            valType: 'enumerated',\n            values: ['pixels', 'fraction'],\n            dflt: 'pixels',\n            editType: 'calc',\n            description: [\n                'Determines if the `gap` value corresponds to a pixel length',\n                'or a fraction of the plot area.'\n            ].join(' ')\n        },\n        */\n\n        // To complete https://github.com/plotly/plotly.js/issues/4210\n        // we additionally need `gap` and make this work on *linear*, and\n        // possibly all other cartesian axis types. We possibly would also need\n        // some style attributes controlling the zig-zag on the corresponding\n        // axis.\n\n        editType: 'calc'\n    }),\n\n    // ticks\n    tickmode: tickmode,\n    nticks: makeNticks(),\n    tick0: tick0,\n    dtick: dtick,\n    ticklabelstep: {\n        valType: 'integer',\n        min: 1,\n        dflt: 1,\n        editType: 'ticks',\n        description: [\n            'Sets the spacing between tick labels as compared to the spacing between ticks.',\n            'A value of 1 (default) means each tick gets a label.',\n            'A value of 2 means shows every 2nd label.',\n            'A larger value n means only every nth tick is labeled.',\n            '`tick0` determines which labels are shown.',\n            'Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.'\n        ].join(' ')\n    },\n    tickvals: tickvals,\n    ticktext: {\n        valType: 'data_array',\n        editType: 'ticks',\n        description: [\n            'Sets the text displayed at the ticks position via `tickvals`.',\n            'Only has an effect if `tickmode` is set to *array*.',\n            'Used with `tickvals`.'\n        ].join(' ')\n    },\n    ticks: ticks,\n    tickson: {\n        valType: 'enumerated',\n        values: ['labels', 'boundaries'],\n        dflt: 'labels',\n        editType: 'ticks',\n        description: [\n            'Determines where ticks and grid lines are drawn with respect to their',\n            'corresponding tick labels.',\n            'Only has an effect for axes of `type` *category* or *multicategory*.',\n            'When set to *boundaries*, ticks and grid lines are drawn half a category',\n            'to the left/bottom of labels.'\n        ].join(' ')\n    },\n    ticklabelmode: {\n        valType: 'enumerated',\n        values: ['instant', 'period'],\n        dflt: 'instant',\n        editType: 'ticks',\n        description: [\n            'Determines where tick labels are drawn with respect to their',\n            'corresponding ticks and grid lines.',\n            'Only has an effect for axes of `type` *date*',\n            'When set to *period*, tick labels are drawn in the middle of the period',\n            'between ticks.'\n        ].join(' ')\n    },\n    // ticklabelposition: not used directly, as values depend on direction (similar to side)\n    // left/right options are for x axes, and top/bottom options are for y axes\n    ticklabelposition: {\n        valType: 'enumerated',\n        values: [\n            'outside', 'inside',\n            'outside top', 'inside top',\n            'outside left', 'inside left',\n            'outside right', 'inside right',\n            'outside bottom', 'inside bottom'\n        ],\n        dflt: 'outside',\n        editType: 'calc',\n        description: [\n            'Determines where tick labels are drawn with respect to the axis',\n            'Please note that',\n            'top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*.',\n            'Similarly',\n            'left or right has no effect on y axes or when `ticklabelmode` is set to *period*.',\n            'Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*.',\n            'When used on axes linked by `matches` or `scaleanchor`,',\n            'no extra padding for inside labels would be added by autorange,',\n            'so that the scales could match.'\n        ].join(' ')\n    },\n    ticklabeloverflow: {\n        valType: 'enumerated',\n        values: [\n            'allow',\n            'hide past div',\n            'hide past domain'\n        ],\n        editType: 'calc',\n        description: [\n            'Determines how we handle tick labels that would overflow either the graph div or the domain of the axis.',\n            'The default value for inside tick labels is *hide past domain*.',\n            'Otherwise on *category* and *multicategory* axes the default is *allow*.',\n            'In other cases the default is *hide past div*.'\n        ].join(' ')\n    },\n    ticklabelshift: {\n        valType: 'integer',\n        dflt: 0,\n        editType: 'ticks',\n        description: [\n            'Shifts the tick labels by the specified number of pixels in parallel to the axis.',\n            'Positive values move the labels in the positive direction of the axis.'\n        ].join(' ')\n    },\n    ticklabelstandoff: {\n        valType: 'integer',\n        dflt: 0,\n        editType: 'ticks',\n        description: [\n            'Sets the standoff distance (in px) between the axis tick labels and their default position.',\n            'A positive `ticklabelstandoff` moves the labels farther away from the plot area',\n            'if `ticklabelposition` is *outside*, and deeper into the plot area if',\n            '`ticklabelposition` is *inside*. A negative `ticklabelstandoff` works in the opposite',\n            'direction, moving outside ticks towards the plot area and inside ticks towards',\n            'the outside. If the negative value is large enough, inside ticks can even end up',\n            'outside and vice versa.'\n        ].join(' ')\n    },\n    ticklabelindex: {\n        // in the future maybe add `extras: ['all', 'minor']` to allow showing labels for all ticks\n        // or for all minor ticks.\n        valType: 'integer',\n        arrayOk: true,\n        editType: 'calc',\n        description: [\n            'Only for axes with `type` *date* or *linear*.',\n            'Instead of drawing the major tick label, draw the label for the minor tick',\n            'that is n positions away from the major tick. E.g. to always draw the label for the',\n            'minor tick before each major tick, choose `ticklabelindex` -1. This is useful for date',\n            'axes with `ticklabelmode` *period* if you want to label the period that ends with each',\n            'major tick instead of the period that begins there.'\n        ].join(' ')\n    },\n    mirror: {\n        valType: 'enumerated',\n        values: [true, 'ticks', false, 'all', 'allticks'],\n        dflt: false,\n        editType: 'ticks+layoutstyle',\n        description: [\n            'Determines if the axis lines or/and ticks are mirrored to',\n            'the opposite side of the plotting area.',\n            'If *true*, the axis lines are mirrored.',\n            'If *ticks*, the axis lines and ticks are mirrored.',\n            'If *false*, mirroring is disable.',\n            'If *all*, axis lines are mirrored on all shared-axes subplots.',\n            'If *allticks*, axis lines and ticks are mirrored',\n            'on all shared-axes subplots.'\n        ].join(' ')\n    },\n    ticklen: makeTicklen(),\n    tickwidth: makeTickwidth(),\n    tickcolor: tickcolor,\n    showticklabels: {\n        valType: 'boolean',\n        dflt: true,\n        editType: 'ticks',\n        description: 'Determines whether or not the tick labels are drawn.'\n    },\n    labelalias: {\n        valType: 'any',\n        dflt: false,\n        editType: 'ticks',\n        description: [\n            'Replacement text for specific tick or hover labels.',\n            'For example using {US: \\'USA\\', CA: \\'Canada\\'} changes US to USA',\n            'and CA to Canada. The labels we would have shown must match',\n            'the keys exactly, after adding any tickprefix or ticksuffix.',\n            'For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash.',\n            'That means you need to use −1 instead of -1.',\n            'labelalias can be used with any axis type, and both keys (if needed)',\n            'and values (if desired) can include html-like tags or MathJax.'\n        ].join(' ')\n    },\n    automargin: {\n        valType: 'flaglist',\n        flags: ['height', 'width', 'left', 'right', 'top', 'bottom'],\n        extras: [true, false],\n        dflt: false,\n        editType: 'ticks',\n        description: [\n            'Determines whether long tick labels automatically grow the figure',\n            'margins.'\n        ].join(' ')\n    },\n    showspikes: {\n        valType: 'boolean',\n        dflt: false,\n        editType: 'modebar',\n        description: [\n            'Determines whether or not spikes (aka droplines) are drawn for this axis.',\n            'Note: This only takes affect when hovermode = closest'\n        ].join(' ')\n    },\n    spikecolor: {\n        valType: 'color',\n        dflt: null,\n        editType: 'none',\n        description: 'Sets the spike color. If undefined, will use the series color'\n    },\n    spikethickness: {\n        valType: 'number',\n        dflt: 3,\n        editType: 'none',\n        description: 'Sets the width (in px) of the zero line.'\n    },\n    spikedash: extendFlat({}, dash, {dflt: 'dash', editType: 'none'}),\n    spikemode: {\n        valType: 'flaglist',\n        flags: ['toaxis', 'across', 'marker'],\n        dflt: 'toaxis',\n        editType: 'none',\n        description: [\n            'Determines the drawing mode for the spike line',\n            'If *toaxis*, the line is drawn from the data point to the axis the ',\n            'series is plotted on.',\n\n            'If *across*, the line is drawn across the entire plot area, and',\n            'supercedes *toaxis*.',\n\n            'If *marker*, then a marker dot is drawn on the axis the series is',\n            'plotted on'\n        ].join(' ')\n    },\n    spikesnap: {\n        valType: 'enumerated',\n        values: ['data', 'cursor', 'hovered data'],\n        dflt: 'hovered data',\n        editType: 'none',\n        description: 'Determines whether spikelines are stuck to the cursor or to the closest datapoints.'\n    },\n    tickfont: fontAttrs({\n        editType: 'ticks',\n        description: 'Sets the tick font.'\n    }),\n    tickangle: {\n        valType: 'angle',\n        dflt: 'auto',\n        editType: 'ticks',\n        description: [\n            'Sets the angle of the tick labels with respect to the horizontal.',\n            'For example, a `tickangle` of -90 draws the tick labels',\n            'vertically.'\n        ].join(' ')\n    },\n    autotickangles: {\n        valType: 'info_array',\n        freeLength: true,\n        items: {\n            valType: 'angle'\n        },\n        dflt: [0, 30, 90],\n        editType: 'ticks',\n        description: [\n            'When `tickangle` is set to *auto*, it will be set to the first',\n            'angle in this array that is large enough to prevent label',\n            'overlap.'\n        ].join(' ')\n    },\n    tickprefix: {\n        valType: 'string',\n        dflt: '',\n        editType: 'ticks',\n        description: 'Sets a tick label prefix.'\n    },\n    showtickprefix: {\n        valType: 'enumerated',\n        values: ['all', 'first', 'last', 'none'],\n        dflt: 'all',\n        editType: 'ticks',\n        description: [\n            'If *all*, all tick labels are displayed with a prefix.',\n            'If *first*, only the first tick is displayed with a prefix.',\n            'If *last*, only the last tick is displayed with a suffix.',\n            'If *none*, tick prefixes are hidden.'\n        ].join(' ')\n    },\n    ticksuffix: {\n        valType: 'string',\n        dflt: '',\n        editType: 'ticks',\n        description: 'Sets a tick label suffix.'\n    },\n    showticksuffix: {\n        valType: 'enumerated',\n        values: ['all', 'first', 'last', 'none'],\n        dflt: 'all',\n        editType: 'ticks',\n        description: 'Same as `showtickprefix` but for tick suffixes.'\n    },\n    showexponent: {\n        valType: 'enumerated',\n        values: ['all', 'first', 'last', 'none'],\n        dflt: 'all',\n        editType: 'ticks',\n        description: [\n            'If *all*, all exponents are shown besides their significands.',\n            'If *first*, only the exponent of the first tick is shown.',\n            'If *last*, only the exponent of the last tick is shown.',\n            'If *none*, no exponents appear.'\n        ].join(' ')\n    },\n    exponentformat: {\n        valType: 'enumerated',\n        values: ['none', 'e', 'E', 'power', 'SI', 'B'],\n        dflt: 'B',\n        editType: 'ticks',\n        description: [\n            'Determines a formatting rule for the tick exponents.',\n            'For example, consider the number 1,000,000,000.',\n            'If *none*, it appears as 1,000,000,000.',\n            'If *e*, 1e+9.',\n            'If *E*, 1E+9.',\n            'If *power*, 1x10^9 (with 9 in a super script).',\n            'If *SI*, 1G.',\n            'If *B*, 1B.'\n        ].join(' ')\n    },\n    minexponent: {\n        valType: 'number',\n        dflt: 3,\n        min: 0,\n        editType: 'ticks',\n        description: [\n            'Hide SI prefix for 10^n if |n| is below this number.',\n            'This only has an effect when `tickformat` is *SI* or *B*.'\n        ].join(' ')\n    },\n    separatethousands: {\n        valType: 'boolean',\n        dflt: false,\n        editType: 'ticks',\n        description: [\n            'If \"true\", even 4-digit integers are separated'\n        ].join(' ')\n    },\n    tickformat: {\n        valType: 'string',\n        dflt: '',\n        editType: 'ticks',\n        description: descriptionWithDates('tick label')\n    },\n    tickformatstops: templatedArray('tickformatstop', {\n        enabled: {\n            valType: 'boolean',\n            dflt: true,\n            editType: 'ticks',\n            description: [\n                'Determines whether or not this stop is used.',\n                'If `false`, this stop is ignored even within its `dtickrange`.'\n            ].join(' ')\n        },\n        dtickrange: {\n            valType: 'info_array',\n            items: [\n                {valType: 'any', editType: 'ticks'},\n                {valType: 'any', editType: 'ticks'}\n            ],\n            editType: 'ticks',\n            description: [\n                'range [*min*, *max*], where *min*, *max* - dtick values',\n                'which describe some zoom level, it is possible to omit *min*',\n                'or *max* value by passing *null*'\n            ].join(' ')\n        },\n        value: {\n            valType: 'string',\n            dflt: '',\n            editType: 'ticks',\n            description: [\n                'string - dtickformat for described zoom level, the same as *tickformat*'\n            ].join(' ')\n        },\n        editType: 'ticks'\n    }),\n    hoverformat: {\n        valType: 'string',\n        dflt: '',\n        editType: 'none',\n        description: descriptionWithDates('hover text')\n    },\n    // lines and grids\n    showline: {\n        valType: 'boolean',\n        dflt: false,\n        editType: 'ticks+layoutstyle',\n        description: [\n            'Determines whether or not a line bounding this axis is drawn.'\n        ].join(' ')\n    },\n    linecolor: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        editType: 'layoutstyle',\n        description: 'Sets the axis line color.'\n    },\n    linewidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        editType: 'ticks+layoutstyle',\n        description: 'Sets the width (in px) of the axis line.'\n    },\n    showgrid: showgrid,\n    gridcolor: gridcolor,\n    gridwidth: makeGridwidth(),\n    griddash: griddash,\n\n    zeroline: {\n        valType: 'boolean',\n        editType: 'ticks',\n        description: [\n            'Determines whether or not a line is drawn at along the 0 value',\n            'of this axis.',\n            'If *true*, the zero line is drawn on top of the grid lines.'\n        ].join(' ')\n    },\n    zerolinecolor: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        editType: 'ticks',\n        description: 'Sets the line color of the zero line.'\n    },\n    zerolinewidth: {\n        valType: 'number',\n        dflt: 1,\n        editType: 'ticks',\n        description: 'Sets the width (in px) of the zero line.'\n    },\n\n    showdividers: {\n        valType: 'boolean',\n        dflt: true,\n        editType: 'ticks',\n        description: [\n            'Determines whether or not a dividers are drawn',\n            'between the category levels of this axis.',\n            'Only has an effect on *multicategory* axes.'\n        ].join(' ')\n    },\n    dividercolor: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        editType: 'ticks',\n        description: [\n            'Sets the color of the dividers',\n            'Only has an effect on *multicategory* axes.'\n        ].join(' ')\n    },\n    dividerwidth: {\n        valType: 'number',\n        dflt: 1,\n        editType: 'ticks',\n        description: [\n            'Sets the width (in px) of the dividers',\n            'Only has an effect on *multicategory* axes.'\n        ].join(' ')\n    },\n    // TODO dividerlen: that would override \"to label base\" length?\n\n    // positioning attributes\n    // anchor: not used directly, just put here for reference\n    // values are any opposite-letter axis id\n    anchor: {\n        valType: 'enumerated',\n        values: [\n            'free',\n            constants.idRegex.x.toString(),\n            constants.idRegex.y.toString()\n        ],\n        editType: 'plot',\n        description: [\n            'If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to',\n            'the corresponding opposite-letter axis.',\n            'If set to *free*, this axis\\' position is determined by `position`.'\n        ].join(' ')\n    },\n    // side: not used directly, as values depend on direction\n    // values are top, bottom for x axes, and left, right for y\n    side: {\n        valType: 'enumerated',\n        values: ['top', 'bottom', 'left', 'right'],\n        editType: 'plot',\n        description: [\n            'Determines whether a x (y) axis is positioned',\n            'at the *bottom* (*left*) or *top* (*right*)',\n            'of the plotting area.'\n        ].join(' ')\n    },\n    // overlaying: not used directly, just put here for reference\n    // values are false and any other same-letter axis id that's not\n    // itself overlaying anything\n    overlaying: {\n        valType: 'enumerated',\n        values: [\n            'free',\n            constants.idRegex.x.toString(),\n            constants.idRegex.y.toString()\n        ],\n        editType: 'plot',\n        description: [\n            'If set a same-letter axis id, this axis is overlaid on top of',\n            'the corresponding same-letter axis, with traces and axes visible for both',\n            'axes.',\n            'If *false*, this axis does not overlay any same-letter axes.',\n            'In this case, for axes with overlapping domains only the highest-numbered',\n            'axis will be visible.'\n        ].join(' ')\n    },\n\n    minor: {\n        tickmode: minorTickmode,\n        nticks: makeNticks('minor'),\n        tick0: tick0,\n        dtick: dtick,\n        tickvals: tickvals,\n        ticks: ticks,\n        ticklen: makeTicklen('minor'),\n        tickwidth: makeTickwidth('minor'),\n        tickcolor: tickcolor,\n\n        gridcolor: gridcolor,\n        gridwidth: makeGridwidth('minor'),\n        griddash: griddash,\n        showgrid: showgrid,\n\n        editType: 'ticks'\n    },\n\n    layer: {\n        valType: 'enumerated',\n        values: ['above traces', 'below traces'],\n        dflt: 'above traces',\n        editType: 'plot',\n        description: [\n            'Sets the layer on which this axis is displayed.',\n            'If *above traces*, this axis is displayed above all the subplot\\'s traces',\n            'If *below traces*, this axis is displayed below all the subplot\\'s traces,',\n            'but above the grid lines.',\n            'Useful when used together with scatter-like traces with `cliponaxis`',\n            'set to *false* to show markers and/or text nodes above this axis.'\n        ].join(' ')\n    },\n    domain: {\n        valType: 'info_array',\n        items: [\n            {valType: 'number', min: 0, max: 1, editType: 'plot'},\n            {valType: 'number', min: 0, max: 1, editType: 'plot'}\n        ],\n        dflt: [0, 1],\n        editType: 'plot',\n        description: [\n            'Sets the domain of this axis (in plot fraction).'\n        ].join(' ')\n    },\n    position: {\n        valType: 'number',\n        min: 0,\n        max: 1,\n        dflt: 0,\n        editType: 'plot',\n        description: [\n            'Sets the position of this axis in the plotting space',\n            '(in normalized coordinates).',\n            'Only has an effect if `anchor` is set to *free*.'\n        ].join(' ')\n    },\n    autoshift: {\n        valType: 'boolean',\n        dflt: false,\n        editType: 'plot',\n        description: [\n            'Automatically reposition the axis to avoid',\n            'overlap with other axes with the same `overlaying` value.',\n            'This repositioning will account for any `shift` amount applied to other',\n            'axes on the same side with `autoshift` is set to true.',\n            'Only has an effect if `anchor` is set to *free*.',\n        ].join(' ')\n    },\n    shift: {\n        valType: 'number',\n        editType: 'plot',\n        description: [\n            'Moves the axis a given number of pixels from where it would have been otherwise.',\n            'Accepts both positive and negative values, which will shift the axis either right',\n            'or left, respectively.',\n            'If `autoshift` is set to true, then this defaults to a padding of -3 if `side` is set to *left*.',\n            'and defaults to +3 if `side` is set to *right*. Defaults to 0 if `autoshift` is set to false.',\n            'Only has an effect if `anchor` is set to *free*.'\n        ].join(' ')\n    },\n    categoryorder: {\n        valType: 'enumerated',\n        values: [\n            'trace', 'category ascending', 'category descending', 'array',\n            'total ascending', 'total descending',\n            'min ascending', 'min descending',\n            'max ascending', 'max descending',\n            'sum ascending', 'sum descending',\n            'mean ascending', 'mean descending',\n            'geometric mean ascending', 'geometric mean descending',\n            'median ascending', 'median descending'\n        ],\n        dflt: 'trace',\n        editType: 'calc',\n        description: [\n            'Specifies the ordering logic for the case of categorical variables.',\n            'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.',\n            'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by',\n            'the alphanumerical order of the category names.',\n            'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category',\n            'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to',\n            'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.',\n            'Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the',\n            'numerical order of the values.',\n            'Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.'\n        ].join(' ')\n    },\n    categoryarray: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the order in which categories on this axis appear.',\n            'Only has an effect if `categoryorder` is set to *array*.',\n            'Used with `categoryorder`.'\n        ].join(' ')\n    },\n    uirevision: {\n        valType: 'any',\n        editType: 'none',\n        description: [\n            'Controls persistence of user-driven changes in axis `range`,',\n            '`autorange`, and `title` if in `editable: true` configuration.',\n            'Defaults to `layout.uirevision`.'\n        ].join(' ')\n    },\n    editType: 'calc',\n\n    _deprecated: {\n        autotick: {\n            valType: 'boolean',\n            editType: 'ticks',\n            description: [\n                'Obsolete.',\n                'Set `tickmode` to *auto* for old `autotick` *true* behavior.',\n                'Set `tickmode` to *linear* for `autotick` *false*.'\n            ].join(' ')\n        },\n        title: {\n            valType: 'string',\n            editType: 'ticks',\n            description: [\n                'Value of `title` is no longer a simple *string* but a set of sub-attributes.',\n                'To set the axis\\' title, please use `title.text` now.'\n            ].join(' ')\n        },\n        titlefont: fontAttrs({\n            editType: 'ticks',\n            description: [\n                'Former `titlefont` is now the sub-attribute `font` of `title`.',\n                'To customize title font properties, please use `title.font` now.'\n            ].join(' ')\n        })\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}