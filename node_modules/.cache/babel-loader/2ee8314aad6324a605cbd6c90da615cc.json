{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar Lib = require('../../lib');\nvar dateTime2ms = Lib.dateTime2ms;\nvar incrementMonth = Lib.incrementMonth;\nvar constants = require('../../constants/numerical');\nvar ONEAVGMONTH = constants.ONEAVGMONTH;\nmodule.exports = function alignPeriod(trace, ax, axLetter, vals) {\n  if (ax.type !== 'date') return {\n    vals: vals\n  };\n  var alignment = trace[axLetter + 'periodalignment'];\n  if (!alignment) return {\n    vals: vals\n  };\n  var period = trace[axLetter + 'period'];\n  var mPeriod;\n  if (isNumeric(period)) {\n    period = +period;\n    if (period <= 0) return {\n      vals: vals\n    };\n  } else if (typeof period === 'string' && period.charAt(0) === 'M') {\n    var n = +period.substring(1);\n    if (n > 0 && Math.round(n) === n) {\n      mPeriod = n;\n    } else return {\n      vals: vals\n    };\n  }\n  var calendar = ax.calendar;\n  var isStart = 'start' === alignment;\n  // var isMiddle = 'middle' === alignment;\n  var isEnd = 'end' === alignment;\n  var period0 = trace[axLetter + 'period0'];\n  var base = dateTime2ms(period0, calendar) || 0;\n  var newVals = [];\n  var starts = [];\n  var ends = [];\n  var len = vals.length;\n  for (var i = 0; i < len; i++) {\n    var v = vals[i];\n    var nEstimated, startTime, endTime;\n    if (mPeriod) {\n      // guess at how many periods away from base we are\n      nEstimated = Math.round((v - base) / (mPeriod * ONEAVGMONTH));\n      endTime = incrementMonth(base, mPeriod * nEstimated, calendar);\n\n      // iterate to get the exact bounds before and after v\n      // there may be ways to make this faster, but most of the time\n      // we'll only execute each loop zero or one time.\n      while (endTime > v) {\n        endTime = incrementMonth(endTime, -mPeriod, calendar);\n      }\n      while (endTime <= v) {\n        endTime = incrementMonth(endTime, mPeriod, calendar);\n      }\n\n      // now we know endTime is the boundary immediately after v\n      // so startTime is obtained by incrementing backward one period.\n      startTime = incrementMonth(endTime, -mPeriod, calendar);\n    } else {\n      // case of ms\n      nEstimated = Math.round((v - base) / period);\n      endTime = base + nEstimated * period;\n      while (endTime > v) {\n        endTime -= period;\n      }\n      while (endTime <= v) {\n        endTime += period;\n      }\n      startTime = endTime - period;\n    }\n    newVals[i] = isStart ? startTime : isEnd ? endTime : (startTime + endTime) / 2;\n    starts[i] = startTime;\n    ends[i] = endTime;\n  }\n  return {\n    vals: newVals,\n    starts: starts,\n    ends: ends\n  };\n};","map":{"version":3,"names":["isNumeric","require","Lib","dateTime2ms","incrementMonth","constants","ONEAVGMONTH","module","exports","alignPeriod","trace","ax","axLetter","vals","type","alignment","period","mPeriod","charAt","n","substring","Math","round","calendar","isStart","isEnd","period0","base","newVals","starts","ends","len","length","i","v","nEstimated","startTime","endTime"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/plots/cartesian/align_period.js"],"sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar Lib = require('../../lib');\nvar dateTime2ms = Lib.dateTime2ms;\nvar incrementMonth = Lib.incrementMonth;\nvar constants = require('../../constants/numerical');\nvar ONEAVGMONTH = constants.ONEAVGMONTH;\n\nmodule.exports = function alignPeriod(trace, ax, axLetter, vals) {\n    if(ax.type !== 'date') return {vals: vals};\n\n    var alignment = trace[axLetter + 'periodalignment'];\n    if(!alignment) return {vals: vals};\n\n    var period = trace[axLetter + 'period'];\n    var mPeriod;\n    if(isNumeric(period)) {\n        period = +period;\n        if(period <= 0) return {vals: vals};\n    } else if(typeof period === 'string' && period.charAt(0) === 'M') {\n        var n = +(period.substring(1));\n        if(n > 0 && Math.round(n) === n) {\n            mPeriod = n;\n        } else return {vals: vals};\n    }\n\n    var calendar = ax.calendar;\n\n    var isStart = 'start' === alignment;\n    // var isMiddle = 'middle' === alignment;\n    var isEnd = 'end' === alignment;\n\n    var period0 = trace[axLetter + 'period0'];\n    var base = dateTime2ms(period0, calendar) || 0;\n\n    var newVals = [];\n    var starts = [];\n    var ends = [];\n\n    var len = vals.length;\n    for(var i = 0; i < len; i++) {\n        var v = vals[i];\n\n        var nEstimated, startTime, endTime;\n        if(mPeriod) {\n            // guess at how many periods away from base we are\n            nEstimated = Math.round((v - base) / (mPeriod * ONEAVGMONTH));\n            endTime = incrementMonth(base, mPeriod * nEstimated, calendar);\n\n            // iterate to get the exact bounds before and after v\n            // there may be ways to make this faster, but most of the time\n            // we'll only execute each loop zero or one time.\n            while(endTime > v) {\n                endTime = incrementMonth(endTime, -mPeriod, calendar);\n            }\n            while(endTime <= v) {\n                endTime = incrementMonth(endTime, mPeriod, calendar);\n            }\n\n            // now we know endTime is the boundary immediately after v\n            // so startTime is obtained by incrementing backward one period.\n            startTime = incrementMonth(endTime, -mPeriod, calendar);\n        } else { // case of ms\n            nEstimated = Math.round((v - base) / period);\n            endTime = base + nEstimated * period;\n\n            while(endTime > v) {\n                endTime -= period;\n            }\n            while(endTime <= v) {\n                endTime += period;\n            }\n\n            startTime = endTime - period;\n        }\n\n        newVals[i] = (\n            isStart ? startTime :\n            isEnd ? endTime :\n            (startTime + endTime) / 2\n        );\n\n        starts[i] = startTime;\n        ends[i] = endTime;\n    }\n\n    return {\n        vals: newVals,\n        starts: starts,\n        ends: ends\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}