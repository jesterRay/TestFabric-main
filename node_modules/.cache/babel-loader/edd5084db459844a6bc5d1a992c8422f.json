{"ast":null,"code":"'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar baseAttrs = require('../../plots/attributes');\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar domainAttrs = require('../../plots/domain').attributes;\nvar line = extendFlat({\n  editType: 'calc'\n}, colorScaleAttrs('line', {\n  editTypeOverride: 'calc'\n}), {\n  shape: {\n    valType: 'enumerated',\n    values: ['linear', 'hspline'],\n    dflt: 'linear',\n    editType: 'plot',\n    description: ['Sets the shape of the paths.', 'If `linear`, paths are composed of straight lines.', 'If `hspline`, paths are composed of horizontal curved splines'].join(' ')\n  },\n  hovertemplate: hovertemplateAttrs({\n    editType: 'plot',\n    arrayOk: false\n  }, {\n    keys: ['count', 'probability'],\n    description: ['This value here applies when hovering over lines.'].join(' ')\n  })\n});\nmodule.exports = {\n  domain: domainAttrs({\n    name: 'parcats',\n    trace: true,\n    editType: 'calc'\n  }),\n  hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n    flags: ['count', 'probability'],\n    editType: 'plot',\n    arrayOk: false\n  }),\n  hoveron: {\n    valType: 'enumerated',\n    values: ['category', 'color', 'dimension'],\n    dflt: 'category',\n    editType: 'plot',\n    description: ['Sets the hover interaction mode for the parcats diagram.', 'If `category`, hover interaction take place per category.', 'If `color`, hover interactions take place per color per category.', 'If `dimension`, hover interactions take place across all categories per dimension.'].join(' ')\n  },\n  hovertemplate: hovertemplateAttrs({\n    editType: 'plot',\n    arrayOk: false\n  }, {\n    keys: ['count', 'probability', 'category', 'categorycount', 'colorcount', 'bandcolorcount'],\n    description: ['This value here applies when hovering over dimensions.', 'Note that `*categorycount`, *colorcount* and *bandcolorcount*', 'are only available when `hoveron` contains the *color* flag'].join(' ')\n  }),\n  arrangement: {\n    valType: 'enumerated',\n    values: ['perpendicular', 'freeform', 'fixed'],\n    dflt: 'perpendicular',\n    editType: 'plot',\n    description: ['Sets the drag interaction mode for categories and dimensions.', 'If `perpendicular`, the categories can only move along a line perpendicular to the paths.', 'If `freeform`, the categories can freely move on the plane.', 'If `fixed`, the categories and dimensions are stationary.'].join(' ')\n  },\n  bundlecolors: {\n    valType: 'boolean',\n    dflt: true,\n    editType: 'plot',\n    description: 'Sort paths so that like colors are bundled together within each category.'\n  },\n  sortpaths: {\n    valType: 'enumerated',\n    values: ['forward', 'backward'],\n    dflt: 'forward',\n    editType: 'plot',\n    description: ['Sets the path sorting algorithm.', 'If `forward`, sort paths based on dimension categories from left to right.', 'If `backward`, sort paths based on dimensions categories from right to left.'].join(' ')\n  },\n  labelfont: fontAttrs({\n    editType: 'calc',\n    description: 'Sets the font for the `dimension` labels.'\n  }),\n  tickfont: fontAttrs({\n    autoShadowDflt: true,\n    editType: 'calc',\n    description: 'Sets the font for the `category` labels.'\n  }),\n  dimensions: {\n    _isLinkedToArray: 'dimension',\n    label: {\n      valType: 'string',\n      editType: 'calc',\n      description: 'The shown name of the dimension.'\n    },\n    categoryorder: {\n      valType: 'enumerated',\n      values: ['trace', 'category ascending', 'category descending', 'array'],\n      dflt: 'trace',\n      editType: 'calc',\n      description: ['Specifies the ordering logic for the categories in the dimension.', 'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.', 'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by', 'the alphanumerical order of the category names.', 'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category', 'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to', 'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.'].join(' ')\n    },\n    categoryarray: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets the order in which categories in this dimension appear.', 'Only has an effect if `categoryorder` is set to *array*.', 'Used with `categoryorder`.'].join(' ')\n    },\n    ticktext: {\n      valType: 'data_array',\n      editType: 'calc',\n      description: ['Sets alternative tick labels for the categories in this dimension.', 'Only has an effect if `categoryorder` is set to *array*.', 'Should be an array the same length as `categoryarray`', 'Used with `categoryorder`.'].join(' ')\n    },\n    values: {\n      valType: 'data_array',\n      dflt: [],\n      editType: 'calc',\n      description: ['Dimension values. `values[n]` represents the category value of the `n`th point in the dataset,', 'therefore the `values` vector for all dimensions must be the same (longer vectors', 'will be truncated).'].join(' ')\n    },\n    displayindex: {\n      valType: 'integer',\n      editType: 'calc',\n      description: ['The display index of dimension, from left to right, zero indexed, defaults to dimension', 'index.'].join(' ')\n    },\n    editType: 'calc',\n    description: 'The dimensions (variables) of the parallel categories diagram.',\n    visible: {\n      valType: 'boolean',\n      dflt: true,\n      editType: 'calc',\n      description: 'Shows the dimension when set to `true` (the default). Hides the dimension for `false`.'\n    }\n  },\n  line: line,\n  counts: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    arrayOk: true,\n    editType: 'calc',\n    description: ['The number of observations represented by each state. Defaults to 1 so that each state represents', 'one observation'].join(' ')\n  },\n  // Hide unsupported top-level properties from plot-schema\n  customdata: undefined,\n  hoverlabel: undefined,\n  ids: undefined,\n  legend: undefined,\n  legendgroup: undefined,\n  legendrank: undefined,\n  opacity: undefined,\n  selectedpoints: undefined,\n  showlegend: undefined\n};","map":{"version":3,"names":["extendFlat","require","baseAttrs","fontAttrs","colorScaleAttrs","hovertemplateAttrs","domainAttrs","attributes","line","editType","editTypeOverride","shape","valType","values","dflt","description","join","hovertemplate","arrayOk","keys","module","exports","domain","name","trace","hoverinfo","flags","hoveron","arrangement","bundlecolors","sortpaths","labelfont","tickfont","autoShadowDflt","dimensions","_isLinkedToArray","label","categoryorder","categoryarray","ticktext","displayindex","visible","counts","min","customdata","undefined","hoverlabel","ids","legend","legendgroup","legendrank","opacity","selectedpoints","showlegend"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/parcats/attributes.js"],"sourcesContent":["'use strict';\n\nvar extendFlat = require('../../lib/extend').extendFlat;\nvar baseAttrs = require('../../plots/attributes');\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorScaleAttrs = require('../../components/colorscale/attributes');\nvar hovertemplateAttrs = require('../../plots/template_attributes').hovertemplateAttrs;\nvar domainAttrs = require('../../plots/domain').attributes;\n\nvar line = extendFlat(\n    {editType: 'calc'},\n    colorScaleAttrs('line', {editTypeOverride: 'calc'}),\n    {\n        shape: {\n            valType: 'enumerated',\n            values: ['linear', 'hspline'],\n            dflt: 'linear',\n            editType: 'plot',\n            description: [\n                'Sets the shape of the paths.',\n                'If `linear`, paths are composed of straight lines.',\n                'If `hspline`, paths are composed of horizontal curved splines'\n            ].join(' ')\n        },\n\n        hovertemplate: hovertemplateAttrs({\n            editType: 'plot',\n            arrayOk: false\n        }, {\n            keys: ['count', 'probability'],\n            description: [\n                'This value here applies when hovering over lines.'\n            ].join(' ')\n        })\n    }\n);\n\nmodule.exports = {\n    domain: domainAttrs({name: 'parcats', trace: true, editType: 'calc'}),\n\n    hoverinfo: extendFlat({}, baseAttrs.hoverinfo, {\n        flags: ['count', 'probability'],\n        editType: 'plot',\n        arrayOk: false\n    }),\n    hoveron: {\n        valType: 'enumerated',\n        values: ['category', 'color', 'dimension'],\n        dflt: 'category',\n        editType: 'plot',\n        description: [\n            'Sets the hover interaction mode for the parcats diagram.',\n            'If `category`, hover interaction take place per category.',\n            'If `color`, hover interactions take place per color per category.',\n            'If `dimension`, hover interactions take place across all categories per dimension.'\n        ].join(' ')\n    },\n    hovertemplate: hovertemplateAttrs({\n        editType: 'plot',\n        arrayOk: false\n    }, {\n        keys: [\n            'count', 'probability', 'category',\n            'categorycount', 'colorcount', 'bandcolorcount'\n        ],\n        description: [\n            'This value here applies when hovering over dimensions.',\n            'Note that `*categorycount`, *colorcount* and *bandcolorcount*',\n            'are only available when `hoveron` contains the *color* flag'\n        ].join(' ')\n    }),\n\n    arrangement: {\n        valType: 'enumerated',\n        values: ['perpendicular', 'freeform', 'fixed'],\n        dflt: 'perpendicular',\n        editType: 'plot',\n        description: [\n            'Sets the drag interaction mode for categories and dimensions.',\n            'If `perpendicular`, the categories can only move along a line perpendicular to the paths.',\n            'If `freeform`, the categories can freely move on the plane.',\n            'If `fixed`, the categories and dimensions are stationary.'\n        ].join(' ')\n    },\n    bundlecolors: {\n        valType: 'boolean',\n        dflt: true,\n        editType: 'plot',\n        description: 'Sort paths so that like colors are bundled together within each category.'\n    },\n    sortpaths: {\n        valType: 'enumerated',\n        values: ['forward', 'backward'],\n        dflt: 'forward',\n        editType: 'plot',\n        description: [\n            'Sets the path sorting algorithm.',\n            'If `forward`, sort paths based on dimension categories from left to right.',\n            'If `backward`, sort paths based on dimensions categories from right to left.'\n        ].join(' ')\n    },\n    labelfont: fontAttrs({\n        editType: 'calc',\n        description: 'Sets the font for the `dimension` labels.'\n    }),\n\n    tickfont: fontAttrs({\n        autoShadowDflt: true,\n        editType: 'calc',\n        description: 'Sets the font for the `category` labels.'\n    }),\n\n    dimensions: {\n        _isLinkedToArray: 'dimension',\n        label: {\n            valType: 'string',\n            editType: 'calc',\n            description: 'The shown name of the dimension.'\n        },\n        categoryorder: {\n            valType: 'enumerated',\n            values: [\n                'trace', 'category ascending', 'category descending', 'array'\n            ],\n            dflt: 'trace',\n            editType: 'calc',\n            description: [\n                'Specifies the ordering logic for the categories in the dimension.',\n                'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.',\n                'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by',\n                'the alphanumerical order of the category names.',\n                'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category',\n                'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to',\n                'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.'\n            ].join(' ')\n        },\n        categoryarray: {\n            valType: 'data_array',\n            editType: 'calc',\n            description: [\n                'Sets the order in which categories in this dimension appear.',\n                'Only has an effect if `categoryorder` is set to *array*.',\n                'Used with `categoryorder`.'\n            ].join(' ')\n        },\n        ticktext: {\n            valType: 'data_array',\n            editType: 'calc',\n            description: [\n                'Sets alternative tick labels for the categories in this dimension.',\n                'Only has an effect if `categoryorder` is set to *array*.',\n                'Should be an array the same length as `categoryarray`',\n                'Used with `categoryorder`.'\n            ].join(' ')\n        },\n        values: {\n            valType: 'data_array',\n            dflt: [],\n            editType: 'calc',\n            description: [\n                'Dimension values. `values[n]` represents the category value of the `n`th point in the dataset,',\n                'therefore the `values` vector for all dimensions must be the same (longer vectors',\n                'will be truncated).'\n            ].join(' ')\n        },\n        displayindex: {\n            valType: 'integer',\n            editType: 'calc',\n            description: [\n                'The display index of dimension, from left to right, zero indexed, defaults to dimension',\n                'index.'\n            ].join(' ')\n        },\n        editType: 'calc',\n        description: 'The dimensions (variables) of the parallel categories diagram.',\n        visible: {\n            valType: 'boolean',\n            dflt: true,\n            editType: 'calc',\n            description: 'Shows the dimension when set to `true` (the default). Hides the dimension for `false`.'\n        }\n    },\n\n    line: line,\n    counts: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        arrayOk: true,\n        editType: 'calc',\n        description: [\n            'The number of observations represented by each state. Defaults to 1 so that each state represents',\n            'one observation'\n        ].join(' ')\n    },\n\n    // Hide unsupported top-level properties from plot-schema\n    customdata: undefined,\n    hoverlabel: undefined,\n    ids: undefined,\n    legend: undefined,\n    legendgroup: undefined,\n    legendrank: undefined,\n    opacity: undefined,\n    selectedpoints: undefined,\n    showlegend: undefined\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}