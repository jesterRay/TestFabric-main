{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\nexport function useApi(baseUrl, params) {\n  _s();\n  const history = useHistory();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Memoize params object using stable references\n  const memoizedParams = useMemo(() => params, [...Object.keys(params || {}), ...Object.values(params || {})]);\n  const isMounted = useRef(true);\n  useEffect(() => {\n    isMounted.current = true;\n    if (!baseUrl) return;\n    const controller = new AbortController();\n    setIsLoading(true);\n    axios.get(`${process.env.REACT_APP_API_URL}${baseUrl}`, {\n      params: memoizedParams,\n      signal: controller.signal\n    }).then(response => {\n      if (isMounted.current) {\n        var _response$data;\n        setData((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.data) || null);\n      }\n    }).catch(error => {\n      if (error.name === 'AbortError') return;\n      if (isMounted.current) {\n        var _error$response;\n        setError(error);\n        if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404) {\n          history.push(\"/\");\n        }\n      }\n    }).finally(() => {\n      if (isMounted.current) {\n        setIsLoading(false);\n      }\n    });\n    return () => {\n      controller.abort();\n      isMounted.current = false;\n    };\n  }, [baseUrl, memoizedParams, history]);\n  return {\n    data,\n    error,\n    isLoading\n  };\n}\n_s(useApi, \"fblFmEC8vaDeIlOrcX3eA6/dRnQ=\", false, function () {\n  return [useHistory];\n});","map":{"version":3,"names":["useState","useEffect","useRef","useMemo","useHistory","axios","useApi","baseUrl","params","_s","history","data","setData","error","setError","isLoading","setIsLoading","memoizedParams","Object","keys","values","isMounted","current","controller","AbortController","get","process","env","REACT_APP_API_URL","signal","then","response","_response$data","catch","name","_error$response","status","push","finally","abort"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/src/middleware/middleware.js"],"sourcesContent":["import { useState, useEffect, useRef, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport axios from 'axios';\n\nexport function useApi(baseUrl, params) {\n    const history = useHistory();\n    const [data, setData] = useState(null);\n    const [error, setError] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n\n    // Memoize params object using stable references\n    const memoizedParams = useMemo(() => params, [\n        ...Object.keys(params || {}),\n        ...Object.values(params || {})\n    ]);\n    \n    const isMounted = useRef(true);\n\n    useEffect(() => {\n        isMounted.current = true;\n        \n        if (!baseUrl) return;\n\n        const controller = new AbortController();\n        setIsLoading(true);\n\n        axios\n            .get(`${process.env.REACT_APP_API_URL}${baseUrl}`, { \n                params: memoizedParams,\n                signal: controller.signal \n            })\n            .then(response => {\n                if (isMounted.current) {\n                    setData(response?.data?.data || null);\n                }\n            })\n            .catch(error => {\n                if (error.name === 'AbortError') return;\n                \n                if (isMounted.current) {\n                    setError(error);\n                    if (error.response?.status === 404) {\n                        history.push(\"/\");\n                    }\n                }\n            })\n            .finally(() => {\n                if (isMounted.current) {\n                    setIsLoading(false);\n                }\n            });\n\n        return () => {\n            controller.abort();\n            isMounted.current = false;\n        };\n    }, [baseUrl, memoizedParams, history]);\n\n    return { data, error, isLoading };\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,OAAO,QAAQ,OAAO;AAC5D,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,SAASC,MAAMA,CAACC,OAAO,EAAEC,MAAM,EAAE;EAAAC,EAAA;EACpC,MAAMC,OAAO,GAAGN,UAAU,CAAC,CAAC;EAC5B,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAMiB,cAAc,GAAGd,OAAO,CAAC,MAAMK,MAAM,EAAE,CACzC,GAAGU,MAAM,CAACC,IAAI,CAACX,MAAM,IAAI,CAAC,CAAC,CAAC,EAC5B,GAAGU,MAAM,CAACE,MAAM,CAACZ,MAAM,IAAI,CAAC,CAAC,CAAC,CACjC,CAAC;EAEF,MAAMa,SAAS,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACZoB,SAAS,CAACC,OAAO,GAAG,IAAI;IAExB,IAAI,CAACf,OAAO,EAAE;IAEd,MAAMgB,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxCR,YAAY,CAAC,IAAI,CAAC;IAElBX,KAAK,CACAoB,GAAG,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,GAAGrB,OAAO,EAAE,EAAE;MAC/CC,MAAM,EAAES,cAAc;MACtBY,MAAM,EAAEN,UAAU,CAACM;IACvB,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAI;MACd,IAAIV,SAAS,CAACC,OAAO,EAAE;QAAA,IAAAU,cAAA;QACnBpB,OAAO,CAAC,CAAAmB,QAAQ,aAARA,QAAQ,wBAAAC,cAAA,GAARD,QAAQ,CAAEpB,IAAI,cAAAqB,cAAA,uBAAdA,cAAA,CAAgBrB,IAAI,KAAI,IAAI,CAAC;MACzC;IACJ,CAAC,CAAC,CACDsB,KAAK,CAACpB,KAAK,IAAI;MACZ,IAAIA,KAAK,CAACqB,IAAI,KAAK,YAAY,EAAE;MAEjC,IAAIb,SAAS,CAACC,OAAO,EAAE;QAAA,IAAAa,eAAA;QACnBrB,QAAQ,CAACD,KAAK,CAAC;QACf,IAAI,EAAAsB,eAAA,GAAAtB,KAAK,CAACkB,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;UAChC1B,OAAO,CAAC2B,IAAI,CAAC,GAAG,CAAC;QACrB;MACJ;IACJ,CAAC,CAAC,CACDC,OAAO,CAAC,MAAM;MACX,IAAIjB,SAAS,CAACC,OAAO,EAAE;QACnBN,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ,CAAC,CAAC;IAEN,OAAO,MAAM;MACTO,UAAU,CAACgB,KAAK,CAAC,CAAC;MAClBlB,SAAS,CAACC,OAAO,GAAG,KAAK;IAC7B,CAAC;EACL,CAAC,EAAE,CAACf,OAAO,EAAEU,cAAc,EAAEP,OAAO,CAAC,CAAC;EAEtC,OAAO;IAAEC,IAAI;IAAEE,KAAK;IAAEE;EAAU,CAAC;AACrC;AAACN,EAAA,CAvDeH,MAAM;EAAA,QACFF,UAAU;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}