{"ast":null,"code":"'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorAttrs = require('../../components/color/attributes');\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\nvar descriptionWithDates = require('../../plots/cartesian/axis_format_attributes').descriptionWithDates;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar dash = require('../../components/drawing/attributes').dash;\nvar extendFlat = require('../../lib/extend').extendFlat;\nmodule.exports = {\n  color: {\n    valType: 'color',\n    editType: 'calc',\n    description: ['Sets default for all colors associated with this axis', 'all at once: line, font, tick, and grid colors.', 'Grid color is lightened by blending this with the plot background', 'Individual pieces can override this.'].join(' ')\n  },\n  smoothing: {\n    valType: 'number',\n    dflt: 1,\n    min: 0,\n    max: 1.3,\n    editType: 'calc'\n  },\n  title: {\n    text: {\n      valType: 'string',\n      dflt: '',\n      editType: 'calc',\n      description: ['Sets the title of this axis.', 'Note that before the existence of `title.text`, the title\\'s', 'contents used to be defined as the `title` attribute itself.', 'This behavior has been deprecated.'].join(' ')\n    },\n    font: fontAttrs({\n      editType: 'calc',\n      description: ['Sets this axis\\' title font.', 'Note that the title\\'s font used to be set', 'by the now deprecated `titlefont` attribute.'].join(' ')\n    }),\n    // TODO how is this different than `title.standoff`\n    offset: {\n      valType: 'number',\n      dflt: 10,\n      editType: 'calc',\n      description: ['An additional amount by which to offset the title from the tick', 'labels, given in pixels.', 'Note that this used to be set', 'by the now deprecated `titleoffset` attribute.'].join(' ')\n    },\n    editType: 'calc'\n  },\n  type: {\n    valType: 'enumerated',\n    // '-' means we haven't yet run autotype or couldn't find any data\n    // it gets turned into linear in gd._fullLayout but not copied back\n    // to gd.data like the others are.\n    values: ['-', 'linear', 'date', 'category'],\n    dflt: '-',\n    editType: 'calc',\n    description: ['Sets the axis type.', 'By default, plotly attempts to determined the axis type', 'by looking into the data of the traces that referenced', 'the axis in question.'].join(' ')\n  },\n  autotypenumbers: axesAttrs.autotypenumbers,\n  autorange: {\n    valType: 'enumerated',\n    values: [true, false, 'reversed'],\n    dflt: true,\n    editType: 'calc',\n    description: ['Determines whether or not the range of this axis is', 'computed in relation to the input data.', 'See `rangemode` for more info.', 'If `range` is provided, then `autorange` is set to *false*.'].join(' ')\n  },\n  rangemode: {\n    valType: 'enumerated',\n    values: ['normal', 'tozero', 'nonnegative'],\n    dflt: 'normal',\n    editType: 'calc',\n    description: ['If *normal*, the range is computed in relation to the extrema', 'of the input data.', 'If *tozero*`, the range extends to 0,', 'regardless of the input data', 'If *nonnegative*, the range is non-negative,', 'regardless of the input data.'].join(' ')\n  },\n  range: {\n    valType: 'info_array',\n    editType: 'calc',\n    items: [{\n      valType: 'any',\n      editType: 'calc'\n    }, {\n      valType: 'any',\n      editType: 'calc'\n    }],\n    description: ['Sets the range of this axis.', 'If the axis `type` is *log*, then you must take the log of your', 'desired range (e.g. to set the range from 1 to 100,', 'set the range from 0 to 2).', 'If the axis `type` is *date*, it should be date strings,', 'like date data, though Date objects and unix milliseconds', 'will be accepted and converted to strings.', 'If the axis `type` is *category*, it should be numbers,', 'using the scale where each category is assigned a serial', 'number from zero in the order it appears.'].join(' ')\n  },\n  fixedrange: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'calc',\n    description: ['Determines whether or not this axis is zoom-able.', 'If true, then zoom is disabled.'].join(' ')\n  },\n  cheatertype: {\n    valType: 'enumerated',\n    values: ['index', 'value'],\n    dflt: 'value',\n    editType: 'calc'\n  },\n  tickmode: {\n    valType: 'enumerated',\n    values: ['linear', 'array'],\n    dflt: 'array',\n    editType: 'calc'\n  },\n  nticks: {\n    valType: 'integer',\n    min: 0,\n    dflt: 0,\n    editType: 'calc',\n    description: ['Specifies the maximum number of ticks for the particular axis.', 'The actual number of ticks will be chosen automatically to be', 'less than or equal to `nticks`.', 'Has an effect only if `tickmode` is set to *auto*.'].join(' ')\n  },\n  tickvals: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the values at which ticks on this axis appear.', 'Only has an effect if `tickmode` is set to *array*.', 'Used with `ticktext`.'].join(' ')\n  },\n  ticktext: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the text displayed at the ticks position via `tickvals`.', 'Only has an effect if `tickmode` is set to *array*.', 'Used with `tickvals`.'].join(' ')\n  },\n  showticklabels: {\n    valType: 'enumerated',\n    values: ['start', 'end', 'both', 'none'],\n    dflt: 'start',\n    editType: 'calc',\n    description: ['Determines whether axis labels are drawn on the low side,', 'the high side, both, or neither side of the axis.'].join(' ')\n  },\n  labelalias: extendFlat({}, axesAttrs.labelalias, {\n    editType: 'calc'\n  }),\n  tickfont: fontAttrs({\n    editType: 'calc',\n    description: 'Sets the tick font.'\n  }),\n  tickangle: {\n    valType: 'angle',\n    dflt: 'auto',\n    editType: 'calc',\n    description: ['Sets the angle of the tick labels with respect to the horizontal.', 'For example, a `tickangle` of -90 draws the tick labels', 'vertically.'].join(' ')\n  },\n  tickprefix: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: 'Sets a tick label prefix.'\n  },\n  showtickprefix: {\n    valType: 'enumerated',\n    values: ['all', 'first', 'last', 'none'],\n    dflt: 'all',\n    editType: 'calc',\n    description: ['If *all*, all tick labels are displayed with a prefix.', 'If *first*, only the first tick is displayed with a prefix.', 'If *last*, only the last tick is displayed with a suffix.', 'If *none*, tick prefixes are hidden.'].join(' ')\n  },\n  ticksuffix: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: 'Sets a tick label suffix.'\n  },\n  showticksuffix: {\n    valType: 'enumerated',\n    values: ['all', 'first', 'last', 'none'],\n    dflt: 'all',\n    editType: 'calc',\n    description: 'Same as `showtickprefix` but for tick suffixes.'\n  },\n  showexponent: {\n    valType: 'enumerated',\n    values: ['all', 'first', 'last', 'none'],\n    dflt: 'all',\n    editType: 'calc',\n    description: ['If *all*, all exponents are shown besides their significands.', 'If *first*, only the exponent of the first tick is shown.', 'If *last*, only the exponent of the last tick is shown.', 'If *none*, no exponents appear.'].join(' ')\n  },\n  exponentformat: {\n    valType: 'enumerated',\n    values: ['none', 'e', 'E', 'power', 'SI', 'B'],\n    dflt: 'B',\n    editType: 'calc',\n    description: ['Determines a formatting rule for the tick exponents.', 'For example, consider the number 1,000,000,000.', 'If *none*, it appears as 1,000,000,000.', 'If *e*, 1e+9.', 'If *E*, 1E+9.', 'If *power*, 1x10^9 (with 9 in a super script).', 'If *SI*, 1G.', 'If *B*, 1B.'].join(' ')\n  },\n  minexponent: {\n    valType: 'number',\n    dflt: 3,\n    min: 0,\n    editType: 'calc',\n    description: ['Hide SI prefix for 10^n if |n| is below this number'].join(' ')\n  },\n  separatethousands: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'calc',\n    description: ['If \"true\", even 4-digit integers are separated'].join(' ')\n  },\n  tickformat: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: descriptionWithDates('tick label')\n  },\n  tickformatstops: overrideAll(axesAttrs.tickformatstops, 'calc', 'from-root'),\n  categoryorder: {\n    valType: 'enumerated',\n    values: ['trace', 'category ascending', 'category descending', 'array'\n    /* , 'value ascending', 'value descending'*/ // value ascending / descending to be implemented later\n    ],\n    dflt: 'trace',\n    editType: 'calc',\n    description: ['Specifies the ordering logic for the case of categorical variables.', 'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.', 'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by', 'the alphanumerical order of the category names.',\n    /* 'Set `categoryorder` to *value ascending* or *value descending* if order should be determined by the',\n    'numerical order of the values.',*/ // // value ascending / descending to be implemented later\n    'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category', 'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to', 'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.'].join(' ')\n  },\n  categoryarray: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the order in which categories on this axis appear.', 'Only has an effect if `categoryorder` is set to *array*.', 'Used with `categoryorder`.'].join(' ')\n  },\n  labelpadding: {\n    valType: 'integer',\n    dflt: 10,\n    editType: 'calc',\n    description: 'Extra padding between label and the axis'\n  },\n  labelprefix: {\n    valType: 'string',\n    editType: 'calc',\n    description: 'Sets a axis label prefix.'\n  },\n  labelsuffix: {\n    valType: 'string',\n    dflt: '',\n    editType: 'calc',\n    description: 'Sets a axis label suffix.'\n  },\n  // lines and grids\n  showline: {\n    valType: 'boolean',\n    dflt: false,\n    editType: 'calc',\n    description: ['Determines whether or not a line bounding this axis is drawn.'].join(' ')\n  },\n  linecolor: {\n    valType: 'color',\n    dflt: colorAttrs.defaultLine,\n    editType: 'calc',\n    description: 'Sets the axis line color.'\n  },\n  linewidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    editType: 'calc',\n    description: 'Sets the width (in px) of the axis line.'\n  },\n  gridcolor: {\n    valType: 'color',\n    editType: 'calc',\n    description: 'Sets the axis line color.'\n  },\n  gridwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    editType: 'calc',\n    description: 'Sets the width (in px) of the axis line.'\n  },\n  griddash: extendFlat({}, dash, {\n    editType: 'calc'\n  }),\n  showgrid: {\n    valType: 'boolean',\n    dflt: true,\n    editType: 'calc',\n    description: ['Determines whether or not grid lines are drawn.', 'If *true*, the grid lines are drawn at every tick mark.'].join(' ')\n  },\n  minorgridcount: {\n    valType: 'integer',\n    min: 0,\n    dflt: 0,\n    editType: 'calc',\n    description: 'Sets the number of minor grid ticks per major grid tick'\n  },\n  minorgridwidth: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    editType: 'calc',\n    description: 'Sets the width (in px) of the grid lines.'\n  },\n  minorgriddash: extendFlat({}, dash, {\n    editType: 'calc'\n  }),\n  minorgridcolor: {\n    valType: 'color',\n    dflt: colorAttrs.lightLine,\n    editType: 'calc',\n    description: 'Sets the color of the grid lines.'\n  },\n  startline: {\n    valType: 'boolean',\n    editType: 'calc',\n    description: ['Determines whether or not a line is drawn at along the starting value', 'of this axis.', 'If *true*, the start line is drawn on top of the grid lines.'].join(' ')\n  },\n  startlinecolor: {\n    valType: 'color',\n    editType: 'calc',\n    description: 'Sets the line color of the start line.'\n  },\n  startlinewidth: {\n    valType: 'number',\n    dflt: 1,\n    editType: 'calc',\n    description: 'Sets the width (in px) of the start line.'\n  },\n  endline: {\n    valType: 'boolean',\n    editType: 'calc',\n    description: ['Determines whether or not a line is drawn at along the final value', 'of this axis.', 'If *true*, the end line is drawn on top of the grid lines.'].join(' ')\n  },\n  endlinewidth: {\n    valType: 'number',\n    dflt: 1,\n    editType: 'calc',\n    description: 'Sets the width (in px) of the end line.'\n  },\n  endlinecolor: {\n    valType: 'color',\n    editType: 'calc',\n    description: 'Sets the line color of the end line.'\n  },\n  tick0: {\n    valType: 'number',\n    min: 0,\n    dflt: 0,\n    editType: 'calc',\n    description: 'The starting index of grid lines along the axis'\n  },\n  dtick: {\n    valType: 'number',\n    min: 0,\n    dflt: 1,\n    editType: 'calc',\n    description: 'The stride between grid lines along the axis'\n  },\n  arraytick0: {\n    valType: 'integer',\n    min: 0,\n    dflt: 0,\n    editType: 'calc',\n    description: 'The starting index of grid lines along the axis'\n  },\n  arraydtick: {\n    valType: 'integer',\n    min: 1,\n    dflt: 1,\n    editType: 'calc',\n    description: 'The stride between grid lines along the axis'\n  },\n  _deprecated: {\n    title: {\n      valType: 'string',\n      editType: 'calc',\n      description: ['Deprecated in favor of `title.text`.', 'Note that value of `title` is no longer a simple', '*string* but a set of sub-attributes.'].join(' ')\n    },\n    titlefont: fontAttrs({\n      editType: 'calc',\n      description: 'Deprecated in favor of `title.font`.'\n    }),\n    titleoffset: {\n      valType: 'number',\n      dflt: 10,\n      editType: 'calc',\n      description: 'Deprecated in favor of `title.offset`.'\n    }\n  },\n  editType: 'calc'\n};","map":{"version":3,"names":["fontAttrs","require","colorAttrs","axesAttrs","descriptionWithDates","overrideAll","dash","extendFlat","module","exports","color","valType","editType","description","join","smoothing","dflt","min","max","title","text","font","offset","type","values","autotypenumbers","autorange","rangemode","range","items","fixedrange","cheatertype","tickmode","nticks","tickvals","ticktext","showticklabels","labelalias","tickfont","tickangle","tickprefix","showtickprefix","ticksuffix","showticksuffix","showexponent","exponentformat","minexponent","separatethousands","tickformat","tickformatstops","categoryorder","categoryarray","labelpadding","labelprefix","labelsuffix","showline","linecolor","defaultLine","linewidth","gridcolor","gridwidth","griddash","showgrid","minorgridcount","minorgridwidth","minorgriddash","minorgridcolor","lightLine","startline","startlinecolor","startlinewidth","endline","endlinewidth","endlinecolor","tick0","dtick","arraytick0","arraydtick","_deprecated","titlefont","titleoffset"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/carpet/axis_attributes.js"],"sourcesContent":["'use strict';\n\nvar fontAttrs = require('../../plots/font_attributes');\nvar colorAttrs = require('../../components/color/attributes');\nvar axesAttrs = require('../../plots/cartesian/layout_attributes');\nvar descriptionWithDates = require('../../plots/cartesian/axis_format_attributes').descriptionWithDates;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar dash = require('../../components/drawing/attributes').dash;\nvar extendFlat = require('../../lib/extend').extendFlat;\n\n\nmodule.exports = {\n    color: {\n        valType: 'color',\n        editType: 'calc',\n        description: [\n            'Sets default for all colors associated with this axis',\n            'all at once: line, font, tick, and grid colors.',\n            'Grid color is lightened by blending this with the plot background',\n            'Individual pieces can override this.'\n        ].join(' ')\n    },\n    smoothing: {\n        valType: 'number',\n        dflt: 1,\n        min: 0,\n        max: 1.3,\n        editType: 'calc'\n    },\n    title: {\n        text: {\n            valType: 'string',\n            dflt: '',\n            editType: 'calc',\n            description: [\n                'Sets the title of this axis.',\n                'Note that before the existence of `title.text`, the title\\'s',\n                'contents used to be defined as the `title` attribute itself.',\n                'This behavior has been deprecated.'\n            ].join(' ')\n        },\n        font: fontAttrs({\n            editType: 'calc',\n            description: [\n                'Sets this axis\\' title font.',\n                'Note that the title\\'s font used to be set',\n                'by the now deprecated `titlefont` attribute.'\n            ].join(' ')\n        }),\n        // TODO how is this different than `title.standoff`\n        offset: {\n            valType: 'number',\n            dflt: 10,\n            editType: 'calc',\n            description: [\n                'An additional amount by which to offset the title from the tick',\n                'labels, given in pixels.',\n                'Note that this used to be set',\n                'by the now deprecated `titleoffset` attribute.'\n            ].join(' '),\n        },\n        editType: 'calc',\n    },\n    type: {\n        valType: 'enumerated',\n        // '-' means we haven't yet run autotype or couldn't find any data\n        // it gets turned into linear in gd._fullLayout but not copied back\n        // to gd.data like the others are.\n        values: ['-', 'linear', 'date', 'category'],\n        dflt: '-',\n        editType: 'calc',\n        description: [\n            'Sets the axis type.',\n            'By default, plotly attempts to determined the axis type',\n            'by looking into the data of the traces that referenced',\n            'the axis in question.'\n        ].join(' ')\n    },\n    autotypenumbers: axesAttrs.autotypenumbers,\n    autorange: {\n        valType: 'enumerated',\n        values: [true, false, 'reversed'],\n        dflt: true,\n        editType: 'calc',\n        description: [\n            'Determines whether or not the range of this axis is',\n            'computed in relation to the input data.',\n            'See `rangemode` for more info.',\n            'If `range` is provided, then `autorange` is set to *false*.'\n        ].join(' ')\n    },\n    rangemode: {\n        valType: 'enumerated',\n        values: ['normal', 'tozero', 'nonnegative'],\n        dflt: 'normal',\n        editType: 'calc',\n        description: [\n            'If *normal*, the range is computed in relation to the extrema',\n            'of the input data.',\n            'If *tozero*`, the range extends to 0,',\n            'regardless of the input data',\n            'If *nonnegative*, the range is non-negative,',\n            'regardless of the input data.'\n        ].join(' ')\n    },\n    range: {\n        valType: 'info_array',\n        editType: 'calc',\n        items: [\n            {valType: 'any', editType: 'calc'},\n            {valType: 'any', editType: 'calc'}\n        ],\n        description: [\n            'Sets the range of this axis.',\n            'If the axis `type` is *log*, then you must take the log of your',\n            'desired range (e.g. to set the range from 1 to 100,',\n            'set the range from 0 to 2).',\n            'If the axis `type` is *date*, it should be date strings,',\n            'like date data, though Date objects and unix milliseconds',\n            'will be accepted and converted to strings.',\n            'If the axis `type` is *category*, it should be numbers,',\n            'using the scale where each category is assigned a serial',\n            'number from zero in the order it appears.'\n        ].join(' ')\n    },\n\n    fixedrange: {\n        valType: 'boolean',\n        dflt: false,\n        editType: 'calc',\n        description: [\n            'Determines whether or not this axis is zoom-able.',\n            'If true, then zoom is disabled.'\n        ].join(' ')\n    },\n    cheatertype: {\n        valType: 'enumerated',\n        values: ['index', 'value'],\n        dflt: 'value',\n        editType: 'calc'\n    },\n    tickmode: {\n        valType: 'enumerated',\n        values: ['linear', 'array'],\n        dflt: 'array',\n        editType: 'calc'\n    },\n    nticks: {\n        valType: 'integer',\n        min: 0,\n        dflt: 0,\n        editType: 'calc',\n        description: [\n            'Specifies the maximum number of ticks for the particular axis.',\n            'The actual number of ticks will be chosen automatically to be',\n            'less than or equal to `nticks`.',\n            'Has an effect only if `tickmode` is set to *auto*.'\n        ].join(' ')\n    },\n    tickvals: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the values at which ticks on this axis appear.',\n            'Only has an effect if `tickmode` is set to *array*.',\n            'Used with `ticktext`.'\n        ].join(' ')\n    },\n    ticktext: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the text displayed at the ticks position via `tickvals`.',\n            'Only has an effect if `tickmode` is set to *array*.',\n            'Used with `tickvals`.'\n        ].join(' ')\n    },\n    showticklabels: {\n        valType: 'enumerated',\n        values: ['start', 'end', 'both', 'none'],\n        dflt: 'start',\n        editType: 'calc',\n        description: [\n            'Determines whether axis labels are drawn on the low side,',\n            'the high side, both, or neither side of the axis.'\n        ].join(' ')\n    },\n    labelalias: extendFlat({}, axesAttrs.labelalias, {editType: 'calc'}),\n    tickfont: fontAttrs({\n        editType: 'calc',\n        description: 'Sets the tick font.'\n    }),\n    tickangle: {\n        valType: 'angle',\n        dflt: 'auto',\n        editType: 'calc',\n        description: [\n            'Sets the angle of the tick labels with respect to the horizontal.',\n            'For example, a `tickangle` of -90 draws the tick labels',\n            'vertically.'\n        ].join(' ')\n    },\n    tickprefix: {\n        valType: 'string',\n        dflt: '',\n        editType: 'calc',\n        description: 'Sets a tick label prefix.'\n    },\n    showtickprefix: {\n        valType: 'enumerated',\n        values: ['all', 'first', 'last', 'none'],\n        dflt: 'all',\n        editType: 'calc',\n        description: [\n            'If *all*, all tick labels are displayed with a prefix.',\n            'If *first*, only the first tick is displayed with a prefix.',\n            'If *last*, only the last tick is displayed with a suffix.',\n            'If *none*, tick prefixes are hidden.'\n        ].join(' ')\n    },\n    ticksuffix: {\n        valType: 'string',\n        dflt: '',\n        editType: 'calc',\n        description: 'Sets a tick label suffix.'\n    },\n    showticksuffix: {\n        valType: 'enumerated',\n        values: ['all', 'first', 'last', 'none'],\n        dflt: 'all',\n        editType: 'calc',\n        description: 'Same as `showtickprefix` but for tick suffixes.'\n    },\n    showexponent: {\n        valType: 'enumerated',\n        values: ['all', 'first', 'last', 'none'],\n        dflt: 'all',\n        editType: 'calc',\n        description: [\n            'If *all*, all exponents are shown besides their significands.',\n            'If *first*, only the exponent of the first tick is shown.',\n            'If *last*, only the exponent of the last tick is shown.',\n            'If *none*, no exponents appear.'\n        ].join(' ')\n    },\n    exponentformat: {\n        valType: 'enumerated',\n        values: ['none', 'e', 'E', 'power', 'SI', 'B'],\n        dflt: 'B',\n        editType: 'calc',\n        description: [\n            'Determines a formatting rule for the tick exponents.',\n            'For example, consider the number 1,000,000,000.',\n            'If *none*, it appears as 1,000,000,000.',\n            'If *e*, 1e+9.',\n            'If *E*, 1E+9.',\n            'If *power*, 1x10^9 (with 9 in a super script).',\n            'If *SI*, 1G.',\n            'If *B*, 1B.'\n        ].join(' ')\n    },\n    minexponent: {\n        valType: 'number',\n        dflt: 3,\n        min: 0,\n        editType: 'calc',\n        description: [\n            'Hide SI prefix for 10^n if |n| is below this number'\n        ].join(' ')\n    },\n    separatethousands: {\n        valType: 'boolean',\n        dflt: false,\n        editType: 'calc',\n        description: [\n            'If \"true\", even 4-digit integers are separated'\n        ].join(' ')\n    },\n    tickformat: {\n        valType: 'string',\n        dflt: '',\n        editType: 'calc',\n        description: descriptionWithDates('tick label')\n    },\n    tickformatstops: overrideAll(axesAttrs.tickformatstops, 'calc', 'from-root'),\n    categoryorder: {\n        valType: 'enumerated',\n        values: [\n            'trace', 'category ascending', 'category descending', 'array'\n            /* , 'value ascending', 'value descending'*/ // value ascending / descending to be implemented later\n        ],\n        dflt: 'trace',\n        editType: 'calc',\n        description: [\n            'Specifies the ordering logic for the case of categorical variables.',\n            'By default, plotly uses *trace*, which specifies the order that is present in the data supplied.',\n            'Set `categoryorder` to *category ascending* or *category descending* if order should be determined by',\n            'the alphanumerical order of the category names.',\n            /* 'Set `categoryorder` to *value ascending* or *value descending* if order should be determined by the',\n            'numerical order of the values.',*/ // // value ascending / descending to be implemented later\n            'Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category',\n            'is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to',\n            'the *trace* mode. The unspecified categories will follow the categories in `categoryarray`.'\n        ].join(' ')\n    },\n    categoryarray: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the order in which categories on this axis appear.',\n            'Only has an effect if `categoryorder` is set to *array*.',\n            'Used with `categoryorder`.'\n        ].join(' ')\n    },\n    labelpadding: {\n        valType: 'integer',\n        dflt: 10,\n        editType: 'calc',\n        description: 'Extra padding between label and the axis'\n    },\n    labelprefix: {\n        valType: 'string',\n        editType: 'calc',\n        description: 'Sets a axis label prefix.'\n    },\n    labelsuffix: {\n        valType: 'string',\n        dflt: '',\n        editType: 'calc',\n        description: 'Sets a axis label suffix.'\n    },\n    // lines and grids\n    showline: {\n        valType: 'boolean',\n        dflt: false,\n        editType: 'calc',\n        description: [\n            'Determines whether or not a line bounding this axis is drawn.'\n        ].join(' ')\n    },\n    linecolor: {\n        valType: 'color',\n        dflt: colorAttrs.defaultLine,\n        editType: 'calc',\n        description: 'Sets the axis line color.'\n    },\n    linewidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        editType: 'calc',\n        description: 'Sets the width (in px) of the axis line.'\n    },\n    gridcolor: {\n        valType: 'color',\n        editType: 'calc',\n        description: 'Sets the axis line color.'\n    },\n    gridwidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        editType: 'calc',\n        description: 'Sets the width (in px) of the axis line.'\n    },\n    griddash: extendFlat({}, dash, {editType: 'calc'}),\n    showgrid: {\n        valType: 'boolean',\n        dflt: true,\n        editType: 'calc',\n        description: [\n            'Determines whether or not grid lines are drawn.',\n            'If *true*, the grid lines are drawn at every tick mark.'\n        ].join(' ')\n    },\n    minorgridcount: {\n        valType: 'integer',\n        min: 0,\n        dflt: 0,\n        editType: 'calc',\n        description: 'Sets the number of minor grid ticks per major grid tick'\n    },\n    minorgridwidth: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        editType: 'calc',\n        description: 'Sets the width (in px) of the grid lines.'\n    },\n    minorgriddash: extendFlat({}, dash, {editType: 'calc'}),\n    minorgridcolor: {\n        valType: 'color',\n        dflt: colorAttrs.lightLine,\n        editType: 'calc',\n        description: 'Sets the color of the grid lines.'\n    },\n    startline: {\n        valType: 'boolean',\n        editType: 'calc',\n        description: [\n            'Determines whether or not a line is drawn at along the starting value',\n            'of this axis.',\n            'If *true*, the start line is drawn on top of the grid lines.'\n        ].join(' ')\n    },\n    startlinecolor: {\n        valType: 'color',\n        editType: 'calc',\n        description: 'Sets the line color of the start line.'\n    },\n    startlinewidth: {\n        valType: 'number',\n        dflt: 1,\n        editType: 'calc',\n        description: 'Sets the width (in px) of the start line.'\n    },\n    endline: {\n        valType: 'boolean',\n        editType: 'calc',\n        description: [\n            'Determines whether or not a line is drawn at along the final value',\n            'of this axis.',\n            'If *true*, the end line is drawn on top of the grid lines.'\n        ].join(' ')\n    },\n    endlinewidth: {\n        valType: 'number',\n        dflt: 1,\n        editType: 'calc',\n        description: 'Sets the width (in px) of the end line.'\n    },\n    endlinecolor: {\n        valType: 'color',\n        editType: 'calc',\n        description: 'Sets the line color of the end line.'\n    },\n    tick0: {\n        valType: 'number',\n        min: 0,\n        dflt: 0,\n        editType: 'calc',\n        description: 'The starting index of grid lines along the axis'\n    },\n    dtick: {\n        valType: 'number',\n        min: 0,\n        dflt: 1,\n        editType: 'calc',\n        description: 'The stride between grid lines along the axis'\n    },\n    arraytick0: {\n        valType: 'integer',\n        min: 0,\n        dflt: 0,\n        editType: 'calc',\n        description: 'The starting index of grid lines along the axis'\n    },\n    arraydtick: {\n        valType: 'integer',\n        min: 1,\n        dflt: 1,\n        editType: 'calc',\n        description: 'The stride between grid lines along the axis'\n    },\n\n    _deprecated: {\n        title: {\n            valType: 'string',\n            editType: 'calc',\n            description: [\n                'Deprecated in favor of `title.text`.',\n                'Note that value of `title` is no longer a simple',\n                '*string* but a set of sub-attributes.'\n            ].join(' ')\n        },\n        titlefont: fontAttrs({\n            editType: 'calc',\n            description: 'Deprecated in favor of `title.font`.'\n        }),\n        titleoffset: {\n            valType: 'number',\n            dflt: 10,\n            editType: 'calc',\n            description: 'Deprecated in favor of `title.offset`.'\n        }\n    },\n\n    editType: 'calc'\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}