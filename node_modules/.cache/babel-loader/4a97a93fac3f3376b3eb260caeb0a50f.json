{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  visible: {\n    valType: 'boolean',\n    editType: 'calc',\n    description: ['Determines whether or not this set of error bars is visible.'].join(' ')\n  },\n  type: {\n    valType: 'enumerated',\n    values: ['percent', 'constant', 'sqrt', 'data'],\n    editType: 'calc',\n    description: ['Determines the rule used to generate the error bars.', 'If *constant`, the bar lengths are of a constant value.', 'Set this constant in `value`.', 'If *percent*, the bar lengths correspond to a percentage of', 'underlying data. Set this percentage in `value`.', 'If *sqrt*, the bar lengths correspond to the square of the', 'underlying data.', 'If *data*, the bar lengths are set with data set `array`.'].join(' ')\n  },\n  symmetric: {\n    valType: 'boolean',\n    editType: 'calc',\n    description: ['Determines whether or not the error bars have the same length', 'in both direction', '(top/bottom for vertical bars, left/right for horizontal bars.'].join(' ')\n  },\n  array: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the data corresponding the length of each error bar.', 'Values are plotted relative to the underlying data.'].join(' ')\n  },\n  arrayminus: {\n    valType: 'data_array',\n    editType: 'calc',\n    description: ['Sets the data corresponding the length of each error bar in the', 'bottom (left) direction for vertical (horizontal) bars', 'Values are plotted relative to the underlying data.'].join(' ')\n  },\n  value: {\n    valType: 'number',\n    min: 0,\n    dflt: 10,\n    editType: 'calc',\n    description: ['Sets the value of either the percentage', '(if `type` is set to *percent*) or the constant', '(if `type` is set to *constant*) corresponding to the lengths of', 'the error bars.'].join(' ')\n  },\n  valueminus: {\n    valType: 'number',\n    min: 0,\n    dflt: 10,\n    editType: 'calc',\n    description: ['Sets the value of either the percentage', '(if `type` is set to *percent*) or the constant', '(if `type` is set to *constant*) corresponding to the lengths of', 'the error bars in the', 'bottom (left) direction for vertical (horizontal) bars'].join(' ')\n  },\n  traceref: {\n    valType: 'integer',\n    min: 0,\n    dflt: 0,\n    editType: 'style'\n  },\n  tracerefminus: {\n    valType: 'integer',\n    min: 0,\n    dflt: 0,\n    editType: 'style'\n  },\n  copy_ystyle: {\n    valType: 'boolean',\n    editType: 'plot'\n  },\n  copy_zstyle: {\n    valType: 'boolean',\n    editType: 'style'\n  },\n  color: {\n    valType: 'color',\n    editType: 'style',\n    description: 'Sets the stoke color of the error bars.'\n  },\n  thickness: {\n    valType: 'number',\n    min: 0,\n    dflt: 2,\n    editType: 'style',\n    description: 'Sets the thickness (in px) of the error bars.'\n  },\n  width: {\n    valType: 'number',\n    min: 0,\n    editType: 'plot',\n    description: ['Sets the width (in px) of the cross-bar at both ends', 'of the error bars.'].join(' ')\n  },\n  editType: 'calc',\n  _deprecated: {\n    opacity: {\n      valType: 'number',\n      editType: 'style',\n      description: ['Obsolete.', 'Use the alpha channel in error bar `color` to set the opacity.'].join(' ')\n    }\n  }\n};","map":{"version":3,"names":["module","exports","visible","valType","editType","description","join","type","values","symmetric","array","arrayminus","value","min","dflt","valueminus","traceref","tracerefminus","copy_ystyle","copy_zstyle","color","thickness","width","_deprecated","opacity"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/components/errorbars/attributes.js"],"sourcesContent":["'use strict';\n\n\nmodule.exports = {\n    visible: {\n        valType: 'boolean',\n        editType: 'calc',\n        description: [\n            'Determines whether or not this set of error bars is visible.'\n        ].join(' ')\n    },\n    type: {\n        valType: 'enumerated',\n        values: ['percent', 'constant', 'sqrt', 'data'],\n        editType: 'calc',\n        description: [\n            'Determines the rule used to generate the error bars.',\n\n            'If *constant`, the bar lengths are of a constant value.',\n            'Set this constant in `value`.',\n\n            'If *percent*, the bar lengths correspond to a percentage of',\n            'underlying data. Set this percentage in `value`.',\n\n            'If *sqrt*, the bar lengths correspond to the square of the',\n            'underlying data.',\n\n            'If *data*, the bar lengths are set with data set `array`.'\n        ].join(' ')\n    },\n    symmetric: {\n        valType: 'boolean',\n        editType: 'calc',\n        description: [\n            'Determines whether or not the error bars have the same length',\n            'in both direction',\n            '(top/bottom for vertical bars, left/right for horizontal bars.'\n        ].join(' ')\n    },\n    array: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the data corresponding the length of each error bar.',\n            'Values are plotted relative to the underlying data.'\n        ].join(' ')\n    },\n    arrayminus: {\n        valType: 'data_array',\n        editType: 'calc',\n        description: [\n            'Sets the data corresponding the length of each error bar in the',\n            'bottom (left) direction for vertical (horizontal) bars',\n            'Values are plotted relative to the underlying data.'\n        ].join(' ')\n    },\n    value: {\n        valType: 'number',\n        min: 0,\n        dflt: 10,\n        editType: 'calc',\n        description: [\n            'Sets the value of either the percentage',\n            '(if `type` is set to *percent*) or the constant',\n            '(if `type` is set to *constant*) corresponding to the lengths of',\n            'the error bars.'\n        ].join(' ')\n    },\n    valueminus: {\n        valType: 'number',\n        min: 0,\n        dflt: 10,\n        editType: 'calc',\n        description: [\n            'Sets the value of either the percentage',\n            '(if `type` is set to *percent*) or the constant',\n            '(if `type` is set to *constant*) corresponding to the lengths of',\n            'the error bars in the',\n            'bottom (left) direction for vertical (horizontal) bars'\n        ].join(' ')\n    },\n    traceref: {\n        valType: 'integer',\n        min: 0,\n        dflt: 0,\n        editType: 'style'\n    },\n    tracerefminus: {\n        valType: 'integer',\n        min: 0,\n        dflt: 0,\n        editType: 'style'\n    },\n    copy_ystyle: {\n        valType: 'boolean',\n        editType: 'plot'\n    },\n    copy_zstyle: {\n        valType: 'boolean',\n        editType: 'style'\n    },\n    color: {\n        valType: 'color',\n        editType: 'style',\n        description: 'Sets the stoke color of the error bars.'\n    },\n    thickness: {\n        valType: 'number',\n        min: 0,\n        dflt: 2,\n        editType: 'style',\n        description: 'Sets the thickness (in px) of the error bars.'\n    },\n    width: {\n        valType: 'number',\n        min: 0,\n        editType: 'plot',\n        description: [\n            'Sets the width (in px) of the cross-bar at both ends',\n            'of the error bars.'\n        ].join(' ')\n    },\n    editType: 'calc',\n\n    _deprecated: {\n        opacity: {\n            valType: 'number',\n            editType: 'style',\n            description: [\n                'Obsolete.',\n                'Use the alpha channel in error bar `color` to set the opacity.'\n            ].join(' ')\n        }\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}