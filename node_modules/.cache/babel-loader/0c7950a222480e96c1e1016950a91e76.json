{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\n// look for either subplot or xaxis and yaxis attributes\n// does not handle splom case\nexports.getSubplot = function (trace) {\n  return trace.subplot || trace.xaxis + trace.yaxis || trace.geo;\n};\n\n// is trace in given list of subplots?\n// does handle splom case\nexports.isTraceInSubplots = function (trace, subplots) {\n  if (trace.type === 'splom') {\n    var xaxes = trace.xaxes || [];\n    var yaxes = trace.yaxes || [];\n    for (var i = 0; i < xaxes.length; i++) {\n      for (var j = 0; j < yaxes.length; j++) {\n        if (subplots.indexOf(xaxes[i] + yaxes[j]) !== -1) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  return subplots.indexOf(exports.getSubplot(trace)) !== -1;\n};\n\n// convenience functions for mapping all relevant axes\nexports.flat = function (subplots, v) {\n  var out = new Array(subplots.length);\n  for (var i = 0; i < subplots.length; i++) {\n    out[i] = v;\n  }\n  return out;\n};\nexports.p2c = function (axArray, v) {\n  var out = new Array(axArray.length);\n  for (var i = 0; i < axArray.length; i++) {\n    out[i] = axArray[i].p2c(v);\n  }\n  return out;\n};\nexports.getDistanceFunction = function (mode, dx, dy, dxy) {\n  if (mode === 'closest') return dxy || exports.quadrature(dx, dy);\n  return mode.charAt(0) === 'x' ? dx : dy;\n};\nexports.getClosest = function (cd, distfn, pointData) {\n  // do we already have a point number? (array mode only)\n  if (pointData.index !== false) {\n    if (pointData.index >= 0 && pointData.index < cd.length) {\n      pointData.distance = 0;\n    } else pointData.index = false;\n  } else {\n    // apply the distance function to each data point\n    // this is the longest loop... if this bogs down, we may need\n    // to create pre-sorted data (by x or y), not sure how to\n    // do this for 'closest'\n    for (var i = 0; i < cd.length; i++) {\n      var newDistance = distfn(cd[i]);\n      if (newDistance <= pointData.distance) {\n        pointData.index = i;\n        pointData.distance = newDistance;\n      }\n    }\n  }\n  return pointData;\n};\n\n/*\n * pseudo-distance function for hover effects on areas: inside the region\n * distance is finite (`passVal`), outside it's Infinity.\n *\n * @param {number} v0: signed difference between the current position and the left edge\n * @param {number} v1: signed difference between the current position and the right edge\n * @param {number} passVal: the value to return on success\n */\nexports.inbox = function (v0, v1, passVal) {\n  return v0 * v1 < 0 || v0 === 0 ? passVal : Infinity;\n};\nexports.quadrature = function (dx, dy) {\n  return function (di) {\n    var x = dx(di);\n    var y = dy(di);\n    return Math.sqrt(x * x + y * y);\n  };\n};\n\n/** Fill event data point object for hover and selection.\n *  Invokes _module.eventData if present.\n *\n * N.B. note that point 'index' corresponds to input data array index\n *  whereas 'number' is its post-transform version.\n *\n * If the hovered/selected pt corresponds to an multiple input points\n * (e.g. for histogram and transformed traces), 'pointNumbers` and 'pointIndices'\n * are include in the event data.\n *\n * @param {object} pt\n * @param {object} trace\n * @param {object} cd\n * @return {object}\n */\nexports.makeEventData = function (pt, trace, cd) {\n  // hover uses 'index', select uses 'pointNumber'\n  var pointNumber = 'index' in pt ? pt.index : pt.pointNumber;\n  var out = {\n    data: trace._input,\n    fullData: trace,\n    curveNumber: trace.index,\n    pointNumber: pointNumber\n  };\n  if (trace._indexToPoints) {\n    var pointIndices = trace._indexToPoints[pointNumber];\n    if (pointIndices.length === 1) {\n      out.pointIndex = pointIndices[0];\n    } else {\n      out.pointIndices = pointIndices;\n    }\n  } else {\n    out.pointIndex = pointNumber;\n  }\n  if (trace._module.eventData) {\n    out = trace._module.eventData(out, pt, trace, cd, pointNumber);\n  } else {\n    if ('xVal' in pt) out.x = pt.xVal;else if ('x' in pt) out.x = pt.x;\n    if ('yVal' in pt) out.y = pt.yVal;else if ('y' in pt) out.y = pt.y;\n    if (pt.xa) out.xaxis = pt.xa;\n    if (pt.ya) out.yaxis = pt.ya;\n    if (pt.zLabelVal !== undefined) out.z = pt.zLabelVal;\n  }\n  exports.appendArrayPointValue(out, trace, pointNumber);\n  return out;\n};\n\n/** Appends values inside array attributes corresponding to given point number\n *\n * @param {object} pointData : point data object (gets mutated here)\n * @param {object} trace : full trace object\n * @param {number|Array(number)} pointNumber : point number. May be a length-2 array\n *     [row, col] to dig into 2D arrays\n */\nexports.appendArrayPointValue = function (pointData, trace, pointNumber) {\n  var arrayAttrs = trace._arrayAttrs;\n  if (!arrayAttrs) {\n    return;\n  }\n  for (var i = 0; i < arrayAttrs.length; i++) {\n    var astr = arrayAttrs[i];\n    var key = getPointKey(astr);\n    if (pointData[key] === undefined) {\n      var val = Lib.nestedProperty(trace, astr).get();\n      var pointVal = getPointData(val, pointNumber);\n      if (pointVal !== undefined) pointData[key] = pointVal;\n    }\n  }\n};\n\n/**\n * Appends values inside array attributes corresponding to given point number array\n * For use when pointData references a plot entity that arose (or potentially arose)\n * from multiple points in the input data\n *\n * @param {object} pointData : point data object (gets mutated here)\n * @param {object} trace : full trace object\n * @param {Array(number)|Array(Array(number))} pointNumbers : Array of point numbers.\n *     Each entry in the array may itself be a length-2 array [row, col] to dig into 2D arrays\n */\nexports.appendArrayMultiPointValues = function (pointData, trace, pointNumbers) {\n  var arrayAttrs = trace._arrayAttrs;\n  if (!arrayAttrs) {\n    return;\n  }\n  for (var i = 0; i < arrayAttrs.length; i++) {\n    var astr = arrayAttrs[i];\n    var key = getPointKey(astr);\n    if (pointData[key] === undefined) {\n      var val = Lib.nestedProperty(trace, astr).get();\n      var keyVal = new Array(pointNumbers.length);\n      for (var j = 0; j < pointNumbers.length; j++) {\n        keyVal[j] = getPointData(val, pointNumbers[j]);\n      }\n      pointData[key] = keyVal;\n    }\n  }\n};\nvar pointKeyMap = {\n  ids: 'id',\n  locations: 'location',\n  labels: 'label',\n  values: 'value',\n  'marker.colors': 'color',\n  parents: 'parent'\n};\nfunction getPointKey(astr) {\n  return pointKeyMap[astr] || astr;\n}\nfunction getPointData(val, pointNumber) {\n  if (Array.isArray(pointNumber)) {\n    if (Array.isArray(val) && Array.isArray(val[pointNumber[0]])) {\n      return val[pointNumber[0]][pointNumber[1]];\n    }\n  } else {\n    return val[pointNumber];\n  }\n}\nvar xyHoverMode = {\n  x: true,\n  y: true\n};\nvar unifiedHoverMode = {\n  'x unified': true,\n  'y unified': true\n};\nexports.isUnifiedHover = function (hovermode) {\n  if (typeof hovermode !== 'string') return false;\n  return !!unifiedHoverMode[hovermode];\n};\nexports.isXYhover = function (hovermode) {\n  if (typeof hovermode !== 'string') return false;\n  return !!xyHoverMode[hovermode];\n};","map":{"version":3,"names":["Lib","require","exports","getSubplot","trace","subplot","xaxis","yaxis","geo","isTraceInSubplots","subplots","type","xaxes","yaxes","i","length","j","indexOf","flat","v","out","Array","p2c","axArray","getDistanceFunction","mode","dx","dy","dxy","quadrature","charAt","getClosest","cd","distfn","pointData","index","distance","newDistance","inbox","v0","v1","passVal","Infinity","di","x","y","Math","sqrt","makeEventData","pt","pointNumber","data","_input","fullData","curveNumber","_indexToPoints","pointIndices","pointIndex","_module","eventData","xVal","yVal","xa","ya","zLabelVal","undefined","z","appendArrayPointValue","arrayAttrs","_arrayAttrs","astr","key","getPointKey","val","nestedProperty","get","pointVal","getPointData","appendArrayMultiPointValues","pointNumbers","keyVal","pointKeyMap","ids","locations","labels","values","parents","isArray","xyHoverMode","unifiedHoverMode","isUnifiedHover","hovermode","isXYhover"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/components/fx/helpers.js"],"sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\n\n// look for either subplot or xaxis and yaxis attributes\n// does not handle splom case\nexports.getSubplot = function(trace) {\n    return trace.subplot || (trace.xaxis + trace.yaxis) || trace.geo;\n};\n\n// is trace in given list of subplots?\n// does handle splom case\nexports.isTraceInSubplots = function(trace, subplots) {\n    if(trace.type === 'splom') {\n        var xaxes = trace.xaxes || [];\n        var yaxes = trace.yaxes || [];\n        for(var i = 0; i < xaxes.length; i++) {\n            for(var j = 0; j < yaxes.length; j++) {\n                if(subplots.indexOf(xaxes[i] + yaxes[j]) !== -1) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    return subplots.indexOf(exports.getSubplot(trace)) !== -1;\n};\n\n// convenience functions for mapping all relevant axes\nexports.flat = function(subplots, v) {\n    var out = new Array(subplots.length);\n    for(var i = 0; i < subplots.length; i++) {\n        out[i] = v;\n    }\n    return out;\n};\n\nexports.p2c = function(axArray, v) {\n    var out = new Array(axArray.length);\n    for(var i = 0; i < axArray.length; i++) {\n        out[i] = axArray[i].p2c(v);\n    }\n    return out;\n};\n\nexports.getDistanceFunction = function(mode, dx, dy, dxy) {\n    if(mode === 'closest') return dxy || exports.quadrature(dx, dy);\n    return mode.charAt(0) === 'x' ? dx : dy;\n};\n\nexports.getClosest = function(cd, distfn, pointData) {\n    // do we already have a point number? (array mode only)\n    if(pointData.index !== false) {\n        if(pointData.index >= 0 && pointData.index < cd.length) {\n            pointData.distance = 0;\n        } else pointData.index = false;\n    } else {\n        // apply the distance function to each data point\n        // this is the longest loop... if this bogs down, we may need\n        // to create pre-sorted data (by x or y), not sure how to\n        // do this for 'closest'\n        for(var i = 0; i < cd.length; i++) {\n            var newDistance = distfn(cd[i]);\n            if(newDistance <= pointData.distance) {\n                pointData.index = i;\n                pointData.distance = newDistance;\n            }\n        }\n    }\n    return pointData;\n};\n\n/*\n * pseudo-distance function for hover effects on areas: inside the region\n * distance is finite (`passVal`), outside it's Infinity.\n *\n * @param {number} v0: signed difference between the current position and the left edge\n * @param {number} v1: signed difference between the current position and the right edge\n * @param {number} passVal: the value to return on success\n */\nexports.inbox = function(v0, v1, passVal) {\n    return (v0 * v1 < 0 || v0 === 0) ? passVal : Infinity;\n};\n\nexports.quadrature = function(dx, dy) {\n    return function(di) {\n        var x = dx(di);\n        var y = dy(di);\n        return Math.sqrt(x * x + y * y);\n    };\n};\n\n/** Fill event data point object for hover and selection.\n *  Invokes _module.eventData if present.\n *\n * N.B. note that point 'index' corresponds to input data array index\n *  whereas 'number' is its post-transform version.\n *\n * If the hovered/selected pt corresponds to an multiple input points\n * (e.g. for histogram and transformed traces), 'pointNumbers` and 'pointIndices'\n * are include in the event data.\n *\n * @param {object} pt\n * @param {object} trace\n * @param {object} cd\n * @return {object}\n */\nexports.makeEventData = function(pt, trace, cd) {\n    // hover uses 'index', select uses 'pointNumber'\n    var pointNumber = 'index' in pt ? pt.index : pt.pointNumber;\n\n    var out = {\n        data: trace._input,\n        fullData: trace,\n        curveNumber: trace.index,\n        pointNumber: pointNumber\n    };\n\n    if(trace._indexToPoints) {\n        var pointIndices = trace._indexToPoints[pointNumber];\n\n        if(pointIndices.length === 1) {\n            out.pointIndex = pointIndices[0];\n        } else {\n            out.pointIndices = pointIndices;\n        }\n    } else {\n        out.pointIndex = pointNumber;\n    }\n\n    if(trace._module.eventData) {\n        out = trace._module.eventData(out, pt, trace, cd, pointNumber);\n    } else {\n        if('xVal' in pt) out.x = pt.xVal;\n        else if('x' in pt) out.x = pt.x;\n\n        if('yVal' in pt) out.y = pt.yVal;\n        else if('y' in pt) out.y = pt.y;\n\n        if(pt.xa) out.xaxis = pt.xa;\n        if(pt.ya) out.yaxis = pt.ya;\n        if(pt.zLabelVal !== undefined) out.z = pt.zLabelVal;\n    }\n\n    exports.appendArrayPointValue(out, trace, pointNumber);\n\n    return out;\n};\n\n/** Appends values inside array attributes corresponding to given point number\n *\n * @param {object} pointData : point data object (gets mutated here)\n * @param {object} trace : full trace object\n * @param {number|Array(number)} pointNumber : point number. May be a length-2 array\n *     [row, col] to dig into 2D arrays\n */\nexports.appendArrayPointValue = function(pointData, trace, pointNumber) {\n    var arrayAttrs = trace._arrayAttrs;\n\n    if(!arrayAttrs) {\n        return;\n    }\n\n    for(var i = 0; i < arrayAttrs.length; i++) {\n        var astr = arrayAttrs[i];\n        var key = getPointKey(astr);\n\n        if(pointData[key] === undefined) {\n            var val = Lib.nestedProperty(trace, astr).get();\n            var pointVal = getPointData(val, pointNumber);\n\n            if(pointVal !== undefined) pointData[key] = pointVal;\n        }\n    }\n};\n\n/**\n * Appends values inside array attributes corresponding to given point number array\n * For use when pointData references a plot entity that arose (or potentially arose)\n * from multiple points in the input data\n *\n * @param {object} pointData : point data object (gets mutated here)\n * @param {object} trace : full trace object\n * @param {Array(number)|Array(Array(number))} pointNumbers : Array of point numbers.\n *     Each entry in the array may itself be a length-2 array [row, col] to dig into 2D arrays\n */\nexports.appendArrayMultiPointValues = function(pointData, trace, pointNumbers) {\n    var arrayAttrs = trace._arrayAttrs;\n\n    if(!arrayAttrs) {\n        return;\n    }\n\n    for(var i = 0; i < arrayAttrs.length; i++) {\n        var astr = arrayAttrs[i];\n        var key = getPointKey(astr);\n\n        if(pointData[key] === undefined) {\n            var val = Lib.nestedProperty(trace, astr).get();\n            var keyVal = new Array(pointNumbers.length);\n\n            for(var j = 0; j < pointNumbers.length; j++) {\n                keyVal[j] = getPointData(val, pointNumbers[j]);\n            }\n            pointData[key] = keyVal;\n        }\n    }\n};\n\nvar pointKeyMap = {\n    ids: 'id',\n    locations: 'location',\n    labels: 'label',\n    values: 'value',\n    'marker.colors': 'color',\n    parents: 'parent'\n};\n\nfunction getPointKey(astr) {\n    return pointKeyMap[astr] || astr;\n}\n\nfunction getPointData(val, pointNumber) {\n    if(Array.isArray(pointNumber)) {\n        if(Array.isArray(val) && Array.isArray(val[pointNumber[0]])) {\n            return val[pointNumber[0]][pointNumber[1]];\n        }\n    } else {\n        return val[pointNumber];\n    }\n}\n\nvar xyHoverMode = {\n    x: true,\n    y: true\n};\n\nvar unifiedHoverMode = {\n    'x unified': true,\n    'y unified': true\n};\n\nexports.isUnifiedHover = function(hovermode) {\n    if(typeof hovermode !== 'string') return false;\n    return !!unifiedHoverMode[hovermode];\n};\n\nexports.isXYhover = function(hovermode) {\n    if(typeof hovermode !== 'string') return false;\n    return !!xyHoverMode[hovermode];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}