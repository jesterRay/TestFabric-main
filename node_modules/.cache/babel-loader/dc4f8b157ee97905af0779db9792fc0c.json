{"ast":null,"code":"/**\n * Module dependencies.\n */\n\nvar assert = require('assert');\nvar debug = require('debug')('stream-parser');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Parser;\n\n/**\n * Parser states.\n */\n\nvar INIT = -1;\nvar BUFFERING = 0;\nvar SKIPPING = 1;\nvar PASSTHROUGH = 2;\n\n/**\n * The `Parser` stream mixin works with either `Writable` or `Transform` stream\n * instances/subclasses. Provides a convenient generic \"parsing\" API:\n *\n *   _bytes(n, cb) - buffers \"n\" bytes and then calls \"cb\" with the \"chunk\"\n *   _skipBytes(n, cb) - skips \"n\" bytes and then calls \"cb\" when done\n *\n * If you extend a `Transform` stream, then the `_passthrough()` function is also\n * added:\n *\n *   _passthrough(n, cb) - passes through \"n\" bytes untouched and then calls \"cb\"\n *\n * @param {Stream} stream Transform or Writable stream instance to extend\n * @api public\n */\n\nfunction Parser(stream) {\n  var isTransform = stream && 'function' == typeof stream._transform;\n  var isWritable = stream && 'function' == typeof stream._write;\n  if (!isTransform && !isWritable) throw new Error('must pass a Writable or Transform stream in');\n  debug('extending Parser into stream');\n\n  // Transform streams and Writable streams get `_bytes()` and `_skipBytes()`\n  stream._bytes = _bytes;\n  stream._skipBytes = _skipBytes;\n\n  // only Transform streams get the `_passthrough()` function\n  if (isTransform) stream._passthrough = _passthrough;\n\n  // take control of the streams2 callback functions for this stream\n  if (isTransform) {\n    stream._transform = transform;\n  } else {\n    stream._write = write;\n  }\n}\nfunction init(stream) {\n  debug('initializing parser stream');\n\n  // number of bytes left to parser for the next \"chunk\"\n  stream._parserBytesLeft = 0;\n\n  // array of Buffer instances that make up the next \"chunk\"\n  stream._parserBuffers = [];\n\n  // number of bytes parsed so far for the next \"chunk\"\n  stream._parserBuffered = 0;\n\n  // flag that keeps track of if what the parser should do with bytes received\n  stream._parserState = INIT;\n\n  // the callback for the next \"chunk\"\n  stream._parserCallback = null;\n\n  // XXX: backwards compat with the old Transform API... remove at some point..\n  if ('function' == typeof stream.push) {\n    stream._parserOutput = stream.push.bind(stream);\n  }\n  stream._parserInit = true;\n}\n\n/**\n * Buffers `n` bytes and then invokes `fn` once that amount has been collected.\n *\n * @param {Number} n the number of bytes to buffer\n * @param {Function} fn callback function to invoke when `n` bytes are buffered\n * @api public\n */\n\nfunction _bytes(n, fn) {\n  assert(!this._parserCallback, 'there is already a \"callback\" set!');\n  assert(isFinite(n) && n > 0, 'can only buffer a finite number of bytes > 0, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('buffering %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = BUFFERING;\n}\n\n/**\n * Skips over the next `n` bytes, then invokes `fn` once that amount has\n * been discarded.\n *\n * @param {Number} n the number of bytes to discard\n * @param {Function} fn callback function to invoke when `n` bytes have been skipped\n * @api public\n */\n\nfunction _skipBytes(n, fn) {\n  assert(!this._parserCallback, 'there is already a \"callback\" set!');\n  assert(n > 0, 'can only skip > 0 bytes, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('skipping %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = SKIPPING;\n}\n\n/**\n * Passes through `n` bytes to the readable side of this stream untouched,\n * then invokes `fn` once that amount has been passed through.\n *\n * @param {Number} n the number of bytes to pass through\n * @param {Function} fn callback function to invoke when `n` bytes have passed through\n * @api public\n */\n\nfunction _passthrough(n, fn) {\n  assert(!this._parserCallback, 'There is already a \"callback\" set!');\n  assert(n > 0, 'can only pass through > 0 bytes, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('passing through %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = PASSTHROUGH;\n}\n\n/**\n * The `_write()` callback function implementation.\n *\n * @api private\n */\n\nfunction write(chunk, encoding, fn) {\n  if (!this._parserInit) init(this);\n  debug('write(%o bytes)', chunk.length);\n\n  // XXX: old Writable stream API compat... remove at some point...\n  if ('function' == typeof encoding) fn = encoding;\n  data(this, chunk, null, fn);\n}\n\n/**\n * The `_transform()` callback function implementation.\n *\n * @api private\n */\n\nfunction transform(chunk, output, fn) {\n  if (!this._parserInit) init(this);\n  debug('transform(%o bytes)', chunk.length);\n\n  // XXX: old Transform stream API compat... remove at some point...\n  if ('function' != typeof output) {\n    output = this._parserOutput;\n  }\n  data(this, chunk, output, fn);\n}\n\n/**\n * The internal buffering/passthrough logic...\n *\n * This `_data` function get's \"trampolined\" to prevent stack overflows for tight\n * loops. This technique requires us to return a \"thunk\" function for any\n * synchronous action. Async stuff breaks the trampoline, but that's ok since it's\n * working with a new stack at that point anyway.\n *\n * @api private\n */\n\nfunction _data(stream, chunk, output, fn) {\n  if (stream._parserBytesLeft <= 0) {\n    return fn(new Error('got data but not currently parsing anything'));\n  }\n  if (chunk.length <= stream._parserBytesLeft) {\n    // small buffer fits within the \"_parserBytesLeft\" window\n    return function () {\n      return process(stream, chunk, output, fn);\n    };\n  } else {\n    // large buffer needs to be sliced on \"_parserBytesLeft\" and processed\n    return function () {\n      var b = chunk.slice(0, stream._parserBytesLeft);\n      return process(stream, b, output, function (err) {\n        if (err) return fn(err);\n        if (chunk.length > b.length) {\n          return function () {\n            return _data(stream, chunk.slice(b.length), output, fn);\n          };\n        }\n      });\n    };\n  }\n}\n\n/**\n * The internal `process` function gets called by the `data` function when\n * something \"interesting\" happens. This function takes care of buffering the\n * bytes when buffering, passing through the bytes when doing that, and invoking\n * the user callback when the number of bytes has been reached.\n *\n * @api private\n */\n\nfunction process(stream, chunk, output, fn) {\n  stream._parserBytesLeft -= chunk.length;\n  debug('%o bytes left for stream piece', stream._parserBytesLeft);\n  if (stream._parserState === BUFFERING) {\n    // buffer\n    stream._parserBuffers.push(chunk);\n    stream._parserBuffered += chunk.length;\n  } else if (stream._parserState === PASSTHROUGH) {\n    // passthrough\n    output(chunk);\n  }\n  // don't need to do anything for the SKIPPING case\n\n  if (0 === stream._parserBytesLeft) {\n    // done with stream \"piece\", invoke the callback\n    var cb = stream._parserCallback;\n    if (cb && stream._parserState === BUFFERING && stream._parserBuffers.length > 1) {\n      chunk = Buffer.concat(stream._parserBuffers, stream._parserBuffered);\n    }\n    if (stream._parserState !== BUFFERING) {\n      chunk = null;\n    }\n    stream._parserCallback = null;\n    stream._parserBuffered = 0;\n    stream._parserState = INIT;\n    stream._parserBuffers.splice(0); // empty\n\n    if (cb) {\n      var args = [];\n      if (chunk) {\n        // buffered\n        args.push(chunk);\n      } else {\n        // passthrough\n      }\n      if (output) {\n        // on a Transform stream, has \"output\" function\n        args.push(output);\n      }\n      var async = cb.length > args.length;\n      if (async) {\n        args.push(trampoline(fn));\n      }\n      // invoke cb\n      var rtn = cb.apply(stream, args);\n      if (!async || fn === rtn) return fn;\n    }\n  } else {\n    // need more bytes\n    return fn;\n  }\n}\nvar data = trampoline(_data);\n\n/**\n * Generic thunk-based \"trampoline\" helper function.\n *\n * @param {Function} input function\n * @return {Function} \"trampolined\" function\n * @api private\n */\n\nfunction trampoline(fn) {\n  return function () {\n    var result = fn.apply(this, arguments);\n    while ('function' == typeof result) {\n      result = result();\n    }\n    return result;\n  };\n}","map":{"version":3,"names":["assert","require","debug","module","exports","Parser","INIT","BUFFERING","SKIPPING","PASSTHROUGH","stream","isTransform","_transform","isWritable","_write","Error","_bytes","_skipBytes","_passthrough","transform","write","init","_parserBytesLeft","_parserBuffers","_parserBuffered","_parserState","_parserCallback","push","_parserOutput","bind","_parserInit","n","fn","isFinite","chunk","encoding","length","data","output","_data","process","b","slice","err","cb","Buffer","concat","splice","args","async","trampoline","rtn","apply","result","arguments"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/stream-parser/index.js"],"sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar assert = require('assert');\nvar debug = require('debug')('stream-parser');\n\n/**\n * Module exports.\n */\n\nmodule.exports = Parser;\n\n/**\n * Parser states.\n */\n\nvar INIT        = -1;\nvar BUFFERING   = 0;\nvar SKIPPING    = 1;\nvar PASSTHROUGH = 2;\n\n/**\n * The `Parser` stream mixin works with either `Writable` or `Transform` stream\n * instances/subclasses. Provides a convenient generic \"parsing\" API:\n *\n *   _bytes(n, cb) - buffers \"n\" bytes and then calls \"cb\" with the \"chunk\"\n *   _skipBytes(n, cb) - skips \"n\" bytes and then calls \"cb\" when done\n *\n * If you extend a `Transform` stream, then the `_passthrough()` function is also\n * added:\n *\n *   _passthrough(n, cb) - passes through \"n\" bytes untouched and then calls \"cb\"\n *\n * @param {Stream} stream Transform or Writable stream instance to extend\n * @api public\n */\n\nfunction Parser (stream) {\n  var isTransform = stream && 'function' == typeof stream._transform;\n  var isWritable = stream && 'function' == typeof stream._write;\n\n  if (!isTransform && !isWritable) throw new Error('must pass a Writable or Transform stream in');\n  debug('extending Parser into stream');\n\n  // Transform streams and Writable streams get `_bytes()` and `_skipBytes()`\n  stream._bytes = _bytes;\n  stream._skipBytes = _skipBytes;\n\n  // only Transform streams get the `_passthrough()` function\n  if (isTransform) stream._passthrough = _passthrough;\n\n  // take control of the streams2 callback functions for this stream\n  if (isTransform) {\n    stream._transform = transform;\n  } else {\n    stream._write = write;\n  }\n}\n\nfunction init (stream) {\n  debug('initializing parser stream');\n\n  // number of bytes left to parser for the next \"chunk\"\n  stream._parserBytesLeft = 0;\n\n  // array of Buffer instances that make up the next \"chunk\"\n  stream._parserBuffers = [];\n\n  // number of bytes parsed so far for the next \"chunk\"\n  stream._parserBuffered = 0;\n\n  // flag that keeps track of if what the parser should do with bytes received\n  stream._parserState = INIT;\n\n  // the callback for the next \"chunk\"\n  stream._parserCallback = null;\n\n  // XXX: backwards compat with the old Transform API... remove at some point..\n  if ('function' == typeof stream.push) {\n    stream._parserOutput = stream.push.bind(stream);\n  }\n\n  stream._parserInit = true;\n}\n\n/**\n * Buffers `n` bytes and then invokes `fn` once that amount has been collected.\n *\n * @param {Number} n the number of bytes to buffer\n * @param {Function} fn callback function to invoke when `n` bytes are buffered\n * @api public\n */\n\nfunction _bytes (n, fn) {\n  assert(!this._parserCallback, 'there is already a \"callback\" set!');\n  assert(isFinite(n) && n > 0, 'can only buffer a finite number of bytes > 0, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('buffering %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = BUFFERING;\n}\n\n/**\n * Skips over the next `n` bytes, then invokes `fn` once that amount has\n * been discarded.\n *\n * @param {Number} n the number of bytes to discard\n * @param {Function} fn callback function to invoke when `n` bytes have been skipped\n * @api public\n */\n\nfunction _skipBytes (n, fn) {\n  assert(!this._parserCallback, 'there is already a \"callback\" set!');\n  assert(n > 0, 'can only skip > 0 bytes, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('skipping %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = SKIPPING;\n}\n\n/**\n * Passes through `n` bytes to the readable side of this stream untouched,\n * then invokes `fn` once that amount has been passed through.\n *\n * @param {Number} n the number of bytes to pass through\n * @param {Function} fn callback function to invoke when `n` bytes have passed through\n * @api public\n */\n\nfunction _passthrough (n, fn) {\n  assert(!this._parserCallback, 'There is already a \"callback\" set!');\n  assert(n > 0, 'can only pass through > 0 bytes, got \"' + n + '\"');\n  if (!this._parserInit) init(this);\n  debug('passing through %o bytes', n);\n  this._parserBytesLeft = n;\n  this._parserCallback = fn;\n  this._parserState = PASSTHROUGH;\n}\n\n/**\n * The `_write()` callback function implementation.\n *\n * @api private\n */\n\nfunction write (chunk, encoding, fn) {\n  if (!this._parserInit) init(this);\n  debug('write(%o bytes)', chunk.length);\n\n  // XXX: old Writable stream API compat... remove at some point...\n  if ('function' == typeof encoding) fn = encoding;\n\n  data(this, chunk, null, fn);\n}\n\n/**\n * The `_transform()` callback function implementation.\n *\n * @api private\n */\n\n\nfunction transform (chunk, output, fn) {\n  if (!this._parserInit) init(this);\n  debug('transform(%o bytes)', chunk.length);\n\n  // XXX: old Transform stream API compat... remove at some point...\n  if ('function' != typeof output) {\n    output = this._parserOutput;\n  }\n\n  data(this, chunk, output, fn);\n}\n\n/**\n * The internal buffering/passthrough logic...\n *\n * This `_data` function get's \"trampolined\" to prevent stack overflows for tight\n * loops. This technique requires us to return a \"thunk\" function for any\n * synchronous action. Async stuff breaks the trampoline, but that's ok since it's\n * working with a new stack at that point anyway.\n *\n * @api private\n */\n\nfunction _data (stream, chunk, output, fn) {\n  if (stream._parserBytesLeft <= 0) {\n    return fn(new Error('got data but not currently parsing anything'));\n  }\n\n  if (chunk.length <= stream._parserBytesLeft) {\n    // small buffer fits within the \"_parserBytesLeft\" window\n    return function () {\n      return process(stream, chunk, output, fn);\n    };\n  } else {\n    // large buffer needs to be sliced on \"_parserBytesLeft\" and processed\n    return function () {\n      var b = chunk.slice(0, stream._parserBytesLeft);\n      return process(stream, b, output, function (err) {\n        if (err) return fn(err);\n        if (chunk.length > b.length) {\n          return function () {\n            return _data(stream, chunk.slice(b.length), output, fn);\n          };\n        }\n      });\n    };\n  }\n}\n\n/**\n * The internal `process` function gets called by the `data` function when\n * something \"interesting\" happens. This function takes care of buffering the\n * bytes when buffering, passing through the bytes when doing that, and invoking\n * the user callback when the number of bytes has been reached.\n *\n * @api private\n */\n\nfunction process (stream, chunk, output, fn) {\n  stream._parserBytesLeft -= chunk.length;\n  debug('%o bytes left for stream piece', stream._parserBytesLeft);\n\n  if (stream._parserState === BUFFERING) {\n    // buffer\n    stream._parserBuffers.push(chunk);\n    stream._parserBuffered += chunk.length;\n  } else if (stream._parserState === PASSTHROUGH) {\n    // passthrough\n    output(chunk);\n  }\n  // don't need to do anything for the SKIPPING case\n\n  if (0 === stream._parserBytesLeft) {\n    // done with stream \"piece\", invoke the callback\n    var cb = stream._parserCallback;\n    if (cb && stream._parserState === BUFFERING && stream._parserBuffers.length > 1) {\n      chunk = Buffer.concat(stream._parserBuffers, stream._parserBuffered);\n    }\n    if (stream._parserState !== BUFFERING) {\n      chunk = null;\n    }\n    stream._parserCallback = null;\n    stream._parserBuffered = 0;\n    stream._parserState = INIT;\n    stream._parserBuffers.splice(0); // empty\n\n    if (cb) {\n      var args = [];\n      if (chunk) {\n        // buffered\n        args.push(chunk);\n      } else {\n        // passthrough\n      }\n      if (output) {\n        // on a Transform stream, has \"output\" function\n        args.push(output);\n      }\n      var async = cb.length > args.length;\n      if (async) {\n        args.push(trampoline(fn));\n      }\n      // invoke cb\n      var rtn = cb.apply(stream, args);\n      if (!async || fn === rtn) return fn;\n    }\n  } else {\n    // need more bytes\n    return fn;\n  }\n}\n\nvar data = trampoline(_data);\n\n/**\n * Generic thunk-based \"trampoline\" helper function.\n *\n * @param {Function} input function\n * @return {Function} \"trampolined\" function\n * @api private\n */\n\nfunction trampoline (fn) {\n  return function () {\n    var result = fn.apply(this, arguments);\n\n    while ('function' == typeof result) {\n      result = result();\n    }\n\n    return result;\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}