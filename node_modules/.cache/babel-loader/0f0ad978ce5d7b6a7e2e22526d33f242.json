{"ast":null,"code":"'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar Lib = require('../../lib');\nvar BADNUM = require('../../constants/numerical').BADNUM;\nmodule.exports = function clean2dArray(zOld, trace, xa, ya) {\n  var rowlen, collen, getCollen, old2new, i, j;\n  function cleanZvalue(v) {\n    if (!isNumeric(v)) return undefined;\n    return +v;\n  }\n  if (trace && trace.transpose) {\n    rowlen = 0;\n    for (i = 0; i < zOld.length; i++) rowlen = Math.max(rowlen, zOld[i].length);\n    if (rowlen === 0) return false;\n    getCollen = function (zOld) {\n      return zOld.length;\n    };\n    old2new = function (zOld, i, j) {\n      return (zOld[j] || [])[i];\n    };\n  } else {\n    rowlen = zOld.length;\n    getCollen = function (zOld, i) {\n      return zOld[i].length;\n    };\n    old2new = function (zOld, i, j) {\n      return (zOld[i] || [])[j];\n    };\n  }\n  var padOld2new = function (zOld, i, j) {\n    if (i === BADNUM || j === BADNUM) return BADNUM;\n    return old2new(zOld, i, j);\n  };\n  function axisMapping(ax) {\n    if (trace && trace.type !== 'carpet' && trace.type !== 'contourcarpet' && ax && ax.type === 'category' && trace['_' + ax._id.charAt(0)].length) {\n      var axLetter = ax._id.charAt(0);\n      var axMapping = {};\n      var traceCategories = trace['_' + axLetter + 'CategoryMap'] || trace[axLetter];\n      for (i = 0; i < traceCategories.length; i++) {\n        axMapping[traceCategories[i]] = i;\n      }\n      return function (i) {\n        var ind = axMapping[ax._categories[i]];\n        return ind + 1 ? ind : BADNUM;\n      };\n    } else {\n      return Lib.identity;\n    }\n  }\n  var xMap = axisMapping(xa);\n  var yMap = axisMapping(ya);\n  if (ya && ya.type === 'category') rowlen = ya._categories.length;\n  var zNew = new Array(rowlen);\n  for (i = 0; i < rowlen; i++) {\n    if (xa && xa.type === 'category') {\n      collen = xa._categories.length;\n    } else {\n      collen = getCollen(zOld, i);\n    }\n    zNew[i] = new Array(collen);\n    for (j = 0; j < collen; j++) zNew[i][j] = cleanZvalue(padOld2new(zOld, yMap(i), xMap(j)));\n  }\n  return zNew;\n};","map":{"version":3,"names":["isNumeric","require","Lib","BADNUM","module","exports","clean2dArray","zOld","trace","xa","ya","rowlen","collen","getCollen","old2new","i","j","cleanZvalue","v","undefined","transpose","length","Math","max","padOld2new","axisMapping","ax","type","_id","charAt","axLetter","axMapping","traceCategories","ind","_categories","identity","xMap","yMap","zNew","Array"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/heatmap/clean_2d_array.js"],"sourcesContent":["'use strict';\n\nvar isNumeric = require('fast-isnumeric');\nvar Lib = require('../../lib');\nvar BADNUM = require('../../constants/numerical').BADNUM;\n\nmodule.exports = function clean2dArray(zOld, trace, xa, ya) {\n    var rowlen, collen, getCollen, old2new, i, j;\n\n    function cleanZvalue(v) {\n        if(!isNumeric(v)) return undefined;\n        return +v;\n    }\n\n    if(trace && trace.transpose) {\n        rowlen = 0;\n        for(i = 0; i < zOld.length; i++) rowlen = Math.max(rowlen, zOld[i].length);\n        if(rowlen === 0) return false;\n        getCollen = function(zOld) { return zOld.length; };\n        old2new = function(zOld, i, j) { return (zOld[j] || [])[i]; };\n    } else {\n        rowlen = zOld.length;\n        getCollen = function(zOld, i) { return zOld[i].length; };\n        old2new = function(zOld, i, j) { return (zOld[i] || [])[j]; };\n    }\n\n    var padOld2new = function(zOld, i, j) {\n        if(i === BADNUM || j === BADNUM) return BADNUM;\n        return old2new(zOld, i, j);\n    };\n\n    function axisMapping(ax) {\n        if(trace && trace.type !== 'carpet' && trace.type !== 'contourcarpet' &&\n            ax && ax.type === 'category' && trace['_' + ax._id.charAt(0)].length) {\n            var axLetter = ax._id.charAt(0);\n            var axMapping = {};\n            var traceCategories = trace['_' + axLetter + 'CategoryMap'] || trace[axLetter];\n            for(i = 0; i < traceCategories.length; i++) {\n                axMapping[traceCategories[i]] = i;\n            }\n            return function(i) {\n                var ind = axMapping[ax._categories[i]];\n                return ind + 1 ? ind : BADNUM;\n            };\n        } else {\n            return Lib.identity;\n        }\n    }\n\n    var xMap = axisMapping(xa);\n    var yMap = axisMapping(ya);\n\n    if(ya && ya.type === 'category') rowlen = ya._categories.length;\n    var zNew = new Array(rowlen);\n\n    for(i = 0; i < rowlen; i++) {\n        if(xa && xa.type === 'category') {\n            collen = xa._categories.length;\n        } else {\n            collen = getCollen(zOld, i);\n        }\n        zNew[i] = new Array(collen);\n        for(j = 0; j < collen; j++) zNew[i][j] = cleanZvalue(padOld2new(zOld, yMap(i), xMap(j)));\n    }\n\n    return zNew;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}