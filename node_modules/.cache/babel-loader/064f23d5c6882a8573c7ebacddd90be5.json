{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  attributes: require('./attributes'),\n  supplyDefaults: require('./defaults'),\n  plot: require('./plot'),\n  calc: require('./calc'),\n  animatable: true,\n  isContainer: true,\n  // so carpet traces get `calc` before other traces\n\n  moduleType: 'trace',\n  name: 'carpet',\n  basePlotModule: require('../../plots/cartesian'),\n  categories: ['cartesian', 'svg', 'carpet', 'carpetAxis', 'notLegendIsolatable', 'noMultiCategory', 'noHover', 'noSortingByValue'],\n  meta: {\n    description: ['The data describing carpet axis layout is set in `y` and (optionally)', 'also `x`. If only `y` is present, `x` the plot is interpreted as a', 'cheater plot and is filled in using the `y` values.', '`x` and `y` may either be 2D arrays matching with each dimension matching', 'that of `a` and `b`, or they may be 1D arrays with total length equal to', 'that of `a` and `b`.'].join(' ')\n  }\n};","map":{"version":3,"names":["module","exports","attributes","require","supplyDefaults","plot","calc","animatable","isContainer","moduleType","name","basePlotModule","categories","meta","description","join"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/carpet/index.js"],"sourcesContent":["'use strict';\n\nmodule.exports = {\n    attributes: require('./attributes'),\n    supplyDefaults: require('./defaults'),\n    plot: require('./plot'),\n    calc: require('./calc'),\n    animatable: true,\n    isContainer: true, // so carpet traces get `calc` before other traces\n\n    moduleType: 'trace',\n    name: 'carpet',\n    basePlotModule: require('../../plots/cartesian'),\n    categories: ['cartesian', 'svg', 'carpet', 'carpetAxis', 'notLegendIsolatable', 'noMultiCategory', 'noHover', 'noSortingByValue'],\n    meta: {\n        description: [\n            'The data describing carpet axis layout is set in `y` and (optionally)',\n            'also `x`. If only `y` is present, `x` the plot is interpreted as a',\n            'cheater plot and is filled in using the `y` values.',\n\n            '`x` and `y` may either be 2D arrays matching with each dimension matching',\n            'that of `a` and `b`, or they may be 1D arrays with total length equal to',\n            'that of `a` and `b`.'\n        ].join(' ')\n    }\n};\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAG;EACbC,UAAU,EAAEC,OAAO,CAAC,cAAc,CAAC;EACnCC,cAAc,EAAED,OAAO,CAAC,YAAY,CAAC;EACrCE,IAAI,EAAEF,OAAO,CAAC,QAAQ,CAAC;EACvBG,IAAI,EAAEH,OAAO,CAAC,QAAQ,CAAC;EACvBI,UAAU,EAAE,IAAI;EAChBC,WAAW,EAAE,IAAI;EAAE;;EAEnBC,UAAU,EAAE,OAAO;EACnBC,IAAI,EAAE,QAAQ;EACdC,cAAc,EAAER,OAAO,CAAC,uBAAuB,CAAC;EAChDS,UAAU,EAAE,CAAC,WAAW,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE,qBAAqB,EAAE,iBAAiB,EAAE,SAAS,EAAE,kBAAkB,CAAC;EACjIC,IAAI,EAAE;IACFC,WAAW,EAAE,CACT,uEAAuE,EACvE,oEAAoE,EACpE,qDAAqD,EAErD,2EAA2E,EAC3E,0EAA0E,EAC1E,sBAAsB,CACzB,CAACC,IAAI,CAAC,GAAG;EACd;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}