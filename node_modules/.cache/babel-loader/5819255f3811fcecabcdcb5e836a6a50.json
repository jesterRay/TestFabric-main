{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\n\n// make sure scene exists on subplot, return it\nmodule.exports = function sceneUpdate(gd, subplot) {\n  var scene = subplot._scene;\n  var resetOpts = {\n    // number of traces in subplot, since scene:subplot -> 1:1\n    count: 0,\n    // whether scene requires init hook in plot call (dirty plot call)\n    dirty: true,\n    // last used options\n    lineOptions: [],\n    fillOptions: [],\n    markerOptions: [],\n    markerSelectedOptions: [],\n    markerUnselectedOptions: [],\n    errorXOptions: [],\n    errorYOptions: [],\n    textOptions: [],\n    textSelectedOptions: [],\n    textUnselectedOptions: [],\n    // selection batches\n    selectBatch: [],\n    unselectBatch: []\n  };\n\n  // regl- component stubs, initialized in dirty plot call\n  var initOpts = {\n    fill2d: false,\n    scatter2d: false,\n    error2d: false,\n    line2d: false,\n    glText: false,\n    select2d: false\n  };\n  if (!subplot._scene) {\n    scene = subplot._scene = {};\n    scene.init = function init() {\n      Lib.extendFlat(scene, initOpts, resetOpts);\n    };\n    scene.init();\n\n    // apply new option to all regl components (used on drag)\n    scene.update = function update(opt) {\n      var opts = Lib.repeat(opt, scene.count);\n      if (scene.fill2d) scene.fill2d.update(opts);\n      if (scene.scatter2d) scene.scatter2d.update(opts);\n      if (scene.line2d) scene.line2d.update(opts);\n      if (scene.error2d) scene.error2d.update(opts.concat(opts));\n      if (scene.select2d) scene.select2d.update(opts);\n      if (scene.glText) {\n        for (var i = 0; i < scene.count; i++) {\n          scene.glText[i].update(opt);\n        }\n      }\n    };\n\n    // draw traces in proper order\n    scene.draw = function draw() {\n      var count = scene.count;\n      var fill2d = scene.fill2d;\n      var error2d = scene.error2d;\n      var line2d = scene.line2d;\n      var scatter2d = scene.scatter2d;\n      var glText = scene.glText;\n      var select2d = scene.select2d;\n      var selectBatch = scene.selectBatch;\n      var unselectBatch = scene.unselectBatch;\n      for (var i = 0; i < count; i++) {\n        if (fill2d && scene.fillOrder[i]) {\n          fill2d.draw(scene.fillOrder[i]);\n        }\n        if (line2d && scene.lineOptions[i]) {\n          line2d.draw(i);\n        }\n        if (error2d) {\n          if (scene.errorXOptions[i]) error2d.draw(i);\n          if (scene.errorYOptions[i]) error2d.draw(i + count);\n        }\n        if (scatter2d && scene.markerOptions[i]) {\n          if (unselectBatch[i].length) {\n            var arg = Lib.repeat([], scene.count);\n            arg[i] = unselectBatch[i];\n            scatter2d.draw(arg);\n          } else if (!selectBatch[i].length) {\n            scatter2d.draw(i);\n          }\n        }\n        if (glText[i] && scene.textOptions[i]) {\n          glText[i].render();\n        }\n      }\n      if (select2d) {\n        select2d.draw(selectBatch);\n      }\n      scene.dirty = false;\n    };\n\n    // remove scene resources\n    scene.destroy = function destroy() {\n      if (scene.fill2d && scene.fill2d.destroy) scene.fill2d.destroy();\n      if (scene.scatter2d && scene.scatter2d.destroy) scene.scatter2d.destroy();\n      if (scene.error2d && scene.error2d.destroy) scene.error2d.destroy();\n      if (scene.line2d && scene.line2d.destroy) scene.line2d.destroy();\n      if (scene.select2d && scene.select2d.destroy) scene.select2d.destroy();\n      if (scene.glText) {\n        scene.glText.forEach(function (text) {\n          if (text.destroy) text.destroy();\n        });\n      }\n      scene.lineOptions = null;\n      scene.fillOptions = null;\n      scene.markerOptions = null;\n      scene.markerSelectedOptions = null;\n      scene.markerUnselectedOptions = null;\n      scene.errorXOptions = null;\n      scene.errorYOptions = null;\n      scene.textOptions = null;\n      scene.textSelectedOptions = null;\n      scene.textUnselectedOptions = null;\n      scene.selectBatch = null;\n      scene.unselectBatch = null;\n\n      // we can't just delete _scene, because `destroy` is called in the\n      // middle of supplyDefaults, before relinkPrivateKeys which will put it back.\n      subplot._scene = null;\n    };\n  }\n\n  // in case if we have scene from the last calc - reset data\n  if (!scene.dirty) {\n    Lib.extendFlat(scene, resetOpts);\n  }\n  return scene;\n};","map":{"version":3,"names":["Lib","require","module","exports","sceneUpdate","gd","subplot","scene","_scene","resetOpts","count","dirty","lineOptions","fillOptions","markerOptions","markerSelectedOptions","markerUnselectedOptions","errorXOptions","errorYOptions","textOptions","textSelectedOptions","textUnselectedOptions","selectBatch","unselectBatch","initOpts","fill2d","scatter2d","error2d","line2d","glText","select2d","init","extendFlat","update","opt","opts","repeat","concat","i","draw","fillOrder","length","arg","render","destroy","forEach","text"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/scattergl/scene_update.js"],"sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\n\n// make sure scene exists on subplot, return it\nmodule.exports = function sceneUpdate(gd, subplot) {\n    var scene = subplot._scene;\n\n    var resetOpts = {\n        // number of traces in subplot, since scene:subplot -> 1:1\n        count: 0,\n        // whether scene requires init hook in plot call (dirty plot call)\n        dirty: true,\n        // last used options\n        lineOptions: [],\n        fillOptions: [],\n        markerOptions: [],\n        markerSelectedOptions: [],\n        markerUnselectedOptions: [],\n        errorXOptions: [],\n        errorYOptions: [],\n        textOptions: [],\n        textSelectedOptions: [],\n        textUnselectedOptions: [],\n        // selection batches\n        selectBatch: [],\n        unselectBatch: []\n    };\n\n    // regl- component stubs, initialized in dirty plot call\n    var initOpts = {\n        fill2d: false,\n        scatter2d: false,\n        error2d: false,\n        line2d: false,\n        glText: false,\n        select2d: false\n    };\n\n    if(!subplot._scene) {\n        scene = subplot._scene = {};\n\n        scene.init = function init() {\n            Lib.extendFlat(scene, initOpts, resetOpts);\n        };\n\n        scene.init();\n\n        // apply new option to all regl components (used on drag)\n        scene.update = function update(opt) {\n            var opts = Lib.repeat(opt, scene.count);\n\n            if(scene.fill2d) scene.fill2d.update(opts);\n            if(scene.scatter2d) scene.scatter2d.update(opts);\n            if(scene.line2d) scene.line2d.update(opts);\n            if(scene.error2d) scene.error2d.update(opts.concat(opts));\n            if(scene.select2d) scene.select2d.update(opts);\n            if(scene.glText) {\n                for(var i = 0; i < scene.count; i++) {\n                    scene.glText[i].update(opt);\n                }\n            }\n        };\n\n        // draw traces in proper order\n        scene.draw = function draw() {\n            var count = scene.count;\n            var fill2d = scene.fill2d;\n            var error2d = scene.error2d;\n            var line2d = scene.line2d;\n            var scatter2d = scene.scatter2d;\n            var glText = scene.glText;\n            var select2d = scene.select2d;\n            var selectBatch = scene.selectBatch;\n            var unselectBatch = scene.unselectBatch;\n\n            for(var i = 0; i < count; i++) {\n                if(fill2d && scene.fillOrder[i]) {\n                    fill2d.draw(scene.fillOrder[i]);\n                }\n                if(line2d && scene.lineOptions[i]) {\n                    line2d.draw(i);\n                }\n                if(error2d) {\n                    if(scene.errorXOptions[i]) error2d.draw(i);\n                    if(scene.errorYOptions[i]) error2d.draw(i + count);\n                }\n                if(scatter2d && scene.markerOptions[i]) {\n                    if(unselectBatch[i].length) {\n                        var arg = Lib.repeat([], scene.count);\n                        arg[i] = unselectBatch[i];\n                        scatter2d.draw(arg);\n                    } else if(!selectBatch[i].length) {\n                        scatter2d.draw(i);\n                    }\n                }\n                if(glText[i] && scene.textOptions[i]) {\n                    glText[i].render();\n                }\n            }\n\n            if(select2d) {\n                select2d.draw(selectBatch);\n            }\n\n            scene.dirty = false;\n        };\n\n        // remove scene resources\n        scene.destroy = function destroy() {\n            if(scene.fill2d && scene.fill2d.destroy) scene.fill2d.destroy();\n            if(scene.scatter2d && scene.scatter2d.destroy) scene.scatter2d.destroy();\n            if(scene.error2d && scene.error2d.destroy) scene.error2d.destroy();\n            if(scene.line2d && scene.line2d.destroy) scene.line2d.destroy();\n            if(scene.select2d && scene.select2d.destroy) scene.select2d.destroy();\n            if(scene.glText) {\n                scene.glText.forEach(function(text) {\n                    if(text.destroy) text.destroy();\n                });\n            }\n\n            scene.lineOptions = null;\n            scene.fillOptions = null;\n            scene.markerOptions = null;\n            scene.markerSelectedOptions = null;\n            scene.markerUnselectedOptions = null;\n            scene.errorXOptions = null;\n            scene.errorYOptions = null;\n            scene.textOptions = null;\n            scene.textSelectedOptions = null;\n            scene.textUnselectedOptions = null;\n\n            scene.selectBatch = null;\n            scene.unselectBatch = null;\n\n            // we can't just delete _scene, because `destroy` is called in the\n            // middle of supplyDefaults, before relinkPrivateKeys which will put it back.\n            subplot._scene = null;\n        };\n    }\n\n    // in case if we have scene from the last calc - reset data\n    if(!scene.dirty) {\n        Lib.extendFlat(scene, resetOpts);\n    }\n\n    return scene;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}