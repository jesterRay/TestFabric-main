{"ast":null,"code":"'use strict';\n\nvar parcoords = require('./parcoords');\nvar prepareRegl = require('../../lib/prepare_regl');\nvar isVisible = require('./helpers').isVisible;\nvar reglPrecompiled = {};\nfunction newIndex(visibleIndices, orig, dim) {\n  var origIndex = orig.indexOf(dim);\n  var currentIndex = visibleIndices.indexOf(origIndex);\n  if (currentIndex === -1) {\n    // invisible dimensions initially go to the end\n    currentIndex += orig.length;\n  }\n  return currentIndex;\n}\nfunction sorter(visibleIndices, orig) {\n  return function sorter(d1, d2) {\n    return newIndex(visibleIndices, orig, d1) - newIndex(visibleIndices, orig, d2);\n  };\n}\nvar exports = module.exports = function plot(gd, cdModule) {\n  var fullLayout = gd._fullLayout;\n  var success = prepareRegl(gd, [], reglPrecompiled);\n  if (!success) return;\n  var currentDims = {};\n  var initialDims = {};\n  var fullIndices = {};\n  var inputIndices = {};\n  var size = fullLayout._size;\n  cdModule.forEach(function (d, i) {\n    var trace = d[0].trace;\n    fullIndices[i] = trace.index;\n    var iIn = inputIndices[i] = trace._fullInput.index;\n    currentDims[i] = gd.data[iIn].dimensions;\n    initialDims[i] = gd.data[iIn].dimensions.slice();\n  });\n  var filterChanged = function (i, initialDimIndex, newRanges) {\n    // Have updated `constraintrange` data on `gd.data` and raise `Plotly.restyle` event\n    // without having to incur heavy UI blocking due to an actual `Plotly.restyle` call\n\n    var dim = initialDims[i][initialDimIndex];\n    var newConstraints = newRanges.map(function (r) {\n      return r.slice();\n    });\n\n    // Store constraint range in preGUI\n    // This one doesn't work if it's stored in pieces in _storeDirectGUIEdit\n    // because it's an array of variable dimensionality. So store the whole\n    // thing at once manually.\n    var aStr = 'dimensions[' + initialDimIndex + '].constraintrange';\n    var preGUI = fullLayout._tracePreGUI[gd._fullData[fullIndices[i]]._fullInput.uid];\n    if (preGUI[aStr] === undefined) {\n      var initialVal = dim.constraintrange;\n      preGUI[aStr] = initialVal || null;\n    }\n    var fullDimension = gd._fullData[fullIndices[i]].dimensions[initialDimIndex];\n    if (!newConstraints.length) {\n      delete dim.constraintrange;\n      delete fullDimension.constraintrange;\n      newConstraints = null;\n    } else {\n      if (newConstraints.length === 1) newConstraints = newConstraints[0];\n      dim.constraintrange = newConstraints;\n      fullDimension.constraintrange = newConstraints.slice();\n      // wrap in another array for restyle event data\n      newConstraints = [newConstraints];\n    }\n    var restyleData = {};\n    restyleData[aStr] = newConstraints;\n    gd.emit('plotly_restyle', [restyleData, [inputIndices[i]]]);\n  };\n  var hover = function (eventData) {\n    gd.emit('plotly_hover', eventData);\n  };\n  var unhover = function (eventData) {\n    gd.emit('plotly_unhover', eventData);\n  };\n  var axesMoved = function (i, visibleIndices) {\n    // Have updated order data on `gd.data` and raise `Plotly.restyle` event\n    // without having to incur heavy UI blocking due to an actual `Plotly.restyle` call\n\n    // drag&drop sorting of the visible dimensions\n    var orig = sorter(visibleIndices, initialDims[i].filter(isVisible));\n    currentDims[i].sort(orig);\n\n    // invisible dimensions are not interpreted in the context of drag&drop sorting as an invisible dimension\n    // cannot be dragged; they're interspersed into their original positions by this subsequent merging step\n    initialDims[i].filter(function (d) {\n      return !isVisible(d);\n    }).sort(function (d) {\n      // subsequent splicing to be done left to right, otherwise indices may be incorrect\n      return initialDims[i].indexOf(d);\n    }).forEach(function (d) {\n      currentDims[i].splice(currentDims[i].indexOf(d), 1); // remove from the end\n      currentDims[i].splice(initialDims[i].indexOf(d), 0, d); // insert at original index\n    });\n\n    // TODO: we can't really store this part of the interaction state\n    // directly as below, since it incudes data arrays. If we want to\n    // persist column order we may have to do something special for this\n    // case to just store the order itself.\n    // Registry.call('_storeDirectGUIEdit',\n    //     gd.data[inputIndices[i]],\n    //     fullLayout._tracePreGUI[gd._fullData[fullIndices[i]]._fullInput.uid],\n    //     {dimensions: currentDims[i]}\n    // );\n\n    gd.emit('plotly_restyle', [{\n      dimensions: [currentDims[i]]\n    }, [inputIndices[i]]]);\n  };\n  parcoords(gd, cdModule, {\n    // layout\n    width: size.w,\n    height: size.h,\n    margin: {\n      t: size.t,\n      r: size.r,\n      b: size.b,\n      l: size.l\n    }\n  }, {\n    // callbacks\n    filterChanged: filterChanged,\n    hover: hover,\n    unhover: unhover,\n    axesMoved: axesMoved\n  });\n};\nexports.reglPrecompiled = reglPrecompiled;","map":{"version":3,"names":["parcoords","require","prepareRegl","isVisible","reglPrecompiled","newIndex","visibleIndices","orig","dim","origIndex","indexOf","currentIndex","length","sorter","d1","d2","exports","module","plot","gd","cdModule","fullLayout","_fullLayout","success","currentDims","initialDims","fullIndices","inputIndices","size","_size","forEach","d","i","trace","index","iIn","_fullInput","data","dimensions","slice","filterChanged","initialDimIndex","newRanges","newConstraints","map","r","aStr","preGUI","_tracePreGUI","_fullData","uid","undefined","initialVal","constraintrange","fullDimension","restyleData","emit","hover","eventData","unhover","axesMoved","filter","sort","splice","width","w","height","h","margin","t","b","l"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/parcoords/plot.js"],"sourcesContent":["'use strict';\n\nvar parcoords = require('./parcoords');\nvar prepareRegl = require('../../lib/prepare_regl');\nvar isVisible = require('./helpers').isVisible;\nvar reglPrecompiled = {};\n\nfunction newIndex(visibleIndices, orig, dim) {\n    var origIndex = orig.indexOf(dim);\n    var currentIndex = visibleIndices.indexOf(origIndex);\n    if(currentIndex === -1) {\n        // invisible dimensions initially go to the end\n        currentIndex += orig.length;\n    }\n    return currentIndex;\n}\n\nfunction sorter(visibleIndices, orig) {\n    return function sorter(d1, d2) {\n        return (\n            newIndex(visibleIndices, orig, d1) -\n            newIndex(visibleIndices, orig, d2)\n        );\n    };\n}\n\nvar exports = module.exports = function plot(gd, cdModule) {\n    var fullLayout = gd._fullLayout;\n\n    var success = prepareRegl(gd, [], reglPrecompiled);\n    if(!success) return;\n\n    var currentDims = {};\n    var initialDims = {};\n    var fullIndices = {};\n    var inputIndices = {};\n\n    var size = fullLayout._size;\n\n    cdModule.forEach(function(d, i) {\n        var trace = d[0].trace;\n        fullIndices[i] = trace.index;\n        var iIn = inputIndices[i] = trace._fullInput.index;\n        currentDims[i] = gd.data[iIn].dimensions;\n        initialDims[i] = gd.data[iIn].dimensions.slice();\n    });\n\n    var filterChanged = function(i, initialDimIndex, newRanges) {\n        // Have updated `constraintrange` data on `gd.data` and raise `Plotly.restyle` event\n        // without having to incur heavy UI blocking due to an actual `Plotly.restyle` call\n\n        var dim = initialDims[i][initialDimIndex];\n        var newConstraints = newRanges.map(function(r) { return r.slice(); });\n\n        // Store constraint range in preGUI\n        // This one doesn't work if it's stored in pieces in _storeDirectGUIEdit\n        // because it's an array of variable dimensionality. So store the whole\n        // thing at once manually.\n        var aStr = 'dimensions[' + initialDimIndex + '].constraintrange';\n        var preGUI = fullLayout._tracePreGUI[gd._fullData[fullIndices[i]]._fullInput.uid];\n        if(preGUI[aStr] === undefined) {\n            var initialVal = dim.constraintrange;\n            preGUI[aStr] = initialVal || null;\n        }\n\n        var fullDimension = gd._fullData[fullIndices[i]].dimensions[initialDimIndex];\n\n        if(!newConstraints.length) {\n            delete dim.constraintrange;\n            delete fullDimension.constraintrange;\n            newConstraints = null;\n        } else {\n            if(newConstraints.length === 1) newConstraints = newConstraints[0];\n            dim.constraintrange = newConstraints;\n            fullDimension.constraintrange = newConstraints.slice();\n            // wrap in another array for restyle event data\n            newConstraints = [newConstraints];\n        }\n\n        var restyleData = {};\n        restyleData[aStr] = newConstraints;\n        gd.emit('plotly_restyle', [restyleData, [inputIndices[i]]]);\n    };\n\n    var hover = function(eventData) {\n        gd.emit('plotly_hover', eventData);\n    };\n\n    var unhover = function(eventData) {\n        gd.emit('plotly_unhover', eventData);\n    };\n\n    var axesMoved = function(i, visibleIndices) {\n        // Have updated order data on `gd.data` and raise `Plotly.restyle` event\n        // without having to incur heavy UI blocking due to an actual `Plotly.restyle` call\n\n        // drag&drop sorting of the visible dimensions\n        var orig = sorter(visibleIndices, initialDims[i].filter(isVisible));\n        currentDims[i].sort(orig);\n\n        // invisible dimensions are not interpreted in the context of drag&drop sorting as an invisible dimension\n        // cannot be dragged; they're interspersed into their original positions by this subsequent merging step\n        initialDims[i].filter(function(d) {return !isVisible(d);})\n             .sort(function(d) {\n                 // subsequent splicing to be done left to right, otherwise indices may be incorrect\n                 return initialDims[i].indexOf(d);\n             })\n            .forEach(function(d) {\n                currentDims[i].splice(currentDims[i].indexOf(d), 1); // remove from the end\n                currentDims[i].splice(initialDims[i].indexOf(d), 0, d); // insert at original index\n            });\n\n        // TODO: we can't really store this part of the interaction state\n        // directly as below, since it incudes data arrays. If we want to\n        // persist column order we may have to do something special for this\n        // case to just store the order itself.\n        // Registry.call('_storeDirectGUIEdit',\n        //     gd.data[inputIndices[i]],\n        //     fullLayout._tracePreGUI[gd._fullData[fullIndices[i]]._fullInput.uid],\n        //     {dimensions: currentDims[i]}\n        // );\n\n        gd.emit('plotly_restyle', [{dimensions: [currentDims[i]]}, [inputIndices[i]]]);\n    };\n\n    parcoords(\n        gd,\n        cdModule,\n        { // layout\n            width: size.w,\n            height: size.h,\n            margin: {\n                t: size.t,\n                r: size.r,\n                b: size.b,\n                l: size.l\n            }\n        },\n        { // callbacks\n            filterChanged: filterChanged,\n            hover: hover,\n            unhover: unhover,\n            axesMoved: axesMoved\n        }\n    );\n};\n\nexports.reglPrecompiled = reglPrecompiled;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}