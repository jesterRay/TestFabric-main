{"ast":null,"code":"'use strict';\n\nvar d3Hierarchy = require('d3-hierarchy');\nvar flipTree = require('../treemap/flip_tree');\nmodule.exports = function partition(entry, size, opts) {\n  var flipX = opts.flipX;\n  var flipY = opts.flipY;\n  var swapXY = opts.orientation === 'h';\n  var maxDepth = opts.maxDepth;\n  var newWidth = size[0];\n  var newHeight = size[1];\n  if (maxDepth) {\n    newWidth = (entry.height + 1) * size[0] / Math.min(entry.height + 1, maxDepth);\n    newHeight = (entry.height + 1) * size[1] / Math.min(entry.height + 1, maxDepth);\n  }\n  var result = d3Hierarchy.partition().padding(opts.pad.inner).size(swapXY ? [size[1], newWidth] : [size[0], newHeight])(entry);\n  if (swapXY || flipX || flipY) {\n    flipTree(result, size, {\n      swapXY: swapXY,\n      flipX: flipX,\n      flipY: flipY\n    });\n  }\n  return result;\n};","map":{"version":3,"names":["d3Hierarchy","require","flipTree","module","exports","partition","entry","size","opts","flipX","flipY","swapXY","orientation","maxDepth","newWidth","newHeight","height","Math","min","result","padding","pad","inner"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/icicle/partition.js"],"sourcesContent":["'use strict';\n\nvar d3Hierarchy = require('d3-hierarchy');\nvar flipTree = require('../treemap/flip_tree');\n\nmodule.exports = function partition(entry, size, opts) {\n    var flipX = opts.flipX;\n    var flipY = opts.flipY;\n    var swapXY = opts.orientation === 'h';\n    var maxDepth = opts.maxDepth;\n\n    var newWidth = size[0];\n    var newHeight = size[1];\n    if(maxDepth) {\n        newWidth = (entry.height + 1) * size[0] / Math.min(entry.height + 1, maxDepth);\n        newHeight = (entry.height + 1) * size[1] / Math.min(entry.height + 1, maxDepth);\n    }\n\n    var result = d3Hierarchy\n        .partition()\n        .padding(opts.pad.inner)\n        .size(\n            swapXY ? [size[1], newWidth] : [size[0], newHeight]\n        )(entry);\n\n    if(swapXY || flipX || flipY) {\n        flipTree(result, size, {\n            swapXY: swapXY,\n            flipX: flipX,\n            flipY: flipY\n        });\n    }\n    return result;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,cAAc,CAAC;AACzC,IAAIC,QAAQ,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAE9CE,MAAM,CAACC,OAAO,GAAG,SAASC,SAASA,CAACC,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAE;EACnD,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK;EACtB,IAAIC,KAAK,GAAGF,IAAI,CAACE,KAAK;EACtB,IAAIC,MAAM,GAAGH,IAAI,CAACI,WAAW,KAAK,GAAG;EACrC,IAAIC,QAAQ,GAAGL,IAAI,CAACK,QAAQ;EAE5B,IAAIC,QAAQ,GAAGP,IAAI,CAAC,CAAC,CAAC;EACtB,IAAIQ,SAAS,GAAGR,IAAI,CAAC,CAAC,CAAC;EACvB,IAAGM,QAAQ,EAAE;IACTC,QAAQ,GAAG,CAACR,KAAK,CAACU,MAAM,GAAG,CAAC,IAAIT,IAAI,CAAC,CAAC,CAAC,GAAGU,IAAI,CAACC,GAAG,CAACZ,KAAK,CAACU,MAAM,GAAG,CAAC,EAAEH,QAAQ,CAAC;IAC9EE,SAAS,GAAG,CAACT,KAAK,CAACU,MAAM,GAAG,CAAC,IAAIT,IAAI,CAAC,CAAC,CAAC,GAAGU,IAAI,CAACC,GAAG,CAACZ,KAAK,CAACU,MAAM,GAAG,CAAC,EAAEH,QAAQ,CAAC;EACnF;EAEA,IAAIM,MAAM,GAAGnB,WAAW,CACnBK,SAAS,CAAC,CAAC,CACXe,OAAO,CAACZ,IAAI,CAACa,GAAG,CAACC,KAAK,CAAC,CACvBf,IAAI,CACDI,MAAM,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC,EAAEO,QAAQ,CAAC,GAAG,CAACP,IAAI,CAAC,CAAC,CAAC,EAAEQ,SAAS,CACtD,CAAC,CAACT,KAAK,CAAC;EAEZ,IAAGK,MAAM,IAAIF,KAAK,IAAIC,KAAK,EAAE;IACzBR,QAAQ,CAACiB,MAAM,EAAEZ,IAAI,EAAE;MACnBI,MAAM,EAAEA,MAAM;MACdF,KAAK,EAAEA,KAAK;MACZC,KAAK,EAAEA;IACX,CAAC,CAAC;EACN;EACA,OAAOS,MAAM;AACjB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script"}