{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\nvar autorange = require('./autorange');\nvar id2name = require('./axis_ids').id2name;\nvar layoutAttributes = require('./layout_attributes');\nvar scaleZoom = require('./scale_zoom');\nvar setConvert = require('./set_convert');\nvar ALMOST_EQUAL = require('../../constants/numerical').ALMOST_EQUAL;\nvar FROM_BL = require('../../constants/alignment').FROM_BL;\nexports.handleDefaults = function (layoutIn, layoutOut, opts) {\n  var axIds = opts.axIds;\n  var axHasImage = opts.axHasImage;\n\n  // sets of axes linked by `scaleanchor` OR `matches` along with the\n  // scaleratios compounded together, populated in handleConstraintDefaults\n  var constraintGroups = layoutOut._axisConstraintGroups = [];\n  // similar to _axisConstraintGroups, but only matching axes\n  var matchGroups = layoutOut._axisMatchGroups = [];\n  var i, group, axId, axName, axIn, axOut, attr, val;\n  for (i = 0; i < axIds.length; i++) {\n    axName = id2name(axIds[i]);\n    axIn = layoutIn[axName];\n    axOut = layoutOut[axName];\n    handleOneAxDefaults(axIn, axOut, {\n      axIds: axIds,\n      layoutOut: layoutOut,\n      hasImage: axHasImage[axName]\n    });\n  }\n\n  // save matchGroup on each matching axis\n  function stash(groups, stashAttr) {\n    for (i = 0; i < groups.length; i++) {\n      group = groups[i];\n      for (axId in group) {\n        layoutOut[id2name(axId)][stashAttr] = group;\n      }\n    }\n  }\n  stash(matchGroups, '_matchGroup');\n\n  // If any axis in a constraint group is fixedrange, they all get fixed\n  // This covers matches axes, as they're now in the constraintgroup too\n  // and have not yet been removed (if the group is *only* matching)\n  for (i = 0; i < constraintGroups.length; i++) {\n    group = constraintGroups[i];\n    for (axId in group) {\n      axOut = layoutOut[id2name(axId)];\n      if (axOut.fixedrange) {\n        for (var axId2 in group) {\n          var axName2 = id2name(axId2);\n          if ((layoutIn[axName2] || {}).fixedrange === false) {\n            Lib.warn('fixedrange was specified as false for axis ' + axName2 + ' but was overridden because another ' + 'axis in its constraint group has fixedrange true');\n          }\n          layoutOut[axName2].fixedrange = true;\n        }\n        break;\n      }\n    }\n  }\n\n  // remove constraint groups that simply duplicate match groups\n  i = 0;\n  while (i < constraintGroups.length) {\n    group = constraintGroups[i];\n    for (axId in group) {\n      axOut = layoutOut[id2name(axId)];\n      if (axOut._matchGroup && Object.keys(axOut._matchGroup).length === Object.keys(group).length) {\n        constraintGroups.splice(i, 1);\n        i--;\n      }\n      break;\n    }\n    i++;\n  }\n\n  // save constraintGroup on each constrained axis\n  stash(constraintGroups, '_constraintGroup');\n\n  // make sure `matching` axes share values of necessary attributes\n  // Precedence (base axis is the one that doesn't list a `matches`, ie others\n  // all point to it):\n  // (1) explicitly defined value in the base axis\n  // (2) explicitly defined in another axis (arbitrary order)\n  // (3) default in the base axis\n  var matchAttrs = ['constrain', 'range', 'autorange', 'rangemode', 'rangebreaks', 'categoryorder', 'categoryarray'];\n  var hasRange = false;\n  var hasDayOfWeekBreaks = false;\n  function setAttrVal() {\n    val = axOut[attr];\n    if (attr === 'rangebreaks') {\n      hasDayOfWeekBreaks = axOut._hasDayOfWeekBreaks;\n    }\n  }\n  for (i = 0; i < matchGroups.length; i++) {\n    group = matchGroups[i];\n\n    // find 'matching' range attrs\n    for (var j = 0; j < matchAttrs.length; j++) {\n      attr = matchAttrs[j];\n      val = null;\n      var baseAx;\n      for (axId in group) {\n        axName = id2name(axId);\n        axIn = layoutIn[axName];\n        axOut = layoutOut[axName];\n        if (!(attr in axOut)) {\n          continue;\n        }\n        if (!axOut.matches) {\n          baseAx = axOut;\n          // top priority: explicit value in base axis\n          if (attr in axIn) {\n            setAttrVal();\n            break;\n          }\n        }\n        if (val === null && attr in axIn) {\n          // second priority: first explicit value in another axis\n          setAttrVal();\n        }\n      }\n\n      // special logic for coupling of range and autorange\n      // if nobody explicitly specifies autorange, but someone does\n      // explicitly specify range, autorange must be disabled.\n      if (attr === 'range' && val && axIn.range && axIn.range.length === 2 && axIn.range[0] !== null && axIn.range[1] !== null) {\n        hasRange = true;\n      }\n      if (attr === 'autorange' && val === null && hasRange) {\n        val = false;\n      }\n      if (val === null && attr in baseAx) {\n        // fallback: default value in base axis\n        val = baseAx[attr];\n      }\n      // but we still might not have a value, which is fine.\n      if (val !== null) {\n        for (axId in group) {\n          axOut = layoutOut[id2name(axId)];\n          axOut[attr] = attr === 'range' ? val.slice() : val;\n          if (attr === 'rangebreaks') {\n            axOut._hasDayOfWeekBreaks = hasDayOfWeekBreaks;\n            setConvert(axOut, layoutOut);\n          }\n        }\n      }\n    }\n  }\n};\nfunction handleOneAxDefaults(axIn, axOut, opts) {\n  var axIds = opts.axIds;\n  var layoutOut = opts.layoutOut;\n  var hasImage = opts.hasImage;\n  var constraintGroups = layoutOut._axisConstraintGroups;\n  var matchGroups = layoutOut._axisMatchGroups;\n  var axId = axOut._id;\n  var axLetter = axId.charAt(0);\n  var splomStash = ((layoutOut._splomAxes || {})[axLetter] || {})[axId] || {};\n  var thisID = axOut._id;\n  var isX = thisID.charAt(0) === 'x';\n\n  // Clear _matchGroup & _constraintGroup so relinkPrivateKeys doesn't keep\n  // an old one around. If this axis is in a group we'll set this again later\n  axOut._matchGroup = null;\n  axOut._constraintGroup = null;\n  function coerce(attr, dflt) {\n    return Lib.coerce(axIn, axOut, layoutAttributes, attr, dflt);\n  }\n\n  // coerce the constraint mechanics even if this axis has no scaleanchor\n  // because it may be the anchor of another axis.\n  coerce('constrain', hasImage ? 'domain' : 'range');\n  Lib.coerce(axIn, axOut, {\n    constraintoward: {\n      valType: 'enumerated',\n      values: isX ? ['left', 'center', 'right'] : ['bottom', 'middle', 'top'],\n      dflt: isX ? 'center' : 'middle'\n    }\n  }, 'constraintoward');\n\n  // If this axis is already part of a constraint group, we can't\n  // scaleanchor any other axis in that group, or we'd make a loop.\n  // Filter axIds to enforce this, also matching axis types.\n  var thisType = axOut.type;\n  var i, idi;\n  var linkableAxes = [];\n  for (i = 0; i < axIds.length; i++) {\n    idi = axIds[i];\n    if (idi === thisID) continue;\n    var axi = layoutOut[id2name(idi)];\n    if (axi.type === thisType) {\n      linkableAxes.push(idi);\n    }\n  }\n  var thisGroup = getConstraintGroup(constraintGroups, thisID);\n  if (thisGroup) {\n    var linkableAxesNoLoops = [];\n    for (i = 0; i < linkableAxes.length; i++) {\n      idi = linkableAxes[i];\n      if (!thisGroup[idi]) linkableAxesNoLoops.push(idi);\n    }\n    linkableAxes = linkableAxesNoLoops;\n  }\n  var canLink = linkableAxes.length;\n  var matches, scaleanchor;\n  if (canLink && (axIn.matches || splomStash.matches)) {\n    matches = Lib.coerce(axIn, axOut, {\n      matches: {\n        valType: 'enumerated',\n        values: linkableAxes,\n        dflt: linkableAxes.indexOf(splomStash.matches) !== -1 ? splomStash.matches : undefined\n      }\n    }, 'matches');\n  }\n\n  // 'matches' wins over 'scaleanchor' - each axis can only specify one\n  // constraint, but you can chain matches and scaleanchor constraints by\n  // specifying them in separate axes.\n  var scaleanchorDflt = hasImage && !isX ? axOut.anchor : undefined;\n  if (canLink && !matches && (axIn.scaleanchor || scaleanchorDflt)) {\n    scaleanchor = Lib.coerce(axIn, axOut, {\n      scaleanchor: {\n        valType: 'enumerated',\n        values: linkableAxes.concat([false])\n      }\n    }, 'scaleanchor', scaleanchorDflt);\n  }\n  if (matches) {\n    axOut._matchGroup = updateConstraintGroups(matchGroups, thisID, matches, 1);\n\n    // Also include match constraints in the scale groups\n    var matchedAx = layoutOut[id2name(matches)];\n    var matchRatio = extent(layoutOut, axOut) / extent(layoutOut, matchedAx);\n    if (isX !== (matches.charAt(0) === 'x')) {\n      // We don't yet know the actual scale ratio of x/y matches constraints,\n      // due to possible automargins, so just leave a placeholder for this:\n      // 'x' means \"x size over y size\", 'y' means the inverse.\n      // in principle in the constraint group you could get multiple of these.\n      matchRatio = (isX ? 'x' : 'y') + matchRatio;\n    }\n    updateConstraintGroups(constraintGroups, thisID, matches, matchRatio);\n  } else if (axIn.matches && axIds.indexOf(axIn.matches) !== -1) {\n    Lib.warn('ignored ' + axOut._name + '.matches: \"' + axIn.matches + '\" to avoid an infinite loop');\n  }\n  if (scaleanchor) {\n    var scaleratio = coerce('scaleratio');\n\n    // TODO: I suppose I could do attribute.min: Number.MIN_VALUE to avoid zero,\n    // but that seems hacky. Better way to say \"must be a positive number\"?\n    // Of course if you use several super-tiny values you could eventually\n    // force a product of these to zero and all hell would break loose...\n    // Likewise with super-huge values.\n    if (!scaleratio) scaleratio = axOut.scaleratio = 1;\n    updateConstraintGroups(constraintGroups, thisID, scaleanchor, scaleratio);\n  } else if (axIn.scaleanchor && axIds.indexOf(axIn.scaleanchor) !== -1) {\n    Lib.warn('ignored ' + axOut._name + '.scaleanchor: \"' + axIn.scaleanchor + '\" to avoid either an infinite loop ' + 'and possibly inconsistent scaleratios, or because this axis ' + 'declares a *matches* constraint.');\n  }\n}\nfunction extent(layoutOut, ax) {\n  var domain = ax.domain;\n  if (!domain) {\n    // at this point overlaying axes haven't yet inherited their main domains\n    // TODO: constrain: domain with overlaying axes is likely a bug.\n    domain = layoutOut[id2name(ax.overlaying)].domain;\n  }\n  return domain[1] - domain[0];\n}\nfunction getConstraintGroup(groups, thisID) {\n  for (var i = 0; i < groups.length; i++) {\n    if (groups[i][thisID]) {\n      return groups[i];\n    }\n  }\n  return null;\n}\n\n/*\n * Add this axis to the axis constraint groups, which is the collection\n * of axes that are all constrained together on scale (or matching).\n *\n * constraintGroups: a list of objects. each object is\n * {axis_id: scale_within_group}, where scale_within_group is\n * only important relative to the rest of the group, and defines\n * the relative scales between all axes in the group\n *\n * thisGroup: the group the current axis is already in\n * thisID: the id if the current axis\n * thatID: the id of the axis to scale it with\n * scaleratio: the ratio of this axis to the thatID axis\n */\nfunction updateConstraintGroups(constraintGroups, thisID, thatID, scaleratio) {\n  var i, j, groupi, keyj, thisGroupIndex;\n  var thisGroup = getConstraintGroup(constraintGroups, thisID);\n  if (thisGroup === null) {\n    thisGroup = {};\n    thisGroup[thisID] = 1;\n    thisGroupIndex = constraintGroups.length;\n    constraintGroups.push(thisGroup);\n  } else {\n    thisGroupIndex = constraintGroups.indexOf(thisGroup);\n  }\n  var thisGroupKeys = Object.keys(thisGroup);\n\n  // we know that this axis isn't in any other groups, but we don't know\n  // about the thatID axis. If it is, we need to merge the groups.\n  for (i = 0; i < constraintGroups.length; i++) {\n    groupi = constraintGroups[i];\n    if (i !== thisGroupIndex && groupi[thatID]) {\n      var baseScale = groupi[thatID];\n      for (j = 0; j < thisGroupKeys.length; j++) {\n        keyj = thisGroupKeys[j];\n        groupi[keyj] = multiplyScales(baseScale, multiplyScales(scaleratio, thisGroup[keyj]));\n      }\n      constraintGroups.splice(thisGroupIndex, 1);\n      return;\n    }\n  }\n\n  // otherwise, we insert the new thatID axis as the base scale (1)\n  // in its group, and scale the rest of the group to it\n  if (scaleratio !== 1) {\n    for (j = 0; j < thisGroupKeys.length; j++) {\n      var key = thisGroupKeys[j];\n      thisGroup[key] = multiplyScales(scaleratio, thisGroup[key]);\n    }\n  }\n  thisGroup[thatID] = 1;\n}\n\n// scales may be numbers or 'x1.3', 'yy4.5' etc to multiply by as-yet-unknown\n// ratios between x and y plot sizes n times\nfunction multiplyScales(a, b) {\n  var aPrefix = '';\n  var bPrefix = '';\n  var aLen, bLen;\n  if (typeof a === 'string') {\n    aPrefix = a.match(/^[xy]*/)[0];\n    aLen = aPrefix.length;\n    a = +a.substr(aLen);\n  }\n  if (typeof b === 'string') {\n    bPrefix = b.match(/^[xy]*/)[0];\n    bLen = bPrefix.length;\n    b = +b.substr(bLen);\n  }\n  var c = a * b;\n\n  // just two numbers\n  if (!aLen && !bLen) {\n    return c;\n  }\n\n  // one or more prefixes of the same type\n  if (!aLen || !bLen || aPrefix.charAt(0) === bPrefix.charAt(0)) {\n    return aPrefix + bPrefix + a * b;\n  }\n\n  // x and y cancel each other out exactly - back to a number\n  if (aLen === bLen) {\n    return c;\n  }\n\n  // partial cancelation of prefixes\n  return (aLen > bLen ? aPrefix.substr(bLen) : bPrefix.substr(aLen)) + c;\n}\nfunction finalRatios(group, fullLayout) {\n  var size = fullLayout._size;\n  var yRatio = size.h / size.w;\n  var out = {};\n  var keys = Object.keys(group);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var val = group[key];\n    if (typeof val === 'string') {\n      var prefix = val.match(/^[xy]*/)[0];\n      var pLen = prefix.length;\n      val = +val.substr(pLen);\n      var mult = prefix.charAt(0) === 'y' ? yRatio : 1 / yRatio;\n      for (var j = 0; j < pLen; j++) {\n        val *= mult;\n      }\n    }\n    out[key] = val;\n  }\n  return out;\n}\nexports.enforce = function enforce(gd) {\n  var fullLayout = gd._fullLayout;\n  var constraintGroups = fullLayout._axisConstraintGroups || [];\n  var i, j, group, axisID, ax, normScale, mode, factor;\n\n  // matching constraints are handled in the autorange code when autoranged,\n  // or in the supplyDefaults code when explicitly ranged.\n  // now we just need to handle scaleanchor constraints\n  // matches constraints that chain with scaleanchor constraints are included\n  // here too, but because matches has already been satisfied,\n  // any changes here should preserve that.\n  for (i = 0; i < constraintGroups.length; i++) {\n    group = finalRatios(constraintGroups[i], fullLayout);\n    var axisIDs = Object.keys(group);\n    var minScale = Infinity;\n    var maxScale = 0;\n    // mostly matchScale will be the same as minScale\n    // ie we expand axis ranges to encompass *everything*\n    // that's currently in any of their ranges, but during\n    // autorange of a subset of axes we will ignore other\n    // axes for this purpose.\n    var matchScale = Infinity;\n    var normScales = {};\n    var axes = {};\n    var hasAnyDomainConstraint = false;\n\n    // find the (normalized) scale of each axis in the group\n    for (j = 0; j < axisIDs.length; j++) {\n      axisID = axisIDs[j];\n      axes[axisID] = ax = fullLayout[id2name(axisID)];\n      if (ax._inputDomain) ax.domain = ax._inputDomain.slice();else ax._inputDomain = ax.domain.slice();\n      if (!ax._inputRange) ax._inputRange = ax.range.slice();\n\n      // set axis scale here so we can use _m rather than\n      // having to calculate it from length and range\n      ax.setScale();\n\n      // abs: inverted scales still satisfy the constraint\n      normScales[axisID] = normScale = Math.abs(ax._m) / group[axisID];\n      minScale = Math.min(minScale, normScale);\n      if (ax.constrain === 'domain' || !ax._constraintShrinkable) {\n        matchScale = Math.min(matchScale, normScale);\n      }\n\n      // this has served its purpose, so remove it\n      delete ax._constraintShrinkable;\n      maxScale = Math.max(maxScale, normScale);\n      if (ax.constrain === 'domain') hasAnyDomainConstraint = true;\n    }\n\n    // Do we have a constraint mismatch? Give a small buffer for rounding errors\n    if (minScale > ALMOST_EQUAL * maxScale && !hasAnyDomainConstraint) continue;\n\n    // now increase any ranges we need to until all normalized scales are equal\n    for (j = 0; j < axisIDs.length; j++) {\n      axisID = axisIDs[j];\n      normScale = normScales[axisID];\n      ax = axes[axisID];\n      mode = ax.constrain;\n\n      // even if the scale didn't change, if we're shrinking domain\n      // we need to recalculate in case `constraintoward` changed\n      if (normScale !== matchScale || mode === 'domain') {\n        factor = normScale / matchScale;\n        if (mode === 'range') {\n          scaleZoom(ax, factor);\n        } else {\n          // mode === 'domain'\n\n          var inputDomain = ax._inputDomain;\n          var domainShrunk = (ax.domain[1] - ax.domain[0]) / (inputDomain[1] - inputDomain[0]);\n          var rangeShrunk = (ax.r2l(ax.range[1]) - ax.r2l(ax.range[0])) / (ax.r2l(ax._inputRange[1]) - ax.r2l(ax._inputRange[0]));\n          factor /= domainShrunk;\n          if (factor * rangeShrunk < 1) {\n            // we've asked to magnify the axis more than we can just by\n            // enlarging the domain - so we need to constrict range\n            ax.domain = ax._input.domain = inputDomain.slice();\n            scaleZoom(ax, factor);\n            continue;\n          }\n          if (rangeShrunk < 1) {\n            // the range has previously been constricted by ^^, but we've\n            // switched to the domain-constricted regime, so reset range\n            ax.range = ax._input.range = ax._inputRange.slice();\n            factor *= rangeShrunk;\n          }\n          if (ax.autorange) {\n            /*\n             * range & factor may need to change because range was\n             * calculated for the larger scaling, so some pixel\n             * paddings may get cut off when we reduce the domain.\n             *\n             * This is easier than the regular autorange calculation\n             * because we already know the scaling `m`, but we still\n             * need to cut out impossible constraints (like\n             * annotations with super-long arrows). That's what\n             * outerMin/Max are for - if the expansion was going to\n             * go beyond the original domain, it must be impossible\n             */\n            var rl0 = ax.r2l(ax.range[0]);\n            var rl1 = ax.r2l(ax.range[1]);\n            var rangeCenter = (rl0 + rl1) / 2;\n            var rangeMin = rangeCenter;\n            var rangeMax = rangeCenter;\n            var halfRange = Math.abs(rl1 - rangeCenter);\n            // extra tiny bit for rounding errors, in case we actually\n            // *are* expanding to the full domain\n            var outerMin = rangeCenter - halfRange * factor * 1.0001;\n            var outerMax = rangeCenter + halfRange * factor * 1.0001;\n            var getPadMin = autorange.makePadFn(fullLayout, ax, 0);\n            var getPadMax = autorange.makePadFn(fullLayout, ax, 1);\n            updateDomain(ax, factor);\n            var m = Math.abs(ax._m);\n            var extremes = autorange.concatExtremes(gd, ax);\n            var minArray = extremes.min;\n            var maxArray = extremes.max;\n            var newVal;\n            var k;\n            for (k = 0; k < minArray.length; k++) {\n              newVal = minArray[k].val - getPadMin(minArray[k]) / m;\n              if (newVal > outerMin && newVal < rangeMin) {\n                rangeMin = newVal;\n              }\n            }\n            for (k = 0; k < maxArray.length; k++) {\n              newVal = maxArray[k].val + getPadMax(maxArray[k]) / m;\n              if (newVal < outerMax && newVal > rangeMax) {\n                rangeMax = newVal;\n              }\n            }\n            var domainExpand = (rangeMax - rangeMin) / (2 * halfRange);\n            factor /= domainExpand;\n            rangeMin = ax.l2r(rangeMin);\n            rangeMax = ax.l2r(rangeMax);\n            ax.range = ax._input.range = rl0 < rl1 ? [rangeMin, rangeMax] : [rangeMax, rangeMin];\n          }\n          updateDomain(ax, factor);\n        }\n      }\n    }\n  }\n};\nexports.getAxisGroup = function getAxisGroup(fullLayout, axId) {\n  var matchGroups = fullLayout._axisMatchGroups;\n  for (var i = 0; i < matchGroups.length; i++) {\n    var group = matchGroups[i];\n    if (group[axId]) return 'g' + i;\n  }\n  return axId;\n};\n\n// For use before autoranging, check if this axis was previously constrained\n// by domain but no longer is\nexports.clean = function clean(gd, ax) {\n  if (ax._inputDomain) {\n    var isConstrained = false;\n    var axId = ax._id;\n    var constraintGroups = gd._fullLayout._axisConstraintGroups;\n    for (var j = 0; j < constraintGroups.length; j++) {\n      if (constraintGroups[j][axId]) {\n        isConstrained = true;\n        break;\n      }\n    }\n    if (!isConstrained || ax.constrain !== 'domain') {\n      ax._input.domain = ax.domain = ax._inputDomain;\n      delete ax._inputDomain;\n    }\n  }\n};\nfunction updateDomain(ax, factor) {\n  var inputDomain = ax._inputDomain;\n  var centerFraction = FROM_BL[ax.constraintoward];\n  var center = inputDomain[0] + (inputDomain[1] - inputDomain[0]) * centerFraction;\n  ax.domain = ax._input.domain = [center + (inputDomain[0] - center) / factor, center + (inputDomain[1] - center) / factor];\n  ax.setScale();\n}","map":{"version":3,"names":["Lib","require","autorange","id2name","layoutAttributes","scaleZoom","setConvert","ALMOST_EQUAL","FROM_BL","exports","handleDefaults","layoutIn","layoutOut","opts","axIds","axHasImage","constraintGroups","_axisConstraintGroups","matchGroups","_axisMatchGroups","i","group","axId","axName","axIn","axOut","attr","val","length","handleOneAxDefaults","hasImage","stash","groups","stashAttr","fixedrange","axId2","axName2","warn","_matchGroup","Object","keys","splice","matchAttrs","hasRange","hasDayOfWeekBreaks","setAttrVal","_hasDayOfWeekBreaks","j","baseAx","matches","range","slice","_id","axLetter","charAt","splomStash","_splomAxes","thisID","isX","_constraintGroup","coerce","dflt","constraintoward","valType","values","thisType","type","idi","linkableAxes","axi","push","thisGroup","getConstraintGroup","linkableAxesNoLoops","canLink","scaleanchor","indexOf","undefined","scaleanchorDflt","anchor","concat","updateConstraintGroups","matchedAx","matchRatio","extent","_name","scaleratio","ax","domain","overlaying","thatID","groupi","keyj","thisGroupIndex","thisGroupKeys","baseScale","multiplyScales","key","a","b","aPrefix","bPrefix","aLen","bLen","match","substr","c","finalRatios","fullLayout","size","_size","yRatio","h","w","out","prefix","pLen","mult","enforce","gd","_fullLayout","axisID","normScale","mode","factor","axisIDs","minScale","Infinity","maxScale","matchScale","normScales","axes","hasAnyDomainConstraint","_inputDomain","_inputRange","setScale","Math","abs","_m","min","constrain","_constraintShrinkable","max","inputDomain","domainShrunk","rangeShrunk","r2l","_input","rl0","rl1","rangeCenter","rangeMin","rangeMax","halfRange","outerMin","outerMax","getPadMin","makePadFn","getPadMax","updateDomain","m","extremes","concatExtremes","minArray","maxArray","newVal","k","domainExpand","l2r","getAxisGroup","clean","isConstrained","centerFraction","center"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/plots/cartesian/constraints.js"],"sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\n\nvar autorange = require('./autorange');\nvar id2name = require('./axis_ids').id2name;\nvar layoutAttributes = require('./layout_attributes');\nvar scaleZoom = require('./scale_zoom');\nvar setConvert = require('./set_convert');\n\nvar ALMOST_EQUAL = require('../../constants/numerical').ALMOST_EQUAL;\nvar FROM_BL = require('../../constants/alignment').FROM_BL;\n\nexports.handleDefaults = function(layoutIn, layoutOut, opts) {\n    var axIds = opts.axIds;\n    var axHasImage = opts.axHasImage;\n\n    // sets of axes linked by `scaleanchor` OR `matches` along with the\n    // scaleratios compounded together, populated in handleConstraintDefaults\n    var constraintGroups = layoutOut._axisConstraintGroups = [];\n    // similar to _axisConstraintGroups, but only matching axes\n    var matchGroups = layoutOut._axisMatchGroups = [];\n\n    var i, group, axId, axName, axIn, axOut, attr, val;\n\n    for(i = 0; i < axIds.length; i++) {\n        axName = id2name(axIds[i]);\n        axIn = layoutIn[axName];\n        axOut = layoutOut[axName];\n\n        handleOneAxDefaults(axIn, axOut, {\n            axIds: axIds,\n            layoutOut: layoutOut,\n            hasImage: axHasImage[axName]\n        });\n    }\n\n    // save matchGroup on each matching axis\n    function stash(groups, stashAttr) {\n        for(i = 0; i < groups.length; i++) {\n            group = groups[i];\n            for(axId in group) {\n                layoutOut[id2name(axId)][stashAttr] = group;\n            }\n        }\n    }\n    stash(matchGroups, '_matchGroup');\n\n    // If any axis in a constraint group is fixedrange, they all get fixed\n    // This covers matches axes, as they're now in the constraintgroup too\n    // and have not yet been removed (if the group is *only* matching)\n    for(i = 0; i < constraintGroups.length; i++) {\n        group = constraintGroups[i];\n        for(axId in group) {\n            axOut = layoutOut[id2name(axId)];\n            if(axOut.fixedrange) {\n                for(var axId2 in group) {\n                    var axName2 = id2name(axId2);\n                    if((layoutIn[axName2] || {}).fixedrange === false) {\n                        Lib.warn(\n                            'fixedrange was specified as false for axis ' +\n                            axName2 + ' but was overridden because another ' +\n                            'axis in its constraint group has fixedrange true'\n                        );\n                    }\n                    layoutOut[axName2].fixedrange = true;\n                }\n                break;\n            }\n        }\n    }\n\n    // remove constraint groups that simply duplicate match groups\n    i = 0;\n    while(i < constraintGroups.length) {\n        group = constraintGroups[i];\n        for(axId in group) {\n            axOut = layoutOut[id2name(axId)];\n            if(axOut._matchGroup && Object.keys(axOut._matchGroup).length === Object.keys(group).length) {\n                constraintGroups.splice(i, 1);\n                i--;\n            }\n            break;\n        }\n        i++;\n    }\n\n    // save constraintGroup on each constrained axis\n    stash(constraintGroups, '_constraintGroup');\n\n    // make sure `matching` axes share values of necessary attributes\n    // Precedence (base axis is the one that doesn't list a `matches`, ie others\n    // all point to it):\n    // (1) explicitly defined value in the base axis\n    // (2) explicitly defined in another axis (arbitrary order)\n    // (3) default in the base axis\n    var matchAttrs = [\n        'constrain',\n        'range',\n        'autorange',\n        'rangemode',\n        'rangebreaks',\n        'categoryorder',\n        'categoryarray'\n    ];\n    var hasRange = false;\n    var hasDayOfWeekBreaks = false;\n\n    function setAttrVal() {\n        val = axOut[attr];\n        if(attr === 'rangebreaks') {\n            hasDayOfWeekBreaks = axOut._hasDayOfWeekBreaks;\n        }\n    }\n\n    for(i = 0; i < matchGroups.length; i++) {\n        group = matchGroups[i];\n\n        // find 'matching' range attrs\n        for(var j = 0; j < matchAttrs.length; j++) {\n            attr = matchAttrs[j];\n            val = null;\n            var baseAx;\n            for(axId in group) {\n                axName = id2name(axId);\n                axIn = layoutIn[axName];\n                axOut = layoutOut[axName];\n                if(!(attr in axOut)) {\n                    continue;\n                }\n                if(!axOut.matches) {\n                    baseAx = axOut;\n                    // top priority: explicit value in base axis\n                    if(attr in axIn) {\n                        setAttrVal();\n                        break;\n                    }\n                }\n                if(val === null && attr in axIn) {\n                    // second priority: first explicit value in another axis\n                    setAttrVal();\n                }\n            }\n\n            // special logic for coupling of range and autorange\n            // if nobody explicitly specifies autorange, but someone does\n            // explicitly specify range, autorange must be disabled.\n            if(attr === 'range' && val &&\n                axIn.range &&\n                axIn.range.length === 2 &&\n                axIn.range[0] !== null &&\n                axIn.range[1] !== null\n            ) {\n                hasRange = true;\n            }\n            if(attr === 'autorange' && val === null && hasRange) {\n                val = false;\n            }\n\n            if(val === null && attr in baseAx) {\n                // fallback: default value in base axis\n                val = baseAx[attr];\n            }\n            // but we still might not have a value, which is fine.\n            if(val !== null) {\n                for(axId in group) {\n                    axOut = layoutOut[id2name(axId)];\n                    axOut[attr] = attr === 'range' ? val.slice() : val;\n\n                    if(attr === 'rangebreaks') {\n                        axOut._hasDayOfWeekBreaks = hasDayOfWeekBreaks;\n                        setConvert(axOut, layoutOut);\n                    }\n                }\n            }\n        }\n    }\n};\n\nfunction handleOneAxDefaults(axIn, axOut, opts) {\n    var axIds = opts.axIds;\n    var layoutOut = opts.layoutOut;\n    var hasImage = opts.hasImage;\n    var constraintGroups = layoutOut._axisConstraintGroups;\n    var matchGroups = layoutOut._axisMatchGroups;\n    var axId = axOut._id;\n    var axLetter = axId.charAt(0);\n    var splomStash = ((layoutOut._splomAxes || {})[axLetter] || {})[axId] || {};\n    var thisID = axOut._id;\n    var isX = thisID.charAt(0) === 'x';\n\n    // Clear _matchGroup & _constraintGroup so relinkPrivateKeys doesn't keep\n    // an old one around. If this axis is in a group we'll set this again later\n    axOut._matchGroup = null;\n    axOut._constraintGroup = null;\n\n    function coerce(attr, dflt) {\n        return Lib.coerce(axIn, axOut, layoutAttributes, attr, dflt);\n    }\n\n    // coerce the constraint mechanics even if this axis has no scaleanchor\n    // because it may be the anchor of another axis.\n    coerce('constrain', hasImage ? 'domain' : 'range');\n    Lib.coerce(axIn, axOut, {\n        constraintoward: {\n            valType: 'enumerated',\n            values: isX ? ['left', 'center', 'right'] : ['bottom', 'middle', 'top'],\n            dflt: isX ? 'center' : 'middle'\n        }\n    }, 'constraintoward');\n\n    // If this axis is already part of a constraint group, we can't\n    // scaleanchor any other axis in that group, or we'd make a loop.\n    // Filter axIds to enforce this, also matching axis types.\n    var thisType = axOut.type;\n    var i, idi;\n\n    var linkableAxes = [];\n    for(i = 0; i < axIds.length; i++) {\n        idi = axIds[i];\n        if(idi === thisID) continue;\n\n        var axi = layoutOut[id2name(idi)];\n        if(axi.type === thisType) {\n            linkableAxes.push(idi);\n        }\n    }\n\n    var thisGroup = getConstraintGroup(constraintGroups, thisID);\n    if(thisGroup) {\n        var linkableAxesNoLoops = [];\n        for(i = 0; i < linkableAxes.length; i++) {\n            idi = linkableAxes[i];\n            if(!thisGroup[idi]) linkableAxesNoLoops.push(idi);\n        }\n        linkableAxes = linkableAxesNoLoops;\n    }\n\n    var canLink = linkableAxes.length;\n\n    var matches, scaleanchor;\n\n    if(canLink && (axIn.matches || splomStash.matches)) {\n        matches = Lib.coerce(axIn, axOut, {\n            matches: {\n                valType: 'enumerated',\n                values: linkableAxes,\n                dflt: linkableAxes.indexOf(splomStash.matches) !== -1 ? splomStash.matches : undefined\n            }\n        }, 'matches');\n    }\n\n    // 'matches' wins over 'scaleanchor' - each axis can only specify one\n    // constraint, but you can chain matches and scaleanchor constraints by\n    // specifying them in separate axes.\n    var scaleanchorDflt = hasImage && !isX ? axOut.anchor : undefined;\n    if(canLink && !matches && (axIn.scaleanchor || scaleanchorDflt)) {\n        scaleanchor = Lib.coerce(axIn, axOut, {\n            scaleanchor: {\n                valType: 'enumerated',\n                values: linkableAxes.concat([false])\n            }\n        }, 'scaleanchor', scaleanchorDflt);\n    }\n\n    if(matches) {\n        axOut._matchGroup = updateConstraintGroups(matchGroups, thisID, matches, 1);\n\n        // Also include match constraints in the scale groups\n        var matchedAx = layoutOut[id2name(matches)];\n        var matchRatio = extent(layoutOut, axOut) / extent(layoutOut, matchedAx);\n        if(isX !== (matches.charAt(0) === 'x')) {\n            // We don't yet know the actual scale ratio of x/y matches constraints,\n            // due to possible automargins, so just leave a placeholder for this:\n            // 'x' means \"x size over y size\", 'y' means the inverse.\n            // in principle in the constraint group you could get multiple of these.\n            matchRatio = (isX ? 'x' : 'y') + matchRatio;\n        }\n        updateConstraintGroups(constraintGroups, thisID, matches, matchRatio);\n    } else if(axIn.matches && axIds.indexOf(axIn.matches) !== -1) {\n        Lib.warn('ignored ' + axOut._name + '.matches: \"' +\n            axIn.matches + '\" to avoid an infinite loop');\n    }\n\n    if(scaleanchor) {\n        var scaleratio = coerce('scaleratio');\n\n        // TODO: I suppose I could do attribute.min: Number.MIN_VALUE to avoid zero,\n        // but that seems hacky. Better way to say \"must be a positive number\"?\n        // Of course if you use several super-tiny values you could eventually\n        // force a product of these to zero and all hell would break loose...\n        // Likewise with super-huge values.\n        if(!scaleratio) scaleratio = axOut.scaleratio = 1;\n\n        updateConstraintGroups(constraintGroups, thisID, scaleanchor, scaleratio);\n    } else if(axIn.scaleanchor && axIds.indexOf(axIn.scaleanchor) !== -1) {\n        Lib.warn('ignored ' + axOut._name + '.scaleanchor: \"' +\n            axIn.scaleanchor + '\" to avoid either an infinite loop ' +\n            'and possibly inconsistent scaleratios, or because this axis ' +\n            'declares a *matches* constraint.');\n    }\n}\n\nfunction extent(layoutOut, ax) {\n    var domain = ax.domain;\n    if(!domain) {\n        // at this point overlaying axes haven't yet inherited their main domains\n        // TODO: constrain: domain with overlaying axes is likely a bug.\n        domain = layoutOut[id2name(ax.overlaying)].domain;\n    }\n    return domain[1] - domain[0];\n}\n\nfunction getConstraintGroup(groups, thisID) {\n    for(var i = 0; i < groups.length; i++) {\n        if(groups[i][thisID]) {\n            return groups[i];\n        }\n    }\n    return null;\n}\n\n/*\n * Add this axis to the axis constraint groups, which is the collection\n * of axes that are all constrained together on scale (or matching).\n *\n * constraintGroups: a list of objects. each object is\n * {axis_id: scale_within_group}, where scale_within_group is\n * only important relative to the rest of the group, and defines\n * the relative scales between all axes in the group\n *\n * thisGroup: the group the current axis is already in\n * thisID: the id if the current axis\n * thatID: the id of the axis to scale it with\n * scaleratio: the ratio of this axis to the thatID axis\n */\nfunction updateConstraintGroups(constraintGroups, thisID, thatID, scaleratio) {\n    var i, j, groupi, keyj, thisGroupIndex;\n\n    var thisGroup = getConstraintGroup(constraintGroups, thisID);\n\n    if(thisGroup === null) {\n        thisGroup = {};\n        thisGroup[thisID] = 1;\n        thisGroupIndex = constraintGroups.length;\n        constraintGroups.push(thisGroup);\n    } else {\n        thisGroupIndex = constraintGroups.indexOf(thisGroup);\n    }\n\n    var thisGroupKeys = Object.keys(thisGroup);\n\n    // we know that this axis isn't in any other groups, but we don't know\n    // about the thatID axis. If it is, we need to merge the groups.\n    for(i = 0; i < constraintGroups.length; i++) {\n        groupi = constraintGroups[i];\n        if(i !== thisGroupIndex && groupi[thatID]) {\n            var baseScale = groupi[thatID];\n            for(j = 0; j < thisGroupKeys.length; j++) {\n                keyj = thisGroupKeys[j];\n                groupi[keyj] = multiplyScales(baseScale, multiplyScales(scaleratio, thisGroup[keyj]));\n            }\n            constraintGroups.splice(thisGroupIndex, 1);\n            return;\n        }\n    }\n\n    // otherwise, we insert the new thatID axis as the base scale (1)\n    // in its group, and scale the rest of the group to it\n    if(scaleratio !== 1) {\n        for(j = 0; j < thisGroupKeys.length; j++) {\n            var key = thisGroupKeys[j];\n            thisGroup[key] = multiplyScales(scaleratio, thisGroup[key]);\n        }\n    }\n    thisGroup[thatID] = 1;\n}\n\n// scales may be numbers or 'x1.3', 'yy4.5' etc to multiply by as-yet-unknown\n// ratios between x and y plot sizes n times\nfunction multiplyScales(a, b) {\n    var aPrefix = '';\n    var bPrefix = '';\n    var aLen, bLen;\n\n    if(typeof a === 'string') {\n        aPrefix = a.match(/^[xy]*/)[0];\n        aLen = aPrefix.length;\n        a = +a.substr(aLen);\n    }\n\n    if(typeof b === 'string') {\n        bPrefix = b.match(/^[xy]*/)[0];\n        bLen = bPrefix.length;\n        b = +b.substr(bLen);\n    }\n\n    var c = a * b;\n\n    // just two numbers\n    if(!aLen && !bLen) {\n        return c;\n    }\n\n    // one or more prefixes of the same type\n    if(!aLen || !bLen || aPrefix.charAt(0) === bPrefix.charAt(0)) {\n        return aPrefix + bPrefix + (a * b);\n    }\n\n    // x and y cancel each other out exactly - back to a number\n    if(aLen === bLen) {\n        return c;\n    }\n\n    // partial cancelation of prefixes\n    return (aLen > bLen ? aPrefix.substr(bLen) : bPrefix.substr(aLen)) + c;\n}\n\nfunction finalRatios(group, fullLayout) {\n    var size = fullLayout._size;\n    var yRatio = size.h / size.w;\n    var out = {};\n    var keys = Object.keys(group);\n    for(var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var val = group[key];\n\n        if(typeof val === 'string') {\n            var prefix = val.match(/^[xy]*/)[0];\n            var pLen = prefix.length;\n            val = +val.substr(pLen);\n            var mult = prefix.charAt(0) === 'y' ? yRatio : (1 / yRatio);\n            for(var j = 0; j < pLen; j++) {\n                val *= mult;\n            }\n        }\n\n        out[key] = val;\n    }\n    return out;\n}\n\nexports.enforce = function enforce(gd) {\n    var fullLayout = gd._fullLayout;\n    var constraintGroups = fullLayout._axisConstraintGroups || [];\n\n    var i, j, group, axisID, ax, normScale, mode, factor;\n\n    // matching constraints are handled in the autorange code when autoranged,\n    // or in the supplyDefaults code when explicitly ranged.\n    // now we just need to handle scaleanchor constraints\n    // matches constraints that chain with scaleanchor constraints are included\n    // here too, but because matches has already been satisfied,\n    // any changes here should preserve that.\n    for(i = 0; i < constraintGroups.length; i++) {\n        group = finalRatios(constraintGroups[i], fullLayout);\n        var axisIDs = Object.keys(group);\n\n        var minScale = Infinity;\n        var maxScale = 0;\n        // mostly matchScale will be the same as minScale\n        // ie we expand axis ranges to encompass *everything*\n        // that's currently in any of their ranges, but during\n        // autorange of a subset of axes we will ignore other\n        // axes for this purpose.\n        var matchScale = Infinity;\n        var normScales = {};\n        var axes = {};\n        var hasAnyDomainConstraint = false;\n\n        // find the (normalized) scale of each axis in the group\n        for(j = 0; j < axisIDs.length; j++) {\n            axisID = axisIDs[j];\n            axes[axisID] = ax = fullLayout[id2name(axisID)];\n\n            if(ax._inputDomain) ax.domain = ax._inputDomain.slice();\n            else ax._inputDomain = ax.domain.slice();\n\n            if(!ax._inputRange) ax._inputRange = ax.range.slice();\n\n            // set axis scale here so we can use _m rather than\n            // having to calculate it from length and range\n            ax.setScale();\n\n            // abs: inverted scales still satisfy the constraint\n            normScales[axisID] = normScale = Math.abs(ax._m) / group[axisID];\n            minScale = Math.min(minScale, normScale);\n            if(ax.constrain === 'domain' || !ax._constraintShrinkable) {\n                matchScale = Math.min(matchScale, normScale);\n            }\n\n            // this has served its purpose, so remove it\n            delete ax._constraintShrinkable;\n            maxScale = Math.max(maxScale, normScale);\n\n            if(ax.constrain === 'domain') hasAnyDomainConstraint = true;\n        }\n\n        // Do we have a constraint mismatch? Give a small buffer for rounding errors\n        if(minScale > ALMOST_EQUAL * maxScale && !hasAnyDomainConstraint) continue;\n\n        // now increase any ranges we need to until all normalized scales are equal\n        for(j = 0; j < axisIDs.length; j++) {\n            axisID = axisIDs[j];\n            normScale = normScales[axisID];\n            ax = axes[axisID];\n            mode = ax.constrain;\n\n            // even if the scale didn't change, if we're shrinking domain\n            // we need to recalculate in case `constraintoward` changed\n            if(normScale !== matchScale || mode === 'domain') {\n                factor = normScale / matchScale;\n\n                if(mode === 'range') {\n                    scaleZoom(ax, factor);\n                } else {\n                    // mode === 'domain'\n\n                    var inputDomain = ax._inputDomain;\n                    var domainShrunk = (ax.domain[1] - ax.domain[0]) /\n                        (inputDomain[1] - inputDomain[0]);\n                    var rangeShrunk = (ax.r2l(ax.range[1]) - ax.r2l(ax.range[0])) /\n                        (ax.r2l(ax._inputRange[1]) - ax.r2l(ax._inputRange[0]));\n\n                    factor /= domainShrunk;\n\n                    if(factor * rangeShrunk < 1) {\n                        // we've asked to magnify the axis more than we can just by\n                        // enlarging the domain - so we need to constrict range\n                        ax.domain = ax._input.domain = inputDomain.slice();\n                        scaleZoom(ax, factor);\n                        continue;\n                    }\n\n                    if(rangeShrunk < 1) {\n                        // the range has previously been constricted by ^^, but we've\n                        // switched to the domain-constricted regime, so reset range\n                        ax.range = ax._input.range = ax._inputRange.slice();\n                        factor *= rangeShrunk;\n                    }\n\n                    if(ax.autorange) {\n                        /*\n                         * range & factor may need to change because range was\n                         * calculated for the larger scaling, so some pixel\n                         * paddings may get cut off when we reduce the domain.\n                         *\n                         * This is easier than the regular autorange calculation\n                         * because we already know the scaling `m`, but we still\n                         * need to cut out impossible constraints (like\n                         * annotations with super-long arrows). That's what\n                         * outerMin/Max are for - if the expansion was going to\n                         * go beyond the original domain, it must be impossible\n                         */\n                        var rl0 = ax.r2l(ax.range[0]);\n                        var rl1 = ax.r2l(ax.range[1]);\n                        var rangeCenter = (rl0 + rl1) / 2;\n                        var rangeMin = rangeCenter;\n                        var rangeMax = rangeCenter;\n                        var halfRange = Math.abs(rl1 - rangeCenter);\n                        // extra tiny bit for rounding errors, in case we actually\n                        // *are* expanding to the full domain\n                        var outerMin = rangeCenter - halfRange * factor * 1.0001;\n                        var outerMax = rangeCenter + halfRange * factor * 1.0001;\n                        var getPadMin = autorange.makePadFn(fullLayout, ax, 0);\n                        var getPadMax = autorange.makePadFn(fullLayout, ax, 1);\n\n                        updateDomain(ax, factor);\n                        var m = Math.abs(ax._m);\n                        var extremes = autorange.concatExtremes(gd, ax);\n                        var minArray = extremes.min;\n                        var maxArray = extremes.max;\n                        var newVal;\n                        var k;\n\n                        for(k = 0; k < minArray.length; k++) {\n                            newVal = minArray[k].val - getPadMin(minArray[k]) / m;\n                            if(newVal > outerMin && newVal < rangeMin) {\n                                rangeMin = newVal;\n                            }\n                        }\n\n                        for(k = 0; k < maxArray.length; k++) {\n                            newVal = maxArray[k].val + getPadMax(maxArray[k]) / m;\n                            if(newVal < outerMax && newVal > rangeMax) {\n                                rangeMax = newVal;\n                            }\n                        }\n\n                        var domainExpand = (rangeMax - rangeMin) / (2 * halfRange);\n                        factor /= domainExpand;\n\n                        rangeMin = ax.l2r(rangeMin);\n                        rangeMax = ax.l2r(rangeMax);\n                        ax.range = ax._input.range = (rl0 < rl1) ?\n                            [rangeMin, rangeMax] : [rangeMax, rangeMin];\n                    }\n\n                    updateDomain(ax, factor);\n                }\n            }\n        }\n    }\n};\n\nexports.getAxisGroup = function getAxisGroup(fullLayout, axId) {\n    var matchGroups = fullLayout._axisMatchGroups;\n\n    for(var i = 0; i < matchGroups.length; i++) {\n        var group = matchGroups[i];\n        if(group[axId]) return 'g' + i;\n    }\n    return axId;\n};\n\n// For use before autoranging, check if this axis was previously constrained\n// by domain but no longer is\nexports.clean = function clean(gd, ax) {\n    if(ax._inputDomain) {\n        var isConstrained = false;\n        var axId = ax._id;\n        var constraintGroups = gd._fullLayout._axisConstraintGroups;\n        for(var j = 0; j < constraintGroups.length; j++) {\n            if(constraintGroups[j][axId]) {\n                isConstrained = true;\n                break;\n            }\n        }\n        if(!isConstrained || ax.constrain !== 'domain') {\n            ax._input.domain = ax.domain = ax._inputDomain;\n            delete ax._inputDomain;\n        }\n    }\n};\n\nfunction updateDomain(ax, factor) {\n    var inputDomain = ax._inputDomain;\n    var centerFraction = FROM_BL[ax.constraintoward];\n    var center = inputDomain[0] + (inputDomain[1] - inputDomain[0]) * centerFraction;\n\n    ax.domain = ax._input.domain = [\n        center + (inputDomain[0] - center) / factor,\n        center + (inputDomain[1] - center) / factor\n    ];\n    ax.setScale();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}