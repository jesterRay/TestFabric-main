{"ast":null,"code":"'use strict';\n\nvar colorAttrs = require('../../components/color/attributes');\nvar axesAttrs = require('../cartesian/layout_attributes');\nvar domainAttrs = require('../domain').attributes;\nvar extendFlat = require('../../lib').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\nvar axisLineGridAttr = overrideAll({\n  color: axesAttrs.color,\n  showline: extendFlat({}, axesAttrs.showline, {\n    dflt: true\n  }),\n  linecolor: axesAttrs.linecolor,\n  linewidth: axesAttrs.linewidth,\n  showgrid: extendFlat({}, axesAttrs.showgrid, {\n    dflt: true\n  }),\n  gridcolor: axesAttrs.gridcolor,\n  gridwidth: axesAttrs.gridwidth,\n  griddash: axesAttrs.griddash\n\n  // TODO add spike* attributes down the road\n\n  // should we add zeroline* attributes?\n}, 'plot', 'from-root');\nvar axisTickAttrs = overrideAll({\n  tickmode: axesAttrs.minor.tickmode,\n  nticks: axesAttrs.nticks,\n  tick0: axesAttrs.tick0,\n  dtick: axesAttrs.dtick,\n  tickvals: axesAttrs.tickvals,\n  ticktext: axesAttrs.ticktext,\n  ticks: axesAttrs.ticks,\n  ticklen: axesAttrs.ticklen,\n  tickwidth: axesAttrs.tickwidth,\n  tickcolor: axesAttrs.tickcolor,\n  ticklabelstep: axesAttrs.ticklabelstep,\n  showticklabels: axesAttrs.showticklabels,\n  labelalias: axesAttrs.labelalias,\n  showtickprefix: axesAttrs.showtickprefix,\n  tickprefix: axesAttrs.tickprefix,\n  showticksuffix: axesAttrs.showticksuffix,\n  ticksuffix: axesAttrs.ticksuffix,\n  showexponent: axesAttrs.showexponent,\n  exponentformat: axesAttrs.exponentformat,\n  minexponent: axesAttrs.minexponent,\n  separatethousands: axesAttrs.separatethousands,\n  tickfont: axesAttrs.tickfont,\n  tickangle: axesAttrs.tickangle,\n  tickformat: axesAttrs.tickformat,\n  tickformatstops: axesAttrs.tickformatstops,\n  layer: axesAttrs.layer\n}, 'plot', 'from-root');\nvar radialAxisAttrs = {\n  visible: extendFlat({}, axesAttrs.visible, {\n    dflt: true\n  }),\n  type: extendFlat({}, axesAttrs.type, {\n    values: ['-', 'linear', 'log', 'date', 'category']\n  }),\n  autotypenumbers: axesAttrs.autotypenumbers,\n  autorangeoptions: {\n    minallowed: axesAttrs.autorangeoptions.minallowed,\n    maxallowed: axesAttrs.autorangeoptions.maxallowed,\n    clipmin: axesAttrs.autorangeoptions.clipmin,\n    clipmax: axesAttrs.autorangeoptions.clipmax,\n    include: axesAttrs.autorangeoptions.include,\n    editType: 'plot'\n  },\n  autorange: extendFlat({}, axesAttrs.autorange, {\n    editType: 'plot'\n  }),\n  rangemode: {\n    valType: 'enumerated',\n    values: ['tozero', 'nonnegative', 'normal'],\n    dflt: 'tozero',\n    editType: 'calc',\n    description: ['If *tozero*`, the range extends to 0,', 'regardless of the input data', 'If *nonnegative*, the range is non-negative,', 'regardless of the input data.', 'If *normal*, the range is computed in relation to the extrema', 'of the input data (same behavior as for cartesian axes).'].join(' ')\n  },\n  minallowed: extendFlat({}, axesAttrs.minallowed, {\n    editType: 'plot'\n  }),\n  maxallowed: extendFlat({}, axesAttrs.maxallowed, {\n    editType: 'plot'\n  }),\n  range: extendFlat({}, axesAttrs.range, {\n    items: [{\n      valType: 'any',\n      editType: 'plot',\n      impliedEdits: {\n        '^autorange': false\n      }\n    }, {\n      valType: 'any',\n      editType: 'plot',\n      impliedEdits: {\n        '^autorange': false\n      }\n    }],\n    editType: 'plot'\n  }),\n  categoryorder: axesAttrs.categoryorder,\n  categoryarray: axesAttrs.categoryarray,\n  angle: {\n    valType: 'angle',\n    editType: 'plot',\n    description: ['Sets the angle (in degrees) from which the radial axis is drawn.', 'Note that by default, radial axis line on the theta=0 line', 'corresponds to a line pointing right (like what mathematicians prefer).', 'Defaults to the first `polar.sector` angle.'].join(' ')\n  },\n  autotickangles: axesAttrs.autotickangles,\n  side: {\n    valType: 'enumerated',\n    // TODO add 'center' for `showline: false` radial axes\n    values: ['clockwise', 'counterclockwise'],\n    dflt: 'clockwise',\n    editType: 'plot',\n    description: ['Determines on which side of radial axis line', 'the tick and tick labels appear.'].join(' ')\n  },\n  title: {\n    // radial title is not gui-editable at the moment,\n    // so it needs dflt: '', similar to carpet axes.\n    text: extendFlat({}, axesAttrs.title.text, {\n      editType: 'plot',\n      dflt: ''\n    }),\n    font: extendFlat({}, axesAttrs.title.font, {\n      editType: 'plot'\n    }),\n    // TODO\n    // - might need a 'titleside' and even 'titledirection' down the road\n    // - what about standoff ??\n\n    editType: 'plot'\n  },\n  hoverformat: axesAttrs.hoverformat,\n  uirevision: {\n    valType: 'any',\n    editType: 'none',\n    description: ['Controls persistence of user-driven changes in axis `range`,', '`autorange`, `angle`, and `title` if in `editable: true` configuration.', 'Defaults to `polar<N>.uirevision`.'].join(' ')\n  },\n  editType: 'calc',\n  _deprecated: {\n    title: axesAttrs._deprecated.title,\n    titlefont: axesAttrs._deprecated.titlefont\n  }\n};\nextendFlat(radialAxisAttrs,\n// N.B. radialaxis grid lines are circular,\n// but radialaxis lines are straight from circle center to outer bound\naxisLineGridAttr, axisTickAttrs);\nvar angularAxisAttrs = {\n  visible: extendFlat({}, axesAttrs.visible, {\n    dflt: true\n  }),\n  type: {\n    valType: 'enumerated',\n    // 'linear' should maybe be called 'angle' or 'angular' here\n    // to make clear that axis here is periodic and more tightly match\n    // `thetaunit`?\n    //\n    // skip 'date' for first push\n    // no 'log' for now\n    values: ['-', 'linear', 'category'],\n    dflt: '-',\n    editType: 'calc',\n    _noTemplating: true,\n    description: ['Sets the angular axis type.', 'If *linear*, set `thetaunit` to determine the unit in which axis value are shown.', 'If *category, use `period` to set the number of integer coordinates around polar axis.'].join(' ')\n  },\n  autotypenumbers: axesAttrs.autotypenumbers,\n  categoryorder: axesAttrs.categoryorder,\n  categoryarray: axesAttrs.categoryarray,\n  thetaunit: {\n    valType: 'enumerated',\n    values: ['radians', 'degrees'],\n    dflt: 'degrees',\n    editType: 'calc',\n    description: ['Sets the format unit of the formatted *theta* values.', 'Has an effect only when `angularaxis.type` is *linear*.'].join(' ')\n  },\n  period: {\n    valType: 'number',\n    editType: 'calc',\n    min: 0,\n    description: ['Set the angular period.', 'Has an effect only when `angularaxis.type` is *category*.'].join(' ')\n    // Examples for date axes:\n    //\n    // - period that equals the timeseries length\n    //  http://flowingdata.com/2017/01/24/one-dataset-visualized-25-ways/18-polar-coordinates/\n    // - and 1-year periods (focusing on seasonal change0\n    //  http://otexts.org/fpp2/seasonal-plots.html\n    //  https://blogs.scientificamerican.com/sa-visual/why-are-so-many-babies-born-around-8-00-a-m/\n    //  http://www.seasonaladjustment.com/2012/09/05/clock-plot-visualising-seasonality-using-r-and-ggplot2-part-3/\n    //  https://i.pinimg.com/736x/49/b9/72/49b972ccb3206a1a6d6f870dac543280.jpg\n    //  https://www.climate-lab-book.ac.uk/spirals/\n  },\n  direction: {\n    valType: 'enumerated',\n    values: ['counterclockwise', 'clockwise'],\n    dflt: 'counterclockwise',\n    editType: 'calc',\n    description: ['Sets the direction corresponding to positive angles.'].join(' ')\n  },\n  rotation: {\n    valType: 'angle',\n    editType: 'calc',\n    description: ['Sets that start position (in degrees) of the angular axis', 'By default, polar subplots with `direction` set to *counterclockwise*', 'get a `rotation` of *0*', 'which corresponds to due East (like what mathematicians prefer).', 'In turn, polar with `direction` set to *clockwise* get a rotation of *90*', 'which corresponds to due North (like on a compass),'].join(' ')\n  },\n  hoverformat: axesAttrs.hoverformat,\n  uirevision: {\n    valType: 'any',\n    editType: 'none',\n    description: ['Controls persistence of user-driven changes in axis `rotation`.', 'Defaults to `polar<N>.uirevision`.'].join(' ')\n  },\n  editType: 'calc'\n};\nextendFlat(angularAxisAttrs,\n// N.B. angular grid lines are straight lines from circle center to outer bound\n// the angular line is circular bounding the polar plot area.\naxisLineGridAttr,\n// N.B. ticksuffix defaults to 'Â°' for angular axes with `thetaunit: 'degrees'`\naxisTickAttrs);\nmodule.exports = {\n  // TODO for x/y/zoom system for paper-based zooming:\n  // x: {},\n  // y: {},\n  // zoom: {},\n\n  domain: domainAttrs({\n    name: 'polar',\n    editType: 'plot'\n  }),\n  sector: {\n    valType: 'info_array',\n    items: [{\n      valType: 'number',\n      editType: 'plot'\n    }, {\n      valType: 'number',\n      editType: 'plot'\n    }],\n    dflt: [0, 360],\n    editType: 'plot',\n    description: ['Sets angular span of this polar subplot with two angles (in degrees).', 'Sector are assumed to be spanned in the counterclockwise direction', 'with *0* corresponding to rightmost limit of the polar subplot.'].join(' ')\n  },\n  hole: {\n    valType: 'number',\n    min: 0,\n    max: 1,\n    dflt: 0,\n    editType: 'plot',\n    description: ['Sets the fraction of the radius to cut out of the polar subplot.'].join(' ')\n  },\n  bgcolor: {\n    valType: 'color',\n    editType: 'plot',\n    dflt: colorAttrs.background,\n    description: 'Set the background color of the subplot'\n  },\n  radialaxis: radialAxisAttrs,\n  angularaxis: angularAxisAttrs,\n  gridshape: {\n    valType: 'enumerated',\n    values: ['circular', 'linear'],\n    dflt: 'circular',\n    editType: 'plot',\n    description: ['Determines if the radial axis grid lines and angular axis line are drawn', 'as *circular* sectors or as *linear* (polygon) sectors.', 'Has an effect only when the angular axis has `type` *category*.', 'Note that `radialaxis.angle` is snapped to the angle of the closest', 'vertex when `gridshape` is *circular*', '(so that radial axis scale is the same as the data scale).'].join(' ')\n  },\n  // TODO maybe?\n  // annotations:\n\n  uirevision: {\n    valType: 'any',\n    editType: 'none',\n    description: ['Controls persistence of user-driven changes in axis attributes,', 'if not overridden in the individual axes.', 'Defaults to `layout.uirevision`.'].join(' ')\n  },\n  editType: 'calc'\n};","map":{"version":3,"names":["colorAttrs","require","axesAttrs","domainAttrs","attributes","extendFlat","overrideAll","axisLineGridAttr","color","showline","dflt","linecolor","linewidth","showgrid","gridcolor","gridwidth","griddash","axisTickAttrs","tickmode","minor","nticks","tick0","dtick","tickvals","ticktext","ticks","ticklen","tickwidth","tickcolor","ticklabelstep","showticklabels","labelalias","showtickprefix","tickprefix","showticksuffix","ticksuffix","showexponent","exponentformat","minexponent","separatethousands","tickfont","tickangle","tickformat","tickformatstops","layer","radialAxisAttrs","visible","type","values","autotypenumbers","autorangeoptions","minallowed","maxallowed","clipmin","clipmax","include","editType","autorange","rangemode","valType","description","join","range","items","impliedEdits","categoryorder","categoryarray","angle","autotickangles","side","title","text","font","hoverformat","uirevision","_deprecated","titlefont","angularAxisAttrs","_noTemplating","thetaunit","period","min","direction","rotation","module","exports","domain","name","sector","hole","max","bgcolor","background","radialaxis","angularaxis","gridshape"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/plots/polar/layout_attributes.js"],"sourcesContent":["'use strict';\n\nvar colorAttrs = require('../../components/color/attributes');\nvar axesAttrs = require('../cartesian/layout_attributes');\nvar domainAttrs = require('../domain').attributes;\nvar extendFlat = require('../../lib').extendFlat;\nvar overrideAll = require('../../plot_api/edit_types').overrideAll;\n\nvar axisLineGridAttr = overrideAll({\n    color: axesAttrs.color,\n    showline: extendFlat({}, axesAttrs.showline, {dflt: true}),\n    linecolor: axesAttrs.linecolor,\n    linewidth: axesAttrs.linewidth,\n    showgrid: extendFlat({}, axesAttrs.showgrid, {dflt: true}),\n    gridcolor: axesAttrs.gridcolor,\n    gridwidth: axesAttrs.gridwidth,\n    griddash: axesAttrs.griddash\n\n    // TODO add spike* attributes down the road\n\n    // should we add zeroline* attributes?\n\n}, 'plot', 'from-root');\n\nvar axisTickAttrs = overrideAll({\n    tickmode: axesAttrs.minor.tickmode,\n    nticks: axesAttrs.nticks,\n    tick0: axesAttrs.tick0,\n    dtick: axesAttrs.dtick,\n    tickvals: axesAttrs.tickvals,\n    ticktext: axesAttrs.ticktext,\n    ticks: axesAttrs.ticks,\n    ticklen: axesAttrs.ticklen,\n    tickwidth: axesAttrs.tickwidth,\n    tickcolor: axesAttrs.tickcolor,\n    ticklabelstep: axesAttrs.ticklabelstep,\n    showticklabels: axesAttrs.showticklabels,\n    labelalias: axesAttrs.labelalias,\n    showtickprefix: axesAttrs.showtickprefix,\n    tickprefix: axesAttrs.tickprefix,\n    showticksuffix: axesAttrs.showticksuffix,\n    ticksuffix: axesAttrs.ticksuffix,\n    showexponent: axesAttrs.showexponent,\n    exponentformat: axesAttrs.exponentformat,\n    minexponent: axesAttrs.minexponent,\n    separatethousands: axesAttrs.separatethousands,\n    tickfont: axesAttrs.tickfont,\n    tickangle: axesAttrs.tickangle,\n    tickformat: axesAttrs.tickformat,\n    tickformatstops: axesAttrs.tickformatstops,\n    layer: axesAttrs.layer\n}, 'plot', 'from-root');\n\nvar radialAxisAttrs = {\n    visible: extendFlat({}, axesAttrs.visible, {dflt: true}),\n    type: extendFlat({}, axesAttrs.type, {\n        values: ['-', 'linear', 'log', 'date', 'category']\n    }),\n    autotypenumbers: axesAttrs.autotypenumbers,\n\n    autorangeoptions: {\n        minallowed: axesAttrs.autorangeoptions.minallowed,\n        maxallowed: axesAttrs.autorangeoptions.maxallowed,\n        clipmin: axesAttrs.autorangeoptions.clipmin,\n        clipmax: axesAttrs.autorangeoptions.clipmax,\n        include: axesAttrs.autorangeoptions.include,\n        editType: 'plot'\n    },\n    autorange: extendFlat({}, axesAttrs.autorange, {editType: 'plot'}),\n    rangemode: {\n        valType: 'enumerated',\n        values: ['tozero', 'nonnegative', 'normal'],\n        dflt: 'tozero',\n        editType: 'calc',\n        description: [\n            'If *tozero*`, the range extends to 0,',\n            'regardless of the input data',\n            'If *nonnegative*, the range is non-negative,',\n            'regardless of the input data.',\n            'If *normal*, the range is computed in relation to the extrema',\n            'of the input data (same behavior as for cartesian axes).'\n        ].join(' ')\n    },\n    minallowed: extendFlat({}, axesAttrs.minallowed, {editType: 'plot'}),\n    maxallowed: extendFlat({}, axesAttrs.maxallowed, {editType: 'plot'}),\n    range: extendFlat({}, axesAttrs.range, {\n        items: [\n            {valType: 'any', editType: 'plot', impliedEdits: {'^autorange': false}},\n            {valType: 'any', editType: 'plot', impliedEdits: {'^autorange': false}}\n        ],\n        editType: 'plot'\n    }),\n\n    categoryorder: axesAttrs.categoryorder,\n    categoryarray: axesAttrs.categoryarray,\n\n    angle: {\n        valType: 'angle',\n        editType: 'plot',\n        description: [\n            'Sets the angle (in degrees) from which the radial axis is drawn.',\n            'Note that by default, radial axis line on the theta=0 line',\n            'corresponds to a line pointing right (like what mathematicians prefer).',\n            'Defaults to the first `polar.sector` angle.'\n        ].join(' ')\n    },\n\n    autotickangles: axesAttrs.autotickangles,\n\n    side: {\n        valType: 'enumerated',\n        // TODO add 'center' for `showline: false` radial axes\n        values: ['clockwise', 'counterclockwise'],\n        dflt: 'clockwise',\n        editType: 'plot',\n        description: [\n            'Determines on which side of radial axis line',\n            'the tick and tick labels appear.'\n        ].join(' ')\n    },\n\n\n    title: {\n        // radial title is not gui-editable at the moment,\n        // so it needs dflt: '', similar to carpet axes.\n        text: extendFlat({}, axesAttrs.title.text, {editType: 'plot', dflt: ''}),\n        font: extendFlat({}, axesAttrs.title.font, {editType: 'plot'}),\n\n        // TODO\n        // - might need a 'titleside' and even 'titledirection' down the road\n        // - what about standoff ??\n\n        editType: 'plot'\n    },\n\n    hoverformat: axesAttrs.hoverformat,\n\n    uirevision: {\n        valType: 'any',\n        editType: 'none',\n        description: [\n            'Controls persistence of user-driven changes in axis `range`,',\n            '`autorange`, `angle`, and `title` if in `editable: true` configuration.',\n            'Defaults to `polar<N>.uirevision`.'\n        ].join(' ')\n    },\n\n    editType: 'calc',\n\n    _deprecated: {\n        title: axesAttrs._deprecated.title,\n        titlefont: axesAttrs._deprecated.titlefont\n    }\n};\n\nextendFlat(\n    radialAxisAttrs,\n\n    // N.B. radialaxis grid lines are circular,\n    // but radialaxis lines are straight from circle center to outer bound\n    axisLineGridAttr,\n    axisTickAttrs\n);\n\nvar angularAxisAttrs = {\n    visible: extendFlat({}, axesAttrs.visible, {dflt: true}),\n    type: {\n        valType: 'enumerated',\n        // 'linear' should maybe be called 'angle' or 'angular' here\n        // to make clear that axis here is periodic and more tightly match\n        // `thetaunit`?\n        //\n        // skip 'date' for first push\n        // no 'log' for now\n        values: ['-', 'linear', 'category'],\n        dflt: '-',\n        editType: 'calc',\n        _noTemplating: true,\n        description: [\n            'Sets the angular axis type.',\n            'If *linear*, set `thetaunit` to determine the unit in which axis value are shown.',\n            'If *category, use `period` to set the number of integer coordinates around polar axis.'\n        ].join(' ')\n    },\n    autotypenumbers: axesAttrs.autotypenumbers,\n\n    categoryorder: axesAttrs.categoryorder,\n    categoryarray: axesAttrs.categoryarray,\n\n    thetaunit: {\n        valType: 'enumerated',\n        values: ['radians', 'degrees'],\n        dflt: 'degrees',\n        editType: 'calc',\n        description: [\n            'Sets the format unit of the formatted *theta* values.',\n            'Has an effect only when `angularaxis.type` is *linear*.'\n        ].join(' ')\n    },\n\n    period: {\n        valType: 'number',\n        editType: 'calc',\n        min: 0,\n        description: [\n            'Set the angular period.',\n            'Has an effect only when `angularaxis.type` is *category*.',\n        ].join(' ')\n        // Examples for date axes:\n        //\n        // - period that equals the timeseries length\n        //  http://flowingdata.com/2017/01/24/one-dataset-visualized-25-ways/18-polar-coordinates/\n        // - and 1-year periods (focusing on seasonal change0\n        //  http://otexts.org/fpp2/seasonal-plots.html\n        //  https://blogs.scientificamerican.com/sa-visual/why-are-so-many-babies-born-around-8-00-a-m/\n        //  http://www.seasonaladjustment.com/2012/09/05/clock-plot-visualising-seasonality-using-r-and-ggplot2-part-3/\n        //  https://i.pinimg.com/736x/49/b9/72/49b972ccb3206a1a6d6f870dac543280.jpg\n        //  https://www.climate-lab-book.ac.uk/spirals/\n    },\n\n    direction: {\n        valType: 'enumerated',\n        values: ['counterclockwise', 'clockwise'],\n        dflt: 'counterclockwise',\n        editType: 'calc',\n        description: [\n            'Sets the direction corresponding to positive angles.'\n        ].join(' ')\n    },\n\n    rotation: {\n        valType: 'angle',\n        editType: 'calc',\n        description: [\n            'Sets that start position (in degrees) of the angular axis',\n            'By default, polar subplots with `direction` set to *counterclockwise*',\n            'get a `rotation` of *0*',\n            'which corresponds to due East (like what mathematicians prefer).',\n            'In turn, polar with `direction` set to *clockwise* get a rotation of *90*',\n            'which corresponds to due North (like on a compass),'\n        ].join(' ')\n    },\n\n    hoverformat: axesAttrs.hoverformat,\n\n    uirevision: {\n        valType: 'any',\n        editType: 'none',\n        description: [\n            'Controls persistence of user-driven changes in axis `rotation`.',\n            'Defaults to `polar<N>.uirevision`.'\n        ].join(' ')\n    },\n\n    editType: 'calc'\n};\n\nextendFlat(\n    angularAxisAttrs,\n\n    // N.B. angular grid lines are straight lines from circle center to outer bound\n    // the angular line is circular bounding the polar plot area.\n    axisLineGridAttr,\n\n    // N.B. ticksuffix defaults to 'Â°' for angular axes with `thetaunit: 'degrees'`\n    axisTickAttrs\n);\n\nmodule.exports = {\n    // TODO for x/y/zoom system for paper-based zooming:\n    // x: {},\n    // y: {},\n    // zoom: {},\n\n    domain: domainAttrs({name: 'polar', editType: 'plot'}),\n\n    sector: {\n        valType: 'info_array',\n        items: [\n            {valType: 'number', editType: 'plot'},\n            {valType: 'number', editType: 'plot'}\n        ],\n        dflt: [0, 360],\n        editType: 'plot',\n        description: [\n            'Sets angular span of this polar subplot with two angles (in degrees).',\n            'Sector are assumed to be spanned in the counterclockwise direction',\n            'with *0* corresponding to rightmost limit of the polar subplot.'\n        ].join(' ')\n    },\n    hole: {\n        valType: 'number',\n        min: 0,\n        max: 1,\n        dflt: 0,\n        editType: 'plot',\n        description: [\n            'Sets the fraction of the radius to cut out of the polar subplot.'\n        ].join(' ')\n    },\n\n    bgcolor: {\n        valType: 'color',\n        editType: 'plot',\n        dflt: colorAttrs.background,\n        description: 'Set the background color of the subplot'\n    },\n\n    radialaxis: radialAxisAttrs,\n    angularaxis: angularAxisAttrs,\n\n    gridshape: {\n        valType: 'enumerated',\n        values: ['circular', 'linear'],\n        dflt: 'circular',\n        editType: 'plot',\n        description: [\n            'Determines if the radial axis grid lines and angular axis line are drawn',\n            'as *circular* sectors or as *linear* (polygon) sectors.',\n            'Has an effect only when the angular axis has `type` *category*.',\n            'Note that `radialaxis.angle` is snapped to the angle of the closest',\n            'vertex when `gridshape` is *circular*',\n            '(so that radial axis scale is the same as the data scale).'\n        ].join(' ')\n    },\n\n    // TODO maybe?\n    // annotations:\n\n    uirevision: {\n        valType: 'any',\n        editType: 'none',\n        description: [\n            'Controls persistence of user-driven changes in axis attributes,',\n            'if not overridden in the individual axes.',\n            'Defaults to `layout.uirevision`.'\n        ].join(' ')\n    },\n\n    editType: 'calc'\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}