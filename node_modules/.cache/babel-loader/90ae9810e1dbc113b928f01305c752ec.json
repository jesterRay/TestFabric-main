{"ast":null,"code":"'use strict';\n\nvar Lib = require('../../lib');\nvar hasColorscale = require('../../components/colorscale/helpers').hasColorscale;\nvar colorscaleDefaults = require('../../components/colorscale/defaults');\nvar handleDomainDefaults = require('../../plots/domain').defaults;\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\nvar Axes = require('../../plots/cartesian/axes');\nvar attributes = require('./attributes');\nvar axisBrush = require('./axisbrush');\nvar maxDimensionCount = require('./constants').maxDimensionCount;\nvar mergeLength = require('./merge_length');\nfunction handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce) {\n  var lineColor = coerce('line.color', defaultColor);\n  if (hasColorscale(traceIn, 'line') && Lib.isArrayOrTypedArray(lineColor)) {\n    if (lineColor.length) {\n      coerce('line.colorscale');\n      colorscaleDefaults(traceIn, traceOut, layout, coerce, {\n        prefix: 'line.',\n        cLetter: 'c'\n      });\n      // TODO: I think it would be better to keep showing lines beyond the last line color\n      // but I'm not sure what color to give these lines - probably black or white\n      // depending on the background color?\n      return lineColor.length;\n    } else {\n      traceOut.line.color = defaultColor;\n    }\n  }\n  return Infinity;\n}\nfunction dimensionDefaults(dimensionIn, dimensionOut, parentOut, opts) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(dimensionIn, dimensionOut, attributes.dimensions, attr, dflt);\n  }\n  var values = coerce('values');\n  var visible = coerce('visible');\n  if (!(values && values.length)) {\n    visible = dimensionOut.visible = false;\n  }\n  if (visible) {\n    coerce('label');\n    coerce('tickvals');\n    coerce('ticktext');\n    coerce('tickformat');\n    var range = coerce('range');\n    dimensionOut._ax = {\n      _id: 'y',\n      type: 'linear',\n      showexponent: 'all',\n      exponentformat: 'B',\n      range: range\n    };\n    Axes.setConvert(dimensionOut._ax, opts.layout);\n    coerce('multiselect');\n    var constraintRange = coerce('constraintrange');\n    if (constraintRange) {\n      dimensionOut.constraintrange = axisBrush.cleanRanges(constraintRange, dimensionOut);\n    }\n  }\n}\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n  function coerce(attr, dflt) {\n    return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n  }\n  var dimensionsIn = traceIn.dimensions;\n  if (Array.isArray(dimensionsIn) && dimensionsIn.length > maxDimensionCount) {\n    Lib.log('parcoords traces support up to ' + maxDimensionCount + ' dimensions at the moment');\n    dimensionsIn.splice(maxDimensionCount);\n  }\n  var dimensions = handleArrayContainerDefaults(traceIn, traceOut, {\n    name: 'dimensions',\n    layout: layout,\n    handleItemDefaults: dimensionDefaults\n  });\n  var len = handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce);\n  handleDomainDefaults(traceOut, layout, coerce);\n  if (!Array.isArray(dimensions) || !dimensions.length) {\n    traceOut.visible = false;\n  }\n  mergeLength(traceOut, dimensions, 'values', len);\n\n  // make default font size 10px (default is 12),\n  // scale linearly with global font size\n  var fontDflt = Lib.extendFlat({}, layout.font, {\n    size: Math.round(layout.font.size / 1.2)\n  });\n  Lib.coerceFont(coerce, 'labelfont', fontDflt);\n  Lib.coerceFont(coerce, 'tickfont', fontDflt, {\n    autoShadowDflt: true\n  });\n  Lib.coerceFont(coerce, 'rangefont', fontDflt);\n  coerce('labelangle');\n  coerce('labelside');\n  coerce('unselected.line.color');\n  coerce('unselected.line.opacity');\n};","map":{"version":3,"names":["Lib","require","hasColorscale","colorscaleDefaults","handleDomainDefaults","defaults","handleArrayContainerDefaults","Axes","attributes","axisBrush","maxDimensionCount","mergeLength","handleLineDefaults","traceIn","traceOut","defaultColor","layout","coerce","lineColor","isArrayOrTypedArray","length","prefix","cLetter","line","color","Infinity","dimensionDefaults","dimensionIn","dimensionOut","parentOut","opts","attr","dflt","dimensions","values","visible","range","_ax","_id","type","showexponent","exponentformat","setConvert","constraintRange","constraintrange","cleanRanges","module","exports","supplyDefaults","dimensionsIn","Array","isArray","log","splice","name","handleItemDefaults","len","fontDflt","extendFlat","font","size","Math","round","coerceFont","autoShadowDflt"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/traces/parcoords/defaults.js"],"sourcesContent":["'use strict';\n\nvar Lib = require('../../lib');\nvar hasColorscale = require('../../components/colorscale/helpers').hasColorscale;\nvar colorscaleDefaults = require('../../components/colorscale/defaults');\nvar handleDomainDefaults = require('../../plots/domain').defaults;\nvar handleArrayContainerDefaults = require('../../plots/array_container_defaults');\nvar Axes = require('../../plots/cartesian/axes');\n\nvar attributes = require('./attributes');\nvar axisBrush = require('./axisbrush');\nvar maxDimensionCount = require('./constants').maxDimensionCount;\nvar mergeLength = require('./merge_length');\n\nfunction handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce) {\n    var lineColor = coerce('line.color', defaultColor);\n\n    if(hasColorscale(traceIn, 'line') && Lib.isArrayOrTypedArray(lineColor)) {\n        if(lineColor.length) {\n            coerce('line.colorscale');\n            colorscaleDefaults(traceIn, traceOut, layout, coerce, {prefix: 'line.', cLetter: 'c'});\n            // TODO: I think it would be better to keep showing lines beyond the last line color\n            // but I'm not sure what color to give these lines - probably black or white\n            // depending on the background color?\n            return lineColor.length;\n        } else {\n            traceOut.line.color = defaultColor;\n        }\n    }\n    return Infinity;\n}\n\nfunction dimensionDefaults(dimensionIn, dimensionOut, parentOut, opts) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(dimensionIn, dimensionOut, attributes.dimensions, attr, dflt);\n    }\n\n    var values = coerce('values');\n    var visible = coerce('visible');\n    if(!(values && values.length)) {\n        visible = dimensionOut.visible = false;\n    }\n\n    if(visible) {\n        coerce('label');\n        coerce('tickvals');\n        coerce('ticktext');\n        coerce('tickformat');\n        var range = coerce('range');\n\n        dimensionOut._ax = {\n            _id: 'y',\n            type: 'linear',\n            showexponent: 'all',\n            exponentformat: 'B',\n            range: range\n        };\n\n        Axes.setConvert(dimensionOut._ax, opts.layout);\n\n        coerce('multiselect');\n        var constraintRange = coerce('constraintrange');\n        if(constraintRange) {\n            dimensionOut.constraintrange = axisBrush.cleanRanges(constraintRange, dimensionOut);\n        }\n    }\n}\n\nmodule.exports = function supplyDefaults(traceIn, traceOut, defaultColor, layout) {\n    function coerce(attr, dflt) {\n        return Lib.coerce(traceIn, traceOut, attributes, attr, dflt);\n    }\n\n    var dimensionsIn = traceIn.dimensions;\n    if(Array.isArray(dimensionsIn) && dimensionsIn.length > maxDimensionCount) {\n        Lib.log('parcoords traces support up to ' + maxDimensionCount + ' dimensions at the moment');\n        dimensionsIn.splice(maxDimensionCount);\n    }\n\n    var dimensions = handleArrayContainerDefaults(traceIn, traceOut, {\n        name: 'dimensions',\n        layout: layout,\n        handleItemDefaults: dimensionDefaults\n    });\n\n    var len = handleLineDefaults(traceIn, traceOut, defaultColor, layout, coerce);\n\n    handleDomainDefaults(traceOut, layout, coerce);\n\n    if(!Array.isArray(dimensions) || !dimensions.length) {\n        traceOut.visible = false;\n    }\n\n    mergeLength(traceOut, dimensions, 'values', len);\n\n    // make default font size 10px (default is 12),\n    // scale linearly with global font size\n    var fontDflt = Lib.extendFlat({}, layout.font, {\n        size: Math.round(layout.font.size / 1.2)\n    });\n\n    Lib.coerceFont(coerce, 'labelfont', fontDflt);\n    Lib.coerceFont(coerce, 'tickfont', fontDflt, { autoShadowDflt: true });\n    Lib.coerceFont(coerce, 'rangefont', fontDflt);\n\n    coerce('labelangle');\n    coerce('labelside');\n\n    coerce('unselected.line.color');\n    coerce('unselected.line.opacity');\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}