{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.camelCase = void 0;\nvar CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9-]+$/;\nvar HYPHEN_REGEX = /-([a-z])/g;\nvar NO_HYPHEN_REGEX = /^[^-]+$/;\nvar VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nvar MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n/**\n * Checks whether to skip camelCase.\n */\nvar skipCamelCase = function (property) {\n  return !property || NO_HYPHEN_REGEX.test(property) || CUSTOM_PROPERTY_REGEX.test(property);\n};\n/**\n * Replacer that capitalizes first character.\n */\nvar capitalize = function (match, character) {\n  return character.toUpperCase();\n};\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nvar trimHyphen = function (match, prefix) {\n  return \"\".concat(prefix, \"-\");\n};\n/**\n * CamelCases a CSS property.\n */\nvar camelCase = function (property, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  if (skipCamelCase(property)) {\n    return property;\n  }\n  property = property.toLowerCase();\n  if (options.reactCompat) {\n    // `-ms` vendor prefix should not be capitalized\n    property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n  } else {\n    // for non-React, remove first hyphen so vendor prefix is not capitalized\n    property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n  }\n  return property.replace(HYPHEN_REGEX, capitalize);\n};\nexports.camelCase = camelCase;","map":{"version":3,"sources":["../src/utilities.ts"],"names":[],"mappings":";;;;;;AAAA,IAAM,qBAAqB,GAAG,mBAAmB;AACjD,IAAM,YAAY,GAAG,WAAW;AAChC,IAAM,eAAe,GAAG,SAAS;AACjC,IAAM,mBAAmB,GAAG,4BAA4B;AACxD,IAAM,sBAAsB,GAAG,SAAS;AAExC;;AAEG;AACH,IAAM,aAAa,GAAG,SAAA,CAAC,QAAgB,EAAA;EACrC,OAAA,CAAC,QAAQ,IACT,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAC9B,qBAAqB,CAAC,IAAI,CAAC,QAAQ,CAAC;AAFpC,CAEoC;AAEtC;;AAEG;AACH,IAAM,UAAU,GAAG,SAAA,CAAC,KAAa,EAAE,SAAiB,EAAA;EAClD,OAAA,SAAS,CAAC,WAAW,CAAA,CAAE;AAAvB,CAAuB;AAEzB;;AAEG;AACH,IAAM,UAAU,GAAG,SAAA,CAAC,KAAa,EAAE,MAAc,EAAA;EAAK,OAAA,EAAA,CAAA,MAAA,CAAG,MAAM,EAAA,GAAA,CAAG;AAAZ,CAAY;AASlE;;AAEG;AACI,IAAM,SAAS,GAAG,SAAA,CAAC,QAAgB,EAAE,OAA8B,EAAA;EAA9B,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;IAAA,OAAA,GAAA,CAAA,CAA8B;EAAA;EACxE,IAAI,aAAa,CAAC,QAAQ,CAAC,EAAE;IAC3B,OAAO,QAAQ;EAChB;EAED,QAAQ,GAAG,QAAQ,CAAC,WAAW,CAAA,CAAE;EAEjC,IAAI,OAAO,CAAC,WAAW,EAAE;IACvB;IACA,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,sBAAsB,EAAE,UAAU,CAAC;GAChE,MAAM;IACL;IACA,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,mBAAmB,EAAE,UAAU,CAAC;EAC7D;EAED,OAAO,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,UAAU,CAAC;AACnD,CAAC;AAhBY,OAAA,CAAA,SAAS,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.camelCase = void 0;\nvar CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9-]+$/;\nvar HYPHEN_REGEX = /-([a-z])/g;\nvar NO_HYPHEN_REGEX = /^[^-]+$/;\nvar VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nvar MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n/**\n * Checks whether to skip camelCase.\n */\nvar skipCamelCase = function (property) {\n    return !property ||\n        NO_HYPHEN_REGEX.test(property) ||\n        CUSTOM_PROPERTY_REGEX.test(property);\n};\n/**\n * Replacer that capitalizes first character.\n */\nvar capitalize = function (match, character) {\n    return character.toUpperCase();\n};\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nvar trimHyphen = function (match, prefix) { return \"\".concat(prefix, \"-\"); };\n/**\n * CamelCases a CSS property.\n */\nvar camelCase = function (property, options) {\n    if (options === void 0) { options = {}; }\n    if (skipCamelCase(property)) {\n        return property;\n    }\n    property = property.toLowerCase();\n    if (options.reactCompat) {\n        // `-ms` vendor prefix should not be capitalized\n        property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    else {\n        // for non-React, remove first hyphen so vendor prefix is not capitalized\n        property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    return property.replace(HYPHEN_REGEX, capitalize);\n};\nexports.camelCase = camelCase;\n//# sourceMappingURL=utilities.js.map"]},"metadata":{},"sourceType":"script"}