{"ast":null,"code":"'use strict';\n\nvar Lib = require('../lib');\nvar toImage = require('../plot_api/to_image');\nvar fileSaver = require('./filesaver');\nvar helpers = require('./helpers');\n\n/**\n * Plotly.downloadImage\n *\n * @param {object | string | HTML div} gd\n *   can either be a data/layout/config object\n *   or an existing graph <div>\n *   or an id to an existing graph <div>\n * @param {object} opts (see Plotly.toImage in ../plot_api/to_image)\n * @return {promise}\n */\nfunction downloadImage(gd, opts) {\n  var _gd;\n  if (!Lib.isPlainObject(gd)) _gd = Lib.getGraphDiv(gd);\n  opts = opts || {};\n  opts.format = opts.format || 'png';\n  opts.width = opts.width || null;\n  opts.height = opts.height || null;\n  opts.imageDataOnly = true;\n  return new Promise(function (resolve, reject) {\n    if (_gd && _gd._snapshotInProgress) {\n      reject(new Error('Snapshotting already in progress.'));\n    }\n\n    // see comments within svgtoimg for additional\n    //   discussion of problems with IE\n    //   can now draw to canvas, but CORS tainted canvas\n    //   does not allow toDataURL\n    //   svg format will work though\n    if (Lib.isIE() && opts.format !== 'svg') {\n      reject(new Error(helpers.MSG_IE_BAD_FORMAT));\n    }\n    if (_gd) _gd._snapshotInProgress = true;\n    var promise = toImage(gd, opts);\n    var filename = opts.filename || gd.fn || 'newplot';\n    filename += '.' + opts.format.replace('-', '.');\n    promise.then(function (result) {\n      if (_gd) _gd._snapshotInProgress = false;\n      return fileSaver(result, filename, opts.format);\n    }).then(function (name) {\n      resolve(name);\n    }).catch(function (err) {\n      if (_gd) _gd._snapshotInProgress = false;\n      reject(err);\n    });\n  });\n}\nmodule.exports = downloadImage;","map":{"version":3,"names":["Lib","require","toImage","fileSaver","helpers","downloadImage","gd","opts","_gd","isPlainObject","getGraphDiv","format","width","height","imageDataOnly","Promise","resolve","reject","_snapshotInProgress","Error","isIE","MSG_IE_BAD_FORMAT","promise","filename","fn","replace","then","result","name","catch","err","module","exports"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/snapshot/download.js"],"sourcesContent":["'use strict';\n\nvar Lib = require('../lib');\n\nvar toImage = require('../plot_api/to_image');\n\nvar fileSaver = require('./filesaver');\nvar helpers = require('./helpers');\n\n/**\n * Plotly.downloadImage\n *\n * @param {object | string | HTML div} gd\n *   can either be a data/layout/config object\n *   or an existing graph <div>\n *   or an id to an existing graph <div>\n * @param {object} opts (see Plotly.toImage in ../plot_api/to_image)\n * @return {promise}\n */\nfunction downloadImage(gd, opts) {\n    var _gd;\n    if(!Lib.isPlainObject(gd)) _gd = Lib.getGraphDiv(gd);\n\n    opts = opts || {};\n    opts.format = opts.format || 'png';\n    opts.width = opts.width || null;\n    opts.height = opts.height || null;\n    opts.imageDataOnly = true;\n\n    return new Promise(function(resolve, reject) {\n        if(_gd && _gd._snapshotInProgress) {\n            reject(new Error('Snapshotting already in progress.'));\n        }\n\n        // see comments within svgtoimg for additional\n        //   discussion of problems with IE\n        //   can now draw to canvas, but CORS tainted canvas\n        //   does not allow toDataURL\n        //   svg format will work though\n        if(Lib.isIE() && opts.format !== 'svg') {\n            reject(new Error(helpers.MSG_IE_BAD_FORMAT));\n        }\n\n        if(_gd) _gd._snapshotInProgress = true;\n        var promise = toImage(gd, opts);\n\n        var filename = opts.filename || gd.fn || 'newplot';\n        filename += '.' + opts.format.replace('-', '.');\n\n        promise.then(function(result) {\n            if(_gd) _gd._snapshotInProgress = false;\n            return fileSaver(result, filename, opts.format);\n        }).then(function(name) {\n            resolve(name);\n        }).catch(function(err) {\n            if(_gd) _gd._snapshotInProgress = false;\n            reject(err);\n        });\n    });\n}\n\nmodule.exports = downloadImage;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,GAAG,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE3B,IAAIC,OAAO,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAE7C,IAAIE,SAAS,GAAGF,OAAO,CAAC,aAAa,CAAC;AACtC,IAAIG,OAAO,GAAGH,OAAO,CAAC,WAAW,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,aAAaA,CAACC,EAAE,EAAEC,IAAI,EAAE;EAC7B,IAAIC,GAAG;EACP,IAAG,CAACR,GAAG,CAACS,aAAa,CAACH,EAAE,CAAC,EAAEE,GAAG,GAAGR,GAAG,CAACU,WAAW,CAACJ,EAAE,CAAC;EAEpDC,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EACjBA,IAAI,CAACI,MAAM,GAAGJ,IAAI,CAACI,MAAM,IAAI,KAAK;EAClCJ,IAAI,CAACK,KAAK,GAAGL,IAAI,CAACK,KAAK,IAAI,IAAI;EAC/BL,IAAI,CAACM,MAAM,GAAGN,IAAI,CAACM,MAAM,IAAI,IAAI;EACjCN,IAAI,CAACO,aAAa,GAAG,IAAI;EAEzB,OAAO,IAAIC,OAAO,CAAC,UAASC,OAAO,EAAEC,MAAM,EAAE;IACzC,IAAGT,GAAG,IAAIA,GAAG,CAACU,mBAAmB,EAAE;MAC/BD,MAAM,CAAC,IAAIE,KAAK,CAAC,mCAAmC,CAAC,CAAC;IAC1D;;IAEA;IACA;IACA;IACA;IACA;IACA,IAAGnB,GAAG,CAACoB,IAAI,CAAC,CAAC,IAAIb,IAAI,CAACI,MAAM,KAAK,KAAK,EAAE;MACpCM,MAAM,CAAC,IAAIE,KAAK,CAACf,OAAO,CAACiB,iBAAiB,CAAC,CAAC;IAChD;IAEA,IAAGb,GAAG,EAAEA,GAAG,CAACU,mBAAmB,GAAG,IAAI;IACtC,IAAII,OAAO,GAAGpB,OAAO,CAACI,EAAE,EAAEC,IAAI,CAAC;IAE/B,IAAIgB,QAAQ,GAAGhB,IAAI,CAACgB,QAAQ,IAAIjB,EAAE,CAACkB,EAAE,IAAI,SAAS;IAClDD,QAAQ,IAAI,GAAG,GAAGhB,IAAI,CAACI,MAAM,CAACc,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;IAE/CH,OAAO,CAACI,IAAI,CAAC,UAASC,MAAM,EAAE;MAC1B,IAAGnB,GAAG,EAAEA,GAAG,CAACU,mBAAmB,GAAG,KAAK;MACvC,OAAOf,SAAS,CAACwB,MAAM,EAAEJ,QAAQ,EAAEhB,IAAI,CAACI,MAAM,CAAC;IACnD,CAAC,CAAC,CAACe,IAAI,CAAC,UAASE,IAAI,EAAE;MACnBZ,OAAO,CAACY,IAAI,CAAC;IACjB,CAAC,CAAC,CAACC,KAAK,CAAC,UAASC,GAAG,EAAE;MACnB,IAAGtB,GAAG,EAAEA,GAAG,CAACU,mBAAmB,GAAG,KAAK;MACvCD,MAAM,CAACa,GAAG,CAAC;IACf,CAAC,CAAC;EACN,CAAC,CAAC;AACN;AAEAC,MAAM,CAACC,OAAO,GAAG3B,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script"}