{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatDOM = exports.formatAttributes = void 0;\nvar domhandler_1 = require(\"domhandler\");\nvar constants_1 = require(\"./constants\");\n/**\n * Gets case-sensitive tag name.\n *\n * @param tagName - Tag name in lowercase.\n * @returns - Case-sensitive tag name.\n */\nfunction getCaseSensitiveTagName(tagName) {\n  return constants_1.CASE_SENSITIVE_TAG_NAMES_MAP[tagName];\n}\n/**\n * Formats DOM attributes to a hash map.\n *\n * @param attributes - List of attributes.\n * @returns - Map of attribute name to value.\n */\nfunction formatAttributes(attributes) {\n  var map = {};\n  var index = 0;\n  var attributesLength = attributes.length;\n  // `NamedNodeMap` is array-like\n  for (; index < attributesLength; index++) {\n    var attribute = attributes[index];\n    map[attribute.name] = attribute.value;\n  }\n  return map;\n}\nexports.formatAttributes = formatAttributes;\n/**\n * Corrects the tag name if it is case-sensitive (SVG).\n * Otherwise, returns the lowercase tag name (HTML).\n *\n * @param tagName - Lowercase tag name.\n * @returns - Formatted tag name.\n */\nfunction formatTagName(tagName) {\n  tagName = tagName.toLowerCase();\n  var caseSensitiveTagName = getCaseSensitiveTagName(tagName);\n  if (caseSensitiveTagName) {\n    return caseSensitiveTagName;\n  }\n  return tagName;\n}\n/**\n * Transforms DOM nodes to `domhandler` nodes.\n *\n * @param nodes - DOM nodes.\n * @param parent - Parent node.\n * @param directive - Directive.\n * @returns - Nodes.\n */\nfunction formatDOM(nodes, parent, directive) {\n  if (parent === void 0) {\n    parent = null;\n  }\n  var domNodes = [];\n  var current;\n  var index = 0;\n  var nodesLength = nodes.length;\n  for (; index < nodesLength; index++) {\n    var node = nodes[index];\n    // set the node data given the type\n    switch (node.nodeType) {\n      case 1:\n        {\n          var tagName = formatTagName(node.nodeName);\n          // script, style, or tag\n          current = new domhandler_1.Element(tagName, formatAttributes(node.attributes));\n          current.children = formatDOM(\n          // template children are on content\n          tagName === 'template' ? node.content.childNodes : node.childNodes, current);\n          break;\n        }\n      case 3:\n        current = new domhandler_1.Text(node.nodeValue);\n        break;\n      case 8:\n        current = new domhandler_1.Comment(node.nodeValue);\n        break;\n      default:\n        continue;\n    }\n    // set previous node next\n    var prev = domNodes[index - 1] || null;\n    if (prev) {\n      prev.next = current;\n    }\n    // set properties for current node\n    current.parent = parent;\n    current.prev = prev;\n    current.next = null;\n    domNodes.push(current);\n  }\n  if (directive) {\n    current = new domhandler_1.ProcessingInstruction(directive.substring(0, directive.indexOf(' ')).toLowerCase(), directive);\n    current.next = domNodes[0] || null;\n    current.parent = parent;\n    domNodes.unshift(current);\n    if (domNodes[1]) {\n      domNodes[1].prev = domNodes[0];\n    }\n  }\n  return domNodes;\n}\nexports.formatDOM = formatDOM;","map":{"version":3,"sources":["../../src/client/utilities.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatDOM = exports.formatAttributes = void 0;\nvar domhandler_1 = require(\"domhandler\");\nvar constants_1 = require(\"./constants\");\n/**\n * Gets case-sensitive tag name.\n *\n * @param tagName - Tag name in lowercase.\n * @returns - Case-sensitive tag name.\n */\nfunction getCaseSensitiveTagName(tagName) {\n    return constants_1.CASE_SENSITIVE_TAG_NAMES_MAP[tagName];\n}\n/**\n * Formats DOM attributes to a hash map.\n *\n * @param attributes - List of attributes.\n * @returns - Map of attribute name to value.\n */\nfunction formatAttributes(attributes) {\n    var map = {};\n    var index = 0;\n    var attributesLength = attributes.length;\n    // `NamedNodeMap` is array-like\n    for (; index < attributesLength; index++) {\n        var attribute = attributes[index];\n        map[attribute.name] = attribute.value;\n    }\n    return map;\n}\nexports.formatAttributes = formatAttributes;\n/**\n * Corrects the tag name if it is case-sensitive (SVG).\n * Otherwise, returns the lowercase tag name (HTML).\n *\n * @param tagName - Lowercase tag name.\n * @returns - Formatted tag name.\n */\nfunction formatTagName(tagName) {\n    tagName = tagName.toLowerCase();\n    var caseSensitiveTagName = getCaseSensitiveTagName(tagName);\n    if (caseSensitiveTagName) {\n        return caseSensitiveTagName;\n    }\n    return tagName;\n}\n/**\n * Transforms DOM nodes to `domhandler` nodes.\n *\n * @param nodes - DOM nodes.\n * @param parent - Parent node.\n * @param directive - Directive.\n * @returns - Nodes.\n */\nfunction formatDOM(nodes, parent, directive) {\n    if (parent === void 0) { parent = null; }\n    var domNodes = [];\n    var current;\n    var index = 0;\n    var nodesLength = nodes.length;\n    for (; index < nodesLength; index++) {\n        var node = nodes[index];\n        // set the node data given the type\n        switch (node.nodeType) {\n            case 1: {\n                var tagName = formatTagName(node.nodeName);\n                // script, style, or tag\n                current = new domhandler_1.Element(tagName, formatAttributes(node.attributes));\n                current.children = formatDOM(\n                // template children are on content\n                tagName === 'template'\n                    ? node.content.childNodes\n                    : node.childNodes, current);\n                break;\n            }\n            case 3:\n                current = new domhandler_1.Text(node.nodeValue);\n                break;\n            case 8:\n                current = new domhandler_1.Comment(node.nodeValue);\n                break;\n            default:\n                continue;\n        }\n        // set previous node next\n        var prev = domNodes[index - 1] || null;\n        if (prev) {\n            prev.next = current;\n        }\n        // set properties for current node\n        current.parent = parent;\n        current.prev = prev;\n        current.next = null;\n        domNodes.push(current);\n    }\n    if (directive) {\n        current = new domhandler_1.ProcessingInstruction(directive.substring(0, directive.indexOf(' ')).toLowerCase(), directive);\n        current.next = domNodes[0] || null;\n        current.parent = parent;\n        domNodes.unshift(current);\n        if (domNodes[1]) {\n            domNodes[1].prev = domNodes[0];\n        }\n    }\n    return domNodes;\n}\nexports.formatDOM = formatDOM;\n//# sourceMappingURL=utilities.js.map"]},"metadata":{},"sourceType":"script"}