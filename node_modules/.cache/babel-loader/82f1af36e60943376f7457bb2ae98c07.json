{"ast":null,"code":"'use strict';\n\nvar Registry = require('../../registry');\nvar Plots = require('../../plots/plots');\nvar axisIds = require('../../plots/cartesian/axis_ids');\nvar Icons = require('../../fonts/ploticon');\nvar eraseActiveShape = require('../shapes/draw').eraseActiveShape;\nvar Lib = require('../../lib');\nvar _ = Lib._;\nvar modeBarButtons = module.exports = {};\n\n/**\n * ModeBar buttons configuration\n *\n * @param {string} name\n *      name / id of the buttons (for tracking)\n * @param {string} title\n *      text that appears while hovering over the button,\n *      enter null, false or '' for no hover text\n * @param {string} icon\n *      svg icon object associated with the button\n *      can be linked to Plotly.Icons to use the default plotly icons\n * @param {string} [gravity]\n *      icon positioning\n * @param {function} click\n *      click handler associated with the button, a function of\n *      'gd' (the main graph object) and\n *      'ev' (the event object)\n * @param {string} [attr]\n *      attribute associated with button,\n *      use this with 'val' to keep track of the state\n * @param {*} [val]\n *      initial 'attr' value, can be a function of gd\n * @param {boolean} [toggle]\n *      is the button a toggle button?\n */\nmodeBarButtons.toImage = {\n  name: 'toImage',\n  title: function (gd) {\n    var opts = gd._context.toImageButtonOptions || {};\n    var format = opts.format || 'png';\n    return format === 'png' ? _(gd, 'Download plot as a png') :\n    // legacy text\n    _(gd, 'Download plot'); // generic non-PNG text\n  },\n  icon: Icons.camera,\n  click: function (gd) {\n    var toImageButtonOptions = gd._context.toImageButtonOptions;\n    var opts = {\n      format: toImageButtonOptions.format || 'png'\n    };\n    Lib.notifier(_(gd, 'Taking snapshot - this may take a few seconds'), 'long');\n    if (opts.format !== 'svg' && Lib.isIE()) {\n      Lib.notifier(_(gd, 'IE only supports svg.  Changing format to svg.'), 'long');\n      opts.format = 'svg';\n    }\n    ['filename', 'width', 'height', 'scale'].forEach(function (key) {\n      if (key in toImageButtonOptions) {\n        opts[key] = toImageButtonOptions[key];\n      }\n    });\n    Registry.call('downloadImage', gd, opts).then(function (filename) {\n      Lib.notifier(_(gd, 'Snapshot succeeded') + ' - ' + filename, 'long');\n    }).catch(function () {\n      Lib.notifier(_(gd, 'Sorry, there was a problem downloading your snapshot!'), 'long');\n    });\n  }\n};\nmodeBarButtons.sendDataToCloud = {\n  name: 'sendDataToCloud',\n  title: function (gd) {\n    return _(gd, 'Edit in Chart Studio');\n  },\n  icon: Icons.disk,\n  click: function (gd) {\n    Plots.sendDataToCloud(gd);\n  }\n};\nmodeBarButtons.editInChartStudio = {\n  name: 'editInChartStudio',\n  title: function (gd) {\n    return _(gd, 'Edit in Chart Studio');\n  },\n  icon: Icons.pencil,\n  click: function (gd) {\n    Plots.sendDataToCloud(gd);\n  }\n};\nmodeBarButtons.zoom2d = {\n  name: 'zoom2d',\n  _cat: 'zoom',\n  title: function (gd) {\n    return _(gd, 'Zoom');\n  },\n  attr: 'dragmode',\n  val: 'zoom',\n  icon: Icons.zoombox,\n  click: handleCartesian\n};\nmodeBarButtons.pan2d = {\n  name: 'pan2d',\n  _cat: 'pan',\n  title: function (gd) {\n    return _(gd, 'Pan');\n  },\n  attr: 'dragmode',\n  val: 'pan',\n  icon: Icons.pan,\n  click: handleCartesian\n};\nmodeBarButtons.select2d = {\n  name: 'select2d',\n  _cat: 'select',\n  title: function (gd) {\n    return _(gd, 'Box Select');\n  },\n  attr: 'dragmode',\n  val: 'select',\n  icon: Icons.selectbox,\n  click: handleCartesian\n};\nmodeBarButtons.lasso2d = {\n  name: 'lasso2d',\n  _cat: 'lasso',\n  title: function (gd) {\n    return _(gd, 'Lasso Select');\n  },\n  attr: 'dragmode',\n  val: 'lasso',\n  icon: Icons.lasso,\n  click: handleCartesian\n};\nmodeBarButtons.drawclosedpath = {\n  name: 'drawclosedpath',\n  title: function (gd) {\n    return _(gd, 'Draw closed freeform');\n  },\n  attr: 'dragmode',\n  val: 'drawclosedpath',\n  icon: Icons.drawclosedpath,\n  click: handleCartesian\n};\nmodeBarButtons.drawopenpath = {\n  name: 'drawopenpath',\n  title: function (gd) {\n    return _(gd, 'Draw open freeform');\n  },\n  attr: 'dragmode',\n  val: 'drawopenpath',\n  icon: Icons.drawopenpath,\n  click: handleCartesian\n};\nmodeBarButtons.drawline = {\n  name: 'drawline',\n  title: function (gd) {\n    return _(gd, 'Draw line');\n  },\n  attr: 'dragmode',\n  val: 'drawline',\n  icon: Icons.drawline,\n  click: handleCartesian\n};\nmodeBarButtons.drawrect = {\n  name: 'drawrect',\n  title: function (gd) {\n    return _(gd, 'Draw rectangle');\n  },\n  attr: 'dragmode',\n  val: 'drawrect',\n  icon: Icons.drawrect,\n  click: handleCartesian\n};\nmodeBarButtons.drawcircle = {\n  name: 'drawcircle',\n  title: function (gd) {\n    return _(gd, 'Draw circle');\n  },\n  attr: 'dragmode',\n  val: 'drawcircle',\n  icon: Icons.drawcircle,\n  click: handleCartesian\n};\nmodeBarButtons.eraseshape = {\n  name: 'eraseshape',\n  title: function (gd) {\n    return _(gd, 'Erase active shape');\n  },\n  icon: Icons.eraseshape,\n  click: eraseActiveShape\n};\nmodeBarButtons.zoomIn2d = {\n  name: 'zoomIn2d',\n  _cat: 'zoomin',\n  title: function (gd) {\n    return _(gd, 'Zoom in');\n  },\n  attr: 'zoom',\n  val: 'in',\n  icon: Icons.zoom_plus,\n  click: handleCartesian\n};\nmodeBarButtons.zoomOut2d = {\n  name: 'zoomOut2d',\n  _cat: 'zoomout',\n  title: function (gd) {\n    return _(gd, 'Zoom out');\n  },\n  attr: 'zoom',\n  val: 'out',\n  icon: Icons.zoom_minus,\n  click: handleCartesian\n};\nmodeBarButtons.autoScale2d = {\n  name: 'autoScale2d',\n  _cat: 'autoscale',\n  title: function (gd) {\n    return _(gd, 'Autoscale');\n  },\n  attr: 'zoom',\n  val: 'auto',\n  icon: Icons.autoscale,\n  click: handleCartesian\n};\nmodeBarButtons.resetScale2d = {\n  name: 'resetScale2d',\n  _cat: 'resetscale',\n  title: function (gd) {\n    return _(gd, 'Reset axes');\n  },\n  attr: 'zoom',\n  val: 'reset',\n  icon: Icons.home,\n  click: handleCartesian\n};\nmodeBarButtons.hoverClosestCartesian = {\n  name: 'hoverClosestCartesian',\n  _cat: 'hoverclosest',\n  title: function (gd) {\n    return _(gd, 'Show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: 'closest',\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: handleCartesian\n};\nmodeBarButtons.hoverCompareCartesian = {\n  name: 'hoverCompareCartesian',\n  _cat: 'hoverCompare',\n  title: function (gd) {\n    return _(gd, 'Compare data on hover');\n  },\n  attr: 'hovermode',\n  val: function (gd) {\n    return gd._fullLayout._isHoriz ? 'y' : 'x';\n  },\n  icon: Icons.tooltip_compare,\n  gravity: 'ne',\n  click: handleCartesian\n};\nfunction handleCartesian(gd, ev) {\n  var button = ev.currentTarget;\n  var astr = button.getAttribute('data-attr');\n  var val = button.getAttribute('data-val') || true;\n  var fullLayout = gd._fullLayout;\n  var aobj = {};\n  var axList = axisIds.list(gd, null, true);\n  var allSpikesEnabled = fullLayout._cartesianSpikesEnabled;\n  var ax, i;\n  if (astr === 'zoom') {\n    var mag = val === 'in' ? 0.5 : 2;\n    var r0 = (1 + mag) / 2;\n    var r1 = (1 - mag) / 2;\n    var axName;\n    for (i = 0; i < axList.length; i++) {\n      ax = axList[i];\n      if (!ax.fixedrange) {\n        axName = ax._name;\n        if (val === 'auto') {\n          aobj[axName + '.autorange'] = true;\n        } else if (val === 'reset') {\n          if (ax._rangeInitial0 === undefined && ax._rangeInitial1 === undefined) {\n            aobj[axName + '.autorange'] = true;\n          } else if (ax._rangeInitial0 === undefined) {\n            aobj[axName + '.autorange'] = ax._autorangeInitial;\n            aobj[axName + '.range'] = [null, ax._rangeInitial1];\n          } else if (ax._rangeInitial1 === undefined) {\n            aobj[axName + '.range'] = [ax._rangeInitial0, null];\n            aobj[axName + '.autorange'] = ax._autorangeInitial;\n          } else {\n            aobj[axName + '.range'] = [ax._rangeInitial0, ax._rangeInitial1];\n          }\n\n          // N.B. \"reset\" also resets showspikes\n          if (ax._showSpikeInitial !== undefined) {\n            aobj[axName + '.showspikes'] = ax._showSpikeInitial;\n            if (allSpikesEnabled === 'on' && !ax._showSpikeInitial) {\n              allSpikesEnabled = 'off';\n            }\n          }\n        } else {\n          var rangeNow = [ax.r2l(ax.range[0]), ax.r2l(ax.range[1])];\n          var rangeNew = [r0 * rangeNow[0] + r1 * rangeNow[1], r0 * rangeNow[1] + r1 * rangeNow[0]];\n          aobj[axName + '.range[0]'] = ax.l2r(rangeNew[0]);\n          aobj[axName + '.range[1]'] = ax.l2r(rangeNew[1]);\n        }\n      }\n    }\n  } else {\n    // if ALL traces have orientation 'h', 'hovermode': 'x' otherwise: 'y'\n    if (astr === 'hovermode' && (val === 'x' || val === 'y')) {\n      val = fullLayout._isHoriz ? 'y' : 'x';\n      button.setAttribute('data-val', val);\n    }\n    aobj[astr] = val;\n  }\n  fullLayout._cartesianSpikesEnabled = allSpikesEnabled;\n  Registry.call('_guiRelayout', gd, aobj);\n}\nmodeBarButtons.zoom3d = {\n  name: 'zoom3d',\n  _cat: 'zoom',\n  title: function (gd) {\n    return _(gd, 'Zoom');\n  },\n  attr: 'scene.dragmode',\n  val: 'zoom',\n  icon: Icons.zoombox,\n  click: handleDrag3d\n};\nmodeBarButtons.pan3d = {\n  name: 'pan3d',\n  _cat: 'pan',\n  title: function (gd) {\n    return _(gd, 'Pan');\n  },\n  attr: 'scene.dragmode',\n  val: 'pan',\n  icon: Icons.pan,\n  click: handleDrag3d\n};\nmodeBarButtons.orbitRotation = {\n  name: 'orbitRotation',\n  title: function (gd) {\n    return _(gd, 'Orbital rotation');\n  },\n  attr: 'scene.dragmode',\n  val: 'orbit',\n  icon: Icons['3d_rotate'],\n  click: handleDrag3d\n};\nmodeBarButtons.tableRotation = {\n  name: 'tableRotation',\n  title: function (gd) {\n    return _(gd, 'Turntable rotation');\n  },\n  attr: 'scene.dragmode',\n  val: 'turntable',\n  icon: Icons['z-axis'],\n  click: handleDrag3d\n};\nfunction handleDrag3d(gd, ev) {\n  var button = ev.currentTarget;\n  var attr = button.getAttribute('data-attr');\n  var val = button.getAttribute('data-val') || true;\n  var sceneIds = gd._fullLayout._subplots.gl3d || [];\n  var layoutUpdate = {};\n  var parts = attr.split('.');\n  for (var i = 0; i < sceneIds.length; i++) {\n    layoutUpdate[sceneIds[i] + '.' + parts[1]] = val;\n  }\n\n  // for multi-type subplots\n  var val2d = val === 'pan' ? val : 'zoom';\n  layoutUpdate.dragmode = val2d;\n  Registry.call('_guiRelayout', gd, layoutUpdate);\n}\nmodeBarButtons.resetCameraDefault3d = {\n  name: 'resetCameraDefault3d',\n  _cat: 'resetCameraDefault',\n  title: function (gd) {\n    return _(gd, 'Reset camera to default');\n  },\n  attr: 'resetDefault',\n  icon: Icons.home,\n  click: handleCamera3d\n};\nmodeBarButtons.resetCameraLastSave3d = {\n  name: 'resetCameraLastSave3d',\n  _cat: 'resetCameraLastSave',\n  title: function (gd) {\n    return _(gd, 'Reset camera to last save');\n  },\n  attr: 'resetLastSave',\n  icon: Icons.movie,\n  click: handleCamera3d\n};\nfunction handleCamera3d(gd, ev) {\n  var button = ev.currentTarget;\n  var attr = button.getAttribute('data-attr');\n  var resetLastSave = attr === 'resetLastSave';\n  var resetDefault = attr === 'resetDefault';\n  var fullLayout = gd._fullLayout;\n  var sceneIds = fullLayout._subplots.gl3d || [];\n  var aobj = {};\n  for (var i = 0; i < sceneIds.length; i++) {\n    var sceneId = sceneIds[i];\n    var camera = sceneId + '.camera';\n    var aspectratio = sceneId + '.aspectratio';\n    var aspectmode = sceneId + '.aspectmode';\n    var scene = fullLayout[sceneId]._scene;\n    var didUpdate;\n    if (resetLastSave) {\n      aobj[camera + '.up'] = scene.viewInitial.up;\n      aobj[camera + '.eye'] = scene.viewInitial.eye;\n      aobj[camera + '.center'] = scene.viewInitial.center;\n      didUpdate = true;\n    } else if (resetDefault) {\n      aobj[camera + '.up'] = null;\n      aobj[camera + '.eye'] = null;\n      aobj[camera + '.center'] = null;\n      didUpdate = true;\n    }\n    if (didUpdate) {\n      aobj[aspectratio + '.x'] = scene.viewInitial.aspectratio.x;\n      aobj[aspectratio + '.y'] = scene.viewInitial.aspectratio.y;\n      aobj[aspectratio + '.z'] = scene.viewInitial.aspectratio.z;\n      aobj[aspectmode] = scene.viewInitial.aspectmode;\n    }\n  }\n  Registry.call('_guiRelayout', gd, aobj);\n}\nmodeBarButtons.hoverClosest3d = {\n  name: 'hoverClosest3d',\n  _cat: 'hoverclosest',\n  title: function (gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: null,\n  toggle: true,\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: handleHover3d\n};\nfunction getNextHover3d(gd, ev) {\n  var button = ev.currentTarget;\n  var val = button._previousVal;\n  var fullLayout = gd._fullLayout;\n  var sceneIds = fullLayout._subplots.gl3d || [];\n  var axes = ['xaxis', 'yaxis', 'zaxis'];\n\n  // initialize 'current spike' object to be stored in the DOM\n  var currentSpikes = {};\n  var layoutUpdate = {};\n  if (val) {\n    layoutUpdate = val;\n    button._previousVal = null;\n  } else {\n    for (var i = 0; i < sceneIds.length; i++) {\n      var sceneId = sceneIds[i];\n      var sceneLayout = fullLayout[sceneId];\n      var hovermodeAStr = sceneId + '.hovermode';\n      currentSpikes[hovermodeAStr] = sceneLayout.hovermode;\n      layoutUpdate[hovermodeAStr] = false;\n\n      // copy all the current spike attrs\n      for (var j = 0; j < 3; j++) {\n        var axis = axes[j];\n        var spikeAStr = sceneId + '.' + axis + '.showspikes';\n        layoutUpdate[spikeAStr] = false;\n        currentSpikes[spikeAStr] = sceneLayout[axis].showspikes;\n      }\n    }\n    button._previousVal = currentSpikes;\n  }\n  return layoutUpdate;\n}\nfunction handleHover3d(gd, ev) {\n  var layoutUpdate = getNextHover3d(gd, ev);\n  Registry.call('_guiRelayout', gd, layoutUpdate);\n}\nmodeBarButtons.zoomInGeo = {\n  name: 'zoomInGeo',\n  _cat: 'zoomin',\n  title: function (gd) {\n    return _(gd, 'Zoom in');\n  },\n  attr: 'zoom',\n  val: 'in',\n  icon: Icons.zoom_plus,\n  click: handleGeo\n};\nmodeBarButtons.zoomOutGeo = {\n  name: 'zoomOutGeo',\n  _cat: 'zoomout',\n  title: function (gd) {\n    return _(gd, 'Zoom out');\n  },\n  attr: 'zoom',\n  val: 'out',\n  icon: Icons.zoom_minus,\n  click: handleGeo\n};\nmodeBarButtons.resetGeo = {\n  name: 'resetGeo',\n  _cat: 'reset',\n  title: function (gd) {\n    return _(gd, 'Reset');\n  },\n  attr: 'reset',\n  val: null,\n  icon: Icons.autoscale,\n  click: handleGeo\n};\nmodeBarButtons.hoverClosestGeo = {\n  name: 'hoverClosestGeo',\n  _cat: 'hoverclosest',\n  title: function (gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: null,\n  toggle: true,\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: toggleHover\n};\nfunction handleGeo(gd, ev) {\n  var button = ev.currentTarget;\n  var attr = button.getAttribute('data-attr');\n  var val = button.getAttribute('data-val') || true;\n  var fullLayout = gd._fullLayout;\n  var geoIds = fullLayout._subplots.geo || [];\n  for (var i = 0; i < geoIds.length; i++) {\n    var id = geoIds[i];\n    var geoLayout = fullLayout[id];\n    if (attr === 'zoom') {\n      var scale = geoLayout.projection.scale;\n      var newScale = val === 'in' ? 2 * scale : 0.5 * scale;\n      Registry.call('_guiRelayout', gd, id + '.projection.scale', newScale);\n    }\n  }\n  if (attr === 'reset') {\n    resetView(gd, 'geo');\n  }\n}\nmodeBarButtons.hoverClosestGl2d = {\n  name: 'hoverClosestGl2d',\n  _cat: 'hoverclosest',\n  title: function (gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: null,\n  toggle: true,\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: toggleHover\n};\nmodeBarButtons.hoverClosestPie = {\n  name: 'hoverClosestPie',\n  _cat: 'hoverclosest',\n  title: function (gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: 'closest',\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: toggleHover\n};\nfunction getNextHover(gd) {\n  var fullLayout = gd._fullLayout;\n  if (fullLayout.hovermode) return false;\n  if (fullLayout._has('cartesian')) {\n    return fullLayout._isHoriz ? 'y' : 'x';\n  }\n  return 'closest';\n}\nfunction toggleHover(gd) {\n  var newHover = getNextHover(gd);\n  Registry.call('_guiRelayout', gd, 'hovermode', newHover);\n}\nmodeBarButtons.resetViewSankey = {\n  name: 'resetSankeyGroup',\n  title: function (gd) {\n    return _(gd, 'Reset view');\n  },\n  icon: Icons.home,\n  click: function (gd) {\n    var aObj = {\n      'node.groups': [],\n      'node.x': [],\n      'node.y': []\n    };\n    for (var i = 0; i < gd._fullData.length; i++) {\n      var viewInitial = gd._fullData[i]._viewInitial;\n      aObj['node.groups'].push(viewInitial.node.groups.slice());\n      aObj['node.x'].push(viewInitial.node.x.slice());\n      aObj['node.y'].push(viewInitial.node.y.slice());\n    }\n    Registry.call('restyle', gd, aObj);\n  }\n};\n\n// buttons when more then one plot types are present\n\nmodeBarButtons.toggleHover = {\n  name: 'toggleHover',\n  title: function (gd) {\n    return _(gd, 'Toggle show closest data on hover');\n  },\n  attr: 'hovermode',\n  val: null,\n  toggle: true,\n  icon: Icons.tooltip_basic,\n  gravity: 'ne',\n  click: function (gd, ev) {\n    var layoutUpdate = getNextHover3d(gd, ev);\n    layoutUpdate.hovermode = getNextHover(gd);\n    Registry.call('_guiRelayout', gd, layoutUpdate);\n  }\n};\nmodeBarButtons.resetViews = {\n  name: 'resetViews',\n  title: function (gd) {\n    return _(gd, 'Reset views');\n  },\n  icon: Icons.home,\n  click: function (gd, ev) {\n    var button = ev.currentTarget;\n    button.setAttribute('data-attr', 'zoom');\n    button.setAttribute('data-val', 'reset');\n    handleCartesian(gd, ev);\n    button.setAttribute('data-attr', 'resetLastSave');\n    handleCamera3d(gd, ev);\n    resetView(gd, 'geo');\n    resetView(gd, 'mapbox');\n    resetView(gd, 'map');\n  }\n};\nmodeBarButtons.toggleSpikelines = {\n  name: 'toggleSpikelines',\n  title: function (gd) {\n    return _(gd, 'Toggle Spike Lines');\n  },\n  icon: Icons.spikeline,\n  attr: '_cartesianSpikesEnabled',\n  val: 'on',\n  click: function (gd) {\n    var fullLayout = gd._fullLayout;\n    var allSpikesEnabled = fullLayout._cartesianSpikesEnabled;\n    fullLayout._cartesianSpikesEnabled = allSpikesEnabled === 'on' ? 'off' : 'on';\n    Registry.call('_guiRelayout', gd, setSpikelineVisibility(gd));\n  }\n};\nfunction setSpikelineVisibility(gd) {\n  var fullLayout = gd._fullLayout;\n  var areSpikesOn = fullLayout._cartesianSpikesEnabled === 'on';\n  var axList = axisIds.list(gd, null, true);\n  var aobj = {};\n  for (var i = 0; i < axList.length; i++) {\n    var ax = axList[i];\n    aobj[ax._name + '.showspikes'] = areSpikesOn ? true : ax._showSpikeInitial;\n  }\n  return aobj;\n}\nmodeBarButtons.resetViewMapbox = {\n  name: 'resetViewMapbox',\n  _cat: 'resetView',\n  title: function (gd) {\n    return _(gd, 'Reset view');\n  },\n  attr: 'reset',\n  icon: Icons.home,\n  click: function (gd) {\n    resetView(gd, 'mapbox');\n  }\n};\nmodeBarButtons.resetViewMap = {\n  name: 'resetViewMap',\n  _cat: 'resetView',\n  title: function (gd) {\n    return _(gd, 'Reset view');\n  },\n  attr: 'reset',\n  icon: Icons.home,\n  click: function (gd) {\n    resetView(gd, 'map');\n  }\n};\nmodeBarButtons.zoomInMapbox = {\n  name: 'zoomInMapbox',\n  _cat: 'zoomin',\n  title: function (gd) {\n    return _(gd, 'Zoom in');\n  },\n  attr: 'zoom',\n  val: 'in',\n  icon: Icons.zoom_plus,\n  click: handleMapboxZoom\n};\nmodeBarButtons.zoomInMap = {\n  name: 'zoomInMap',\n  _cat: 'zoomin',\n  title: function (gd) {\n    return _(gd, 'Zoom in');\n  },\n  attr: 'zoom',\n  val: 'in',\n  icon: Icons.zoom_plus,\n  click: handleMapZoom\n};\nmodeBarButtons.zoomOutMapbox = {\n  name: 'zoomOutMapbox',\n  _cat: 'zoomout',\n  title: function (gd) {\n    return _(gd, 'Zoom out');\n  },\n  attr: 'zoom',\n  val: 'out',\n  icon: Icons.zoom_minus,\n  click: handleMapboxZoom\n};\nmodeBarButtons.zoomOutMap = {\n  name: 'zoomOutMap',\n  _cat: 'zoomout',\n  title: function (gd) {\n    return _(gd, 'Zoom out');\n  },\n  attr: 'zoom',\n  val: 'out',\n  icon: Icons.zoom_minus,\n  click: handleMapZoom\n};\nfunction handleMapboxZoom(gd, ev) {\n  _handleMapZoom(gd, ev, 'mapbox');\n}\nfunction handleMapZoom(gd, ev) {\n  _handleMapZoom(gd, ev, 'map');\n}\nfunction _handleMapZoom(gd, ev, mapType) {\n  var button = ev.currentTarget;\n  var val = button.getAttribute('data-val');\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots[mapType] || [];\n  var scalar = 1.05;\n  var aObj = {};\n  for (var i = 0; i < subplotIds.length; i++) {\n    var id = subplotIds[i];\n    var current = fullLayout[id].zoom;\n    var next = val === 'in' ? scalar * current : current / scalar;\n    aObj[id + '.zoom'] = next;\n  }\n  Registry.call('_guiRelayout', gd, aObj);\n}\nfunction resetView(gd, subplotType) {\n  var fullLayout = gd._fullLayout;\n  var subplotIds = fullLayout._subplots[subplotType] || [];\n  var aObj = {};\n  for (var i = 0; i < subplotIds.length; i++) {\n    var id = subplotIds[i];\n    var subplotObj = fullLayout[id]._subplot;\n    var viewInitial = subplotObj.viewInitial;\n    var viewKeys = Object.keys(viewInitial);\n    for (var j = 0; j < viewKeys.length; j++) {\n      var key = viewKeys[j];\n      aObj[id + '.' + key] = viewInitial[key];\n    }\n  }\n  Registry.call('_guiRelayout', gd, aObj);\n}","map":{"version":3,"names":["Registry","require","Plots","axisIds","Icons","eraseActiveShape","Lib","_","modeBarButtons","module","exports","toImage","name","title","gd","opts","_context","toImageButtonOptions","format","icon","camera","click","notifier","isIE","forEach","key","call","then","filename","catch","sendDataToCloud","disk","editInChartStudio","pencil","zoom2d","_cat","attr","val","zoombox","handleCartesian","pan2d","pan","select2d","selectbox","lasso2d","lasso","drawclosedpath","drawopenpath","drawline","drawrect","drawcircle","eraseshape","zoomIn2d","zoom_plus","zoomOut2d","zoom_minus","autoScale2d","autoscale","resetScale2d","home","hoverClosestCartesian","tooltip_basic","gravity","hoverCompareCartesian","_fullLayout","_isHoriz","tooltip_compare","ev","button","currentTarget","astr","getAttribute","fullLayout","aobj","axList","list","allSpikesEnabled","_cartesianSpikesEnabled","ax","i","mag","r0","r1","axName","length","fixedrange","_name","_rangeInitial0","undefined","_rangeInitial1","_autorangeInitial","_showSpikeInitial","rangeNow","r2l","range","rangeNew","l2r","setAttribute","zoom3d","handleDrag3d","pan3d","orbitRotation","tableRotation","sceneIds","_subplots","gl3d","layoutUpdate","parts","split","val2d","dragmode","resetCameraDefault3d","handleCamera3d","resetCameraLastSave3d","movie","resetLastSave","resetDefault","sceneId","aspectratio","aspectmode","scene","_scene","didUpdate","viewInitial","up","eye","center","x","y","z","hoverClosest3d","toggle","handleHover3d","getNextHover3d","_previousVal","axes","currentSpikes","sceneLayout","hovermodeAStr","hovermode","j","axis","spikeAStr","showspikes","zoomInGeo","handleGeo","zoomOutGeo","resetGeo","hoverClosestGeo","toggleHover","geoIds","geo","id","geoLayout","scale","projection","newScale","resetView","hoverClosestGl2d","hoverClosestPie","getNextHover","_has","newHover","resetViewSankey","aObj","_fullData","_viewInitial","push","node","groups","slice","resetViews","toggleSpikelines","spikeline","setSpikelineVisibility","areSpikesOn","resetViewMapbox","resetViewMap","zoomInMapbox","handleMapboxZoom","zoomInMap","handleMapZoom","zoomOutMapbox","zoomOutMap","_handleMapZoom","mapType","subplotIds","scalar","current","zoom","next","subplotType","subplotObj","_subplot","viewKeys","Object","keys"],"sources":["E:/tog_workspace/TestFabric_main/TestFabric-main/node_modules/plotly.js/src/components/modebar/buttons.js"],"sourcesContent":["'use strict';\n\nvar Registry = require('../../registry');\nvar Plots = require('../../plots/plots');\nvar axisIds = require('../../plots/cartesian/axis_ids');\nvar Icons = require('../../fonts/ploticon');\nvar eraseActiveShape = require('../shapes/draw').eraseActiveShape;\nvar Lib = require('../../lib');\nvar _ = Lib._;\n\nvar modeBarButtons = module.exports = {};\n\n/**\n * ModeBar buttons configuration\n *\n * @param {string} name\n *      name / id of the buttons (for tracking)\n * @param {string} title\n *      text that appears while hovering over the button,\n *      enter null, false or '' for no hover text\n * @param {string} icon\n *      svg icon object associated with the button\n *      can be linked to Plotly.Icons to use the default plotly icons\n * @param {string} [gravity]\n *      icon positioning\n * @param {function} click\n *      click handler associated with the button, a function of\n *      'gd' (the main graph object) and\n *      'ev' (the event object)\n * @param {string} [attr]\n *      attribute associated with button,\n *      use this with 'val' to keep track of the state\n * @param {*} [val]\n *      initial 'attr' value, can be a function of gd\n * @param {boolean} [toggle]\n *      is the button a toggle button?\n */\nmodeBarButtons.toImage = {\n    name: 'toImage',\n    title: function(gd) {\n        var opts = gd._context.toImageButtonOptions || {};\n        var format = opts.format || 'png';\n        return format === 'png' ?\n            _(gd, 'Download plot as a png') : // legacy text\n            _(gd, 'Download plot'); // generic non-PNG text\n    },\n    icon: Icons.camera,\n    click: function(gd) {\n        var toImageButtonOptions = gd._context.toImageButtonOptions;\n        var opts = {format: toImageButtonOptions.format || 'png'};\n\n        Lib.notifier(_(gd, 'Taking snapshot - this may take a few seconds'), 'long');\n\n        if(opts.format !== 'svg' && Lib.isIE()) {\n            Lib.notifier(_(gd, 'IE only supports svg.  Changing format to svg.'), 'long');\n            opts.format = 'svg';\n        }\n\n        ['filename', 'width', 'height', 'scale'].forEach(function(key) {\n            if(key in toImageButtonOptions) {\n                opts[key] = toImageButtonOptions[key];\n            }\n        });\n\n        Registry.call('downloadImage', gd, opts)\n          .then(function(filename) {\n              Lib.notifier(_(gd, 'Snapshot succeeded') + ' - ' + filename, 'long');\n          })\n          .catch(function() {\n              Lib.notifier(_(gd, 'Sorry, there was a problem downloading your snapshot!'), 'long');\n          });\n    }\n};\n\nmodeBarButtons.sendDataToCloud = {\n    name: 'sendDataToCloud',\n    title: function(gd) { return _(gd, 'Edit in Chart Studio'); },\n    icon: Icons.disk,\n    click: function(gd) {\n        Plots.sendDataToCloud(gd);\n    }\n};\n\nmodeBarButtons.editInChartStudio = {\n    name: 'editInChartStudio',\n    title: function(gd) { return _(gd, 'Edit in Chart Studio'); },\n    icon: Icons.pencil,\n    click: function(gd) {\n        Plots.sendDataToCloud(gd);\n    }\n};\n\nmodeBarButtons.zoom2d = {\n    name: 'zoom2d',\n    _cat: 'zoom',\n    title: function(gd) { return _(gd, 'Zoom'); },\n    attr: 'dragmode',\n    val: 'zoom',\n    icon: Icons.zoombox,\n    click: handleCartesian\n};\n\nmodeBarButtons.pan2d = {\n    name: 'pan2d',\n    _cat: 'pan',\n    title: function(gd) { return _(gd, 'Pan'); },\n    attr: 'dragmode',\n    val: 'pan',\n    icon: Icons.pan,\n    click: handleCartesian\n};\n\nmodeBarButtons.select2d = {\n    name: 'select2d',\n    _cat: 'select',\n    title: function(gd) { return _(gd, 'Box Select'); },\n    attr: 'dragmode',\n    val: 'select',\n    icon: Icons.selectbox,\n    click: handleCartesian\n};\n\nmodeBarButtons.lasso2d = {\n    name: 'lasso2d',\n    _cat: 'lasso',\n    title: function(gd) { return _(gd, 'Lasso Select'); },\n    attr: 'dragmode',\n    val: 'lasso',\n    icon: Icons.lasso,\n    click: handleCartesian\n};\n\nmodeBarButtons.drawclosedpath = {\n    name: 'drawclosedpath',\n    title: function(gd) { return _(gd, 'Draw closed freeform'); },\n    attr: 'dragmode',\n    val: 'drawclosedpath',\n    icon: Icons.drawclosedpath,\n    click: handleCartesian\n};\n\nmodeBarButtons.drawopenpath = {\n    name: 'drawopenpath',\n    title: function(gd) { return _(gd, 'Draw open freeform'); },\n    attr: 'dragmode',\n    val: 'drawopenpath',\n    icon: Icons.drawopenpath,\n    click: handleCartesian\n};\n\nmodeBarButtons.drawline = {\n    name: 'drawline',\n    title: function(gd) { return _(gd, 'Draw line'); },\n    attr: 'dragmode',\n    val: 'drawline',\n    icon: Icons.drawline,\n    click: handleCartesian\n};\n\nmodeBarButtons.drawrect = {\n    name: 'drawrect',\n    title: function(gd) { return _(gd, 'Draw rectangle'); },\n    attr: 'dragmode',\n    val: 'drawrect',\n    icon: Icons.drawrect,\n    click: handleCartesian\n};\n\nmodeBarButtons.drawcircle = {\n    name: 'drawcircle',\n    title: function(gd) { return _(gd, 'Draw circle'); },\n    attr: 'dragmode',\n    val: 'drawcircle',\n    icon: Icons.drawcircle,\n    click: handleCartesian\n};\n\nmodeBarButtons.eraseshape = {\n    name: 'eraseshape',\n    title: function(gd) { return _(gd, 'Erase active shape'); },\n    icon: Icons.eraseshape,\n    click: eraseActiveShape\n};\n\nmodeBarButtons.zoomIn2d = {\n    name: 'zoomIn2d',\n    _cat: 'zoomin',\n    title: function(gd) { return _(gd, 'Zoom in'); },\n    attr: 'zoom',\n    val: 'in',\n    icon: Icons.zoom_plus,\n    click: handleCartesian\n};\n\nmodeBarButtons.zoomOut2d = {\n    name: 'zoomOut2d',\n    _cat: 'zoomout',\n    title: function(gd) { return _(gd, 'Zoom out'); },\n    attr: 'zoom',\n    val: 'out',\n    icon: Icons.zoom_minus,\n    click: handleCartesian\n};\n\nmodeBarButtons.autoScale2d = {\n    name: 'autoScale2d',\n    _cat: 'autoscale',\n    title: function(gd) { return _(gd, 'Autoscale'); },\n    attr: 'zoom',\n    val: 'auto',\n    icon: Icons.autoscale,\n    click: handleCartesian\n};\n\nmodeBarButtons.resetScale2d = {\n    name: 'resetScale2d',\n    _cat: 'resetscale',\n    title: function(gd) { return _(gd, 'Reset axes'); },\n    attr: 'zoom',\n    val: 'reset',\n    icon: Icons.home,\n    click: handleCartesian\n};\n\nmodeBarButtons.hoverClosestCartesian = {\n    name: 'hoverClosestCartesian',\n    _cat: 'hoverclosest',\n    title: function(gd) { return _(gd, 'Show closest data on hover'); },\n    attr: 'hovermode',\n    val: 'closest',\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: handleCartesian\n};\n\nmodeBarButtons.hoverCompareCartesian = {\n    name: 'hoverCompareCartesian',\n    _cat: 'hoverCompare',\n    title: function(gd) { return _(gd, 'Compare data on hover'); },\n    attr: 'hovermode',\n    val: function(gd) {\n        return gd._fullLayout._isHoriz ? 'y' : 'x';\n    },\n    icon: Icons.tooltip_compare,\n    gravity: 'ne',\n    click: handleCartesian\n};\n\nfunction handleCartesian(gd, ev) {\n    var button = ev.currentTarget;\n    var astr = button.getAttribute('data-attr');\n    var val = button.getAttribute('data-val') || true;\n    var fullLayout = gd._fullLayout;\n    var aobj = {};\n    var axList = axisIds.list(gd, null, true);\n    var allSpikesEnabled = fullLayout._cartesianSpikesEnabled;\n\n    var ax, i;\n\n    if(astr === 'zoom') {\n        var mag = (val === 'in') ? 0.5 : 2;\n        var r0 = (1 + mag) / 2;\n        var r1 = (1 - mag) / 2;\n        var axName;\n\n        for(i = 0; i < axList.length; i++) {\n            ax = axList[i];\n\n            if(!ax.fixedrange) {\n                axName = ax._name;\n                if(val === 'auto') {\n                    aobj[axName + '.autorange'] = true;\n                } else if(val === 'reset') {\n                    if(ax._rangeInitial0 === undefined && ax._rangeInitial1 === undefined) {\n                        aobj[axName + '.autorange'] = true;\n                    } else if(ax._rangeInitial0 === undefined) {\n                        aobj[axName + '.autorange'] = ax._autorangeInitial;\n                        aobj[axName + '.range'] = [null, ax._rangeInitial1];\n                    } else if(ax._rangeInitial1 === undefined) {\n                        aobj[axName + '.range'] = [ax._rangeInitial0, null];\n                        aobj[axName + '.autorange'] = ax._autorangeInitial;\n                    } else {\n                        aobj[axName + '.range'] = [ax._rangeInitial0, ax._rangeInitial1];\n                    }\n\n                    // N.B. \"reset\" also resets showspikes\n                    if(ax._showSpikeInitial !== undefined) {\n                        aobj[axName + '.showspikes'] = ax._showSpikeInitial;\n                        if(allSpikesEnabled === 'on' && !ax._showSpikeInitial) {\n                            allSpikesEnabled = 'off';\n                        }\n                    }\n                } else {\n                    var rangeNow = [\n                        ax.r2l(ax.range[0]),\n                        ax.r2l(ax.range[1]),\n                    ];\n\n                    var rangeNew = [\n                        r0 * rangeNow[0] + r1 * rangeNow[1],\n                        r0 * rangeNow[1] + r1 * rangeNow[0]\n                    ];\n\n                    aobj[axName + '.range[0]'] = ax.l2r(rangeNew[0]);\n                    aobj[axName + '.range[1]'] = ax.l2r(rangeNew[1]);\n                }\n            }\n        }\n    } else {\n        // if ALL traces have orientation 'h', 'hovermode': 'x' otherwise: 'y'\n        if(astr === 'hovermode' && (val === 'x' || val === 'y')) {\n            val = fullLayout._isHoriz ? 'y' : 'x';\n            button.setAttribute('data-val', val);\n        }\n\n        aobj[astr] = val;\n    }\n\n    fullLayout._cartesianSpikesEnabled = allSpikesEnabled;\n\n    Registry.call('_guiRelayout', gd, aobj);\n}\n\nmodeBarButtons.zoom3d = {\n    name: 'zoom3d',\n    _cat: 'zoom',\n    title: function(gd) { return _(gd, 'Zoom'); },\n    attr: 'scene.dragmode',\n    val: 'zoom',\n    icon: Icons.zoombox,\n    click: handleDrag3d\n};\n\nmodeBarButtons.pan3d = {\n    name: 'pan3d',\n    _cat: 'pan',\n    title: function(gd) { return _(gd, 'Pan'); },\n    attr: 'scene.dragmode',\n    val: 'pan',\n    icon: Icons.pan,\n    click: handleDrag3d\n};\n\nmodeBarButtons.orbitRotation = {\n    name: 'orbitRotation',\n    title: function(gd) { return _(gd, 'Orbital rotation'); },\n    attr: 'scene.dragmode',\n    val: 'orbit',\n    icon: Icons['3d_rotate'],\n    click: handleDrag3d\n};\n\nmodeBarButtons.tableRotation = {\n    name: 'tableRotation',\n    title: function(gd) { return _(gd, 'Turntable rotation'); },\n    attr: 'scene.dragmode',\n    val: 'turntable',\n    icon: Icons['z-axis'],\n    click: handleDrag3d\n};\n\nfunction handleDrag3d(gd, ev) {\n    var button = ev.currentTarget;\n    var attr = button.getAttribute('data-attr');\n    var val = button.getAttribute('data-val') || true;\n    var sceneIds = gd._fullLayout._subplots.gl3d || [];\n    var layoutUpdate = {};\n\n    var parts = attr.split('.');\n\n    for(var i = 0; i < sceneIds.length; i++) {\n        layoutUpdate[sceneIds[i] + '.' + parts[1]] = val;\n    }\n\n    // for multi-type subplots\n    var val2d = (val === 'pan') ? val : 'zoom';\n    layoutUpdate.dragmode = val2d;\n\n    Registry.call('_guiRelayout', gd, layoutUpdate);\n}\n\nmodeBarButtons.resetCameraDefault3d = {\n    name: 'resetCameraDefault3d',\n    _cat: 'resetCameraDefault',\n    title: function(gd) { return _(gd, 'Reset camera to default'); },\n    attr: 'resetDefault',\n    icon: Icons.home,\n    click: handleCamera3d\n};\n\nmodeBarButtons.resetCameraLastSave3d = {\n    name: 'resetCameraLastSave3d',\n    _cat: 'resetCameraLastSave',\n    title: function(gd) { return _(gd, 'Reset camera to last save'); },\n    attr: 'resetLastSave',\n    icon: Icons.movie,\n    click: handleCamera3d\n};\n\nfunction handleCamera3d(gd, ev) {\n    var button = ev.currentTarget;\n    var attr = button.getAttribute('data-attr');\n    var resetLastSave = attr === 'resetLastSave';\n    var resetDefault = attr === 'resetDefault';\n\n    var fullLayout = gd._fullLayout;\n    var sceneIds = fullLayout._subplots.gl3d || [];\n    var aobj = {};\n\n    for(var i = 0; i < sceneIds.length; i++) {\n        var sceneId = sceneIds[i];\n        var camera = sceneId + '.camera';\n        var aspectratio = sceneId + '.aspectratio';\n        var aspectmode = sceneId + '.aspectmode';\n        var scene = fullLayout[sceneId]._scene;\n        var didUpdate;\n\n        if(resetLastSave) {\n            aobj[camera + '.up'] = scene.viewInitial.up;\n            aobj[camera + '.eye'] = scene.viewInitial.eye;\n            aobj[camera + '.center'] = scene.viewInitial.center;\n            didUpdate = true;\n        } else if(resetDefault) {\n            aobj[camera + '.up'] = null;\n            aobj[camera + '.eye'] = null;\n            aobj[camera + '.center'] = null;\n            didUpdate = true;\n        }\n\n        if(didUpdate) {\n            aobj[aspectratio + '.x'] = scene.viewInitial.aspectratio.x;\n            aobj[aspectratio + '.y'] = scene.viewInitial.aspectratio.y;\n            aobj[aspectratio + '.z'] = scene.viewInitial.aspectratio.z;\n            aobj[aspectmode] = scene.viewInitial.aspectmode;\n        }\n    }\n\n    Registry.call('_guiRelayout', gd, aobj);\n}\n\nmodeBarButtons.hoverClosest3d = {\n    name: 'hoverClosest3d',\n    _cat: 'hoverclosest',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: null,\n    toggle: true,\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: handleHover3d\n};\n\nfunction getNextHover3d(gd, ev) {\n    var button = ev.currentTarget;\n    var val = button._previousVal;\n    var fullLayout = gd._fullLayout;\n    var sceneIds = fullLayout._subplots.gl3d || [];\n\n    var axes = ['xaxis', 'yaxis', 'zaxis'];\n\n    // initialize 'current spike' object to be stored in the DOM\n    var currentSpikes = {};\n    var layoutUpdate = {};\n\n    if(val) {\n        layoutUpdate = val;\n        button._previousVal = null;\n    } else {\n        for(var i = 0; i < sceneIds.length; i++) {\n            var sceneId = sceneIds[i];\n            var sceneLayout = fullLayout[sceneId];\n\n            var hovermodeAStr = sceneId + '.hovermode';\n            currentSpikes[hovermodeAStr] = sceneLayout.hovermode;\n            layoutUpdate[hovermodeAStr] = false;\n\n            // copy all the current spike attrs\n            for(var j = 0; j < 3; j++) {\n                var axis = axes[j];\n                var spikeAStr = sceneId + '.' + axis + '.showspikes';\n                layoutUpdate[spikeAStr] = false;\n                currentSpikes[spikeAStr] = sceneLayout[axis].showspikes;\n            }\n        }\n\n        button._previousVal = currentSpikes;\n    }\n    return layoutUpdate;\n}\n\nfunction handleHover3d(gd, ev) {\n    var layoutUpdate = getNextHover3d(gd, ev);\n    Registry.call('_guiRelayout', gd, layoutUpdate);\n}\n\nmodeBarButtons.zoomInGeo = {\n    name: 'zoomInGeo',\n    _cat: 'zoomin',\n    title: function(gd) { return _(gd, 'Zoom in'); },\n    attr: 'zoom',\n    val: 'in',\n    icon: Icons.zoom_plus,\n    click: handleGeo\n};\n\nmodeBarButtons.zoomOutGeo = {\n    name: 'zoomOutGeo',\n    _cat: 'zoomout',\n    title: function(gd) { return _(gd, 'Zoom out'); },\n    attr: 'zoom',\n    val: 'out',\n    icon: Icons.zoom_minus,\n    click: handleGeo\n};\n\nmodeBarButtons.resetGeo = {\n    name: 'resetGeo',\n    _cat: 'reset',\n    title: function(gd) { return _(gd, 'Reset'); },\n    attr: 'reset',\n    val: null,\n    icon: Icons.autoscale,\n    click: handleGeo\n};\n\nmodeBarButtons.hoverClosestGeo = {\n    name: 'hoverClosestGeo',\n    _cat: 'hoverclosest',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: null,\n    toggle: true,\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: toggleHover\n};\n\nfunction handleGeo(gd, ev) {\n    var button = ev.currentTarget;\n    var attr = button.getAttribute('data-attr');\n    var val = button.getAttribute('data-val') || true;\n    var fullLayout = gd._fullLayout;\n    var geoIds = fullLayout._subplots.geo || [];\n\n    for(var i = 0; i < geoIds.length; i++) {\n        var id = geoIds[i];\n        var geoLayout = fullLayout[id];\n\n        if(attr === 'zoom') {\n            var scale = geoLayout.projection.scale;\n            var newScale = (val === 'in') ? 2 * scale : 0.5 * scale;\n\n            Registry.call('_guiRelayout', gd, id + '.projection.scale', newScale);\n        }\n    }\n\n    if(attr === 'reset') {\n        resetView(gd, 'geo');\n    }\n}\n\nmodeBarButtons.hoverClosestGl2d = {\n    name: 'hoverClosestGl2d',\n    _cat: 'hoverclosest',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: null,\n    toggle: true,\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: toggleHover\n};\n\nmodeBarButtons.hoverClosestPie = {\n    name: 'hoverClosestPie',\n    _cat: 'hoverclosest',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: 'closest',\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: toggleHover\n};\n\nfunction getNextHover(gd) {\n    var fullLayout = gd._fullLayout;\n\n    if(fullLayout.hovermode) return false;\n\n    if(fullLayout._has('cartesian')) {\n        return fullLayout._isHoriz ? 'y' : 'x';\n    }\n    return 'closest';\n}\n\nfunction toggleHover(gd) {\n    var newHover = getNextHover(gd);\n    Registry.call('_guiRelayout', gd, 'hovermode', newHover);\n}\n\nmodeBarButtons.resetViewSankey = {\n    name: 'resetSankeyGroup',\n    title: function(gd) { return _(gd, 'Reset view'); },\n    icon: Icons.home,\n    click: function(gd) {\n        var aObj = {\n            'node.groups': [],\n            'node.x': [],\n            'node.y': []\n        };\n        for(var i = 0; i < gd._fullData.length; i++) {\n            var viewInitial = gd._fullData[i]._viewInitial;\n            aObj['node.groups'].push(viewInitial.node.groups.slice());\n            aObj['node.x'].push(viewInitial.node.x.slice());\n            aObj['node.y'].push(viewInitial.node.y.slice());\n        }\n        Registry.call('restyle', gd, aObj);\n    }\n};\n\n// buttons when more then one plot types are present\n\nmodeBarButtons.toggleHover = {\n    name: 'toggleHover',\n    title: function(gd) { return _(gd, 'Toggle show closest data on hover'); },\n    attr: 'hovermode',\n    val: null,\n    toggle: true,\n    icon: Icons.tooltip_basic,\n    gravity: 'ne',\n    click: function(gd, ev) {\n        var layoutUpdate = getNextHover3d(gd, ev);\n        layoutUpdate.hovermode = getNextHover(gd);\n\n        Registry.call('_guiRelayout', gd, layoutUpdate);\n    }\n};\n\nmodeBarButtons.resetViews = {\n    name: 'resetViews',\n    title: function(gd) { return _(gd, 'Reset views'); },\n    icon: Icons.home,\n    click: function(gd, ev) {\n        var button = ev.currentTarget;\n\n        button.setAttribute('data-attr', 'zoom');\n        button.setAttribute('data-val', 'reset');\n        handleCartesian(gd, ev);\n\n        button.setAttribute('data-attr', 'resetLastSave');\n        handleCamera3d(gd, ev);\n\n        resetView(gd, 'geo');\n        resetView(gd, 'mapbox');\n        resetView(gd, 'map');\n    }\n};\n\nmodeBarButtons.toggleSpikelines = {\n    name: 'toggleSpikelines',\n    title: function(gd) { return _(gd, 'Toggle Spike Lines'); },\n    icon: Icons.spikeline,\n    attr: '_cartesianSpikesEnabled',\n    val: 'on',\n    click: function(gd) {\n        var fullLayout = gd._fullLayout;\n        var allSpikesEnabled = fullLayout._cartesianSpikesEnabled;\n\n        fullLayout._cartesianSpikesEnabled = allSpikesEnabled === 'on' ? 'off' : 'on';\n        Registry.call('_guiRelayout', gd, setSpikelineVisibility(gd));\n    }\n};\n\nfunction setSpikelineVisibility(gd) {\n    var fullLayout = gd._fullLayout;\n    var areSpikesOn = fullLayout._cartesianSpikesEnabled === 'on';\n    var axList = axisIds.list(gd, null, true);\n    var aobj = {};\n\n    for(var i = 0; i < axList.length; i++) {\n        var ax = axList[i];\n        aobj[ax._name + '.showspikes'] = areSpikesOn ? true : ax._showSpikeInitial;\n    }\n\n    return aobj;\n}\n\nmodeBarButtons.resetViewMapbox = {\n    name: 'resetViewMapbox',\n    _cat: 'resetView',\n    title: function(gd) { return _(gd, 'Reset view'); },\n    attr: 'reset',\n    icon: Icons.home,\n    click: function(gd) {\n        resetView(gd, 'mapbox');\n    }\n};\n\nmodeBarButtons.resetViewMap = {\n    name: 'resetViewMap',\n    _cat: 'resetView',\n    title: function(gd) { return _(gd, 'Reset view'); },\n    attr: 'reset',\n    icon: Icons.home,\n    click: function(gd) {\n        resetView(gd, 'map');\n    }\n};\n\nmodeBarButtons.zoomInMapbox = {\n    name: 'zoomInMapbox',\n    _cat: 'zoomin',\n    title: function(gd) { return _(gd, 'Zoom in'); },\n    attr: 'zoom',\n    val: 'in',\n    icon: Icons.zoom_plus,\n    click: handleMapboxZoom\n};\n\nmodeBarButtons.zoomInMap = {\n    name: 'zoomInMap',\n    _cat: 'zoomin',\n    title: function(gd) { return _(gd, 'Zoom in'); },\n    attr: 'zoom',\n    val: 'in',\n    icon: Icons.zoom_plus,\n    click: handleMapZoom\n};\n\nmodeBarButtons.zoomOutMapbox = {\n    name: 'zoomOutMapbox',\n    _cat: 'zoomout',\n    title: function(gd) { return _(gd, 'Zoom out'); },\n    attr: 'zoom',\n    val: 'out',\n    icon: Icons.zoom_minus,\n    click: handleMapboxZoom\n};\n\nmodeBarButtons.zoomOutMap = {\n    name: 'zoomOutMap',\n    _cat: 'zoomout',\n    title: function(gd) { return _(gd, 'Zoom out'); },\n    attr: 'zoom',\n    val: 'out',\n    icon: Icons.zoom_minus,\n    click: handleMapZoom\n};\n\nfunction handleMapboxZoom(gd, ev) {\n    _handleMapZoom(gd, ev, 'mapbox');\n}\n\nfunction handleMapZoom(gd, ev) {\n    _handleMapZoom(gd, ev, 'map');\n}\n\nfunction _handleMapZoom(gd, ev, mapType) {\n    var button = ev.currentTarget;\n    var val = button.getAttribute('data-val');\n    var fullLayout = gd._fullLayout;\n    var subplotIds = fullLayout._subplots[mapType] || [];\n    var scalar = 1.05;\n    var aObj = {};\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var id = subplotIds[i];\n        var current = fullLayout[id].zoom;\n        var next = (val === 'in') ? scalar * current : current / scalar;\n        aObj[id + '.zoom'] = next;\n    }\n\n    Registry.call('_guiRelayout', gd, aObj);\n}\n\nfunction resetView(gd, subplotType) {\n    var fullLayout = gd._fullLayout;\n    var subplotIds = fullLayout._subplots[subplotType] || [];\n    var aObj = {};\n\n    for(var i = 0; i < subplotIds.length; i++) {\n        var id = subplotIds[i];\n        var subplotObj = fullLayout[id]._subplot;\n        var viewInitial = subplotObj.viewInitial;\n        var viewKeys = Object.keys(viewInitial);\n\n        for(var j = 0; j < viewKeys.length; j++) {\n            var key = viewKeys[j];\n            aObj[id + '.' + key] = viewInitial[key];\n        }\n    }\n\n    Registry.call('_guiRelayout', gd, aObj);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}